// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package traceflatbuffers

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Attribute struct {
	_tab flatbuffers.Table
}

func GetRootAsAttribute(buf []byte, offset flatbuffers.UOffsetT) *Attribute {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Attribute{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Attribute) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Attribute) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Attribute) Key() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Attribute) ValueType() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Attribute) MutateValueType(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func (rcv *Attribute) Value(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func AttributeStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func AttributeAddKey(builder *flatbuffers.Builder, key flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(key), 0)
}
func AttributeAddValueType(builder *flatbuffers.Builder, valueType byte) {
	builder.PrependByteSlot(1, valueType, 0)
}
func AttributeAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(value), 0)
}
func AttributeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
