// Code generated by protoc-gen-go. DO NOT EDIT.
// source: trace.proto

package traceflatbuffers

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BatchRequest struct {
	EncodedSpans         []byte   `protobuf:"bytes,1,opt,name=encodedSpans,proto3" json:"encodedSpans,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchRequest) Reset()         { *m = BatchRequest{} }
func (m *BatchRequest) String() string { return proto.CompactTextString(m) }
func (*BatchRequest) ProtoMessage()    {}
func (*BatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0571941a1d628a80, []int{0}
}

func (m *BatchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchRequest.Unmarshal(m, b)
}
func (m *BatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchRequest.Marshal(b, m, deterministic)
}
func (m *BatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchRequest.Merge(m, src)
}
func (m *BatchRequest) XXX_Size() int {
	return xxx_messageInfo_BatchRequest.Size(m)
}
func (m *BatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchRequest proto.InternalMessageInfo

func (m *BatchRequest) GetEncodedSpans() []byte {
	if m != nil {
		return m.EncodedSpans
	}
	return nil
}

type BatchResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchResponse) Reset()         { *m = BatchResponse{} }
func (m *BatchResponse) String() string { return proto.CompactTextString(m) }
func (*BatchResponse) ProtoMessage()    {}
func (*BatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0571941a1d628a80, []int{1}
}

func (m *BatchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchResponse.Unmarshal(m, b)
}
func (m *BatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchResponse.Marshal(b, m, deterministic)
}
func (m *BatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchResponse.Merge(m, src)
}
func (m *BatchResponse) XXX_Size() int {
	return xxx_messageInfo_BatchResponse.Size(m)
}
func (m *BatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatchResponse proto.InternalMessageInfo

func (m *BatchResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*BatchRequest)(nil), "traceflatbuffers.BatchRequest")
	proto.RegisterType((*BatchResponse)(nil), "traceflatbuffers.BatchResponse")
}

func init() { proto.RegisterFile("trace.proto", fileDescriptor_0571941a1d628a80) }

var fileDescriptor_0571941a1d628a80 = []byte{
	// 213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x29, 0x4a, 0x4c,
	0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x00, 0x73, 0xd2, 0x72, 0x12, 0x4b, 0x92,
	0x4a, 0xd3, 0xd2, 0x52, 0x8b, 0x8a, 0x95, 0x8c, 0xb8, 0x78, 0x9c, 0x12, 0x4b, 0x92, 0x33, 0x82,
	0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x94, 0xb8, 0x78, 0x52, 0xf3, 0x92, 0xf3, 0x53, 0x52,
	0x53, 0x82, 0x0b, 0x12, 0xf3, 0x8a, 0x25, 0x18, 0x15, 0x18, 0x35, 0x78, 0x82, 0x50, 0xc4, 0x94,
	0x34, 0xb9, 0x78, 0xa1, 0x7a, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0x24, 0xb8, 0xd8, 0x73,
	0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x53, 0xc1, 0xea, 0x39, 0x83, 0x60, 0x5c, 0xa3, 0x08, 0x2e, 0xb6,
	0x10, 0x90, 0x95, 0x45, 0x42, 0x7e, 0x5c, 0x9c, 0xc1, 0xa9, 0x79, 0x29, 0x60, 0x8d, 0x42, 0x72,
	0x7a, 0xe8, 0x0e, 0xd1, 0x43, 0x76, 0x85, 0x94, 0x3c, 0x4e, 0x79, 0x88, 0x8d, 0x4a, 0x0c, 0x4e,
	0x1e, 0x5c, 0x32, 0x99, 0xf9, 0x7a, 0xf9, 0x05, 0xa9, 0x79, 0xc9, 0xa9, 0x79, 0xc5, 0xa5, 0xc5,
	0x10, 0x1f, 0x42, 0xf4, 0xe9, 0x95, 0x19, 0x3a, 0x71, 0x81, 0xed, 0x0d, 0x00, 0x09, 0x06, 0x30,
	0xbe, 0x62, 0x92, 0xf4, 0x2f, 0x48, 0xcd, 0x73, 0x86, 0xa8, 0x04, 0x0b, 0xea, 0x81, 0xe5, 0xf5,
	0xc2, 0x0c, 0x93, 0xd8, 0xc0, 0x3a, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x78, 0x77, 0x54,
	0x57, 0x2a, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TracerClient is the client API for Tracer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TracerClient interface {
	// Sends a batch
	SendBatch(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error)
}

type tracerClient struct {
	cc *grpc.ClientConn
}

func NewTracerClient(cc *grpc.ClientConn) TracerClient {
	return &tracerClient{cc}
}

func (c *tracerClient) SendBatch(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error) {
	out := new(BatchResponse)
	err := c.cc.Invoke(ctx, "/traceflatbuffers.Tracer/SendBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TracerServer is the server API for Tracer service.
type TracerServer interface {
	// Sends a batch
	SendBatch(context.Context, *BatchRequest) (*BatchResponse, error)
}

// UnimplementedTracerServer can be embedded to have forward compatible implementations.
type UnimplementedTracerServer struct {
}

func (*UnimplementedTracerServer) SendBatch(ctx context.Context, req *BatchRequest) (*BatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBatch not implemented")
}

func RegisterTracerServer(s *grpc.Server, srv TracerServer) {
	s.RegisterService(&_Tracer_serviceDesc, srv)
}

func _Tracer_SendBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracerServer).SendBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/traceflatbuffers.Tracer/SendBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracerServer).SendBatch(ctx, req.(*BatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tracer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "traceflatbuffers.Tracer",
	HandlerType: (*TracerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendBatch",
			Handler:    _Tracer_SendBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trace.proto",
}
