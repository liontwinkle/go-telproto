// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc.proto

package traceprotobuf

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("grpc.proto", fileDescriptor_bedfbfc9b54e5600) }

var fileDescriptor_bedfbfc9b54e5600 = []byte{
	// 210 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x2f, 0x2a, 0x48,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2d, 0x29, 0x4a, 0x4c, 0x4e, 0x05, 0xb3, 0x93,
	0x4a, 0xd3, 0xa4, 0xf8, 0x52, 0x2b, 0x92, 0x33, 0x12, 0xf3, 0xd2, 0x53, 0x21, 0xd2, 0x46, 0x11,
	0x5c, 0xbc, 0xa1, 0x79, 0x89, 0x45, 0x95, 0xae, 0x15, 0x05, 0xf9, 0x45, 0x25, 0xa9, 0x45, 0x42,
	0xee, 0x5c, 0x6c, 0x10, 0xb6, 0x90, 0x8c, 0x1e, 0x8a, 0x56, 0x3d, 0x88, 0x70, 0x50, 0x6a, 0x61,
	0x69, 0x6a, 0x71, 0x89, 0x94, 0x2c, 0x0e, 0xd9, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x25, 0x06,
	0xa3, 0xc5, 0x8c, 0x5c, 0x7c, 0xc1, 0x25, 0x45, 0xa9, 0x89, 0xb9, 0x70, 0xb3, 0x5d, 0xb8, 0x58,
	0x3d, 0x52, 0x73, 0x72, 0xf2, 0x85, 0xa4, 0xd1, 0x34, 0x83, 0x45, 0x61, 0x26, 0xcb, 0x60, 0x97,
	0x84, 0x19, 0x2c, 0xe4, 0x4d, 0x25, 0x17, 0x6a, 0x30, 0x1a, 0x30, 0x3a, 0x79, 0x70, 0xc9, 0x64,
	0xe6, 0xeb, 0xe5, 0x17, 0xa4, 0xe6, 0x25, 0xa7, 0xe6, 0x15, 0x97, 0x16, 0x43, 0x82, 0x05, 0xa2,
	0x53, 0xaf, 0xcc, 0xd0, 0x89, 0x2b, 0x04, 0xc4, 0x0a, 0x00, 0x09, 0x06, 0x30, 0xbe, 0x62, 0x92,
	0xf4, 0x2f, 0x48, 0xcd, 0x73, 0x86, 0xa8, 0x04, 0x0b, 0xea, 0x81, 0xe5, 0xf5, 0xc2, 0x0c, 0x93,
	0xd8, 0xc0, 0x3a, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa1, 0xe5, 0xe8, 0x96, 0x7d, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UnaryExporterClient is the client API for UnaryExporter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UnaryExporterClient interface {
	// Sends a batch of telemetry data.
	Export(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportResponse, error)
}

type unaryExporterClient struct {
	cc *grpc.ClientConn
}

func NewUnaryExporterClient(cc *grpc.ClientConn) UnaryExporterClient {
	return &unaryExporterClient{cc}
}

func (c *unaryExporterClient) Export(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportResponse, error) {
	out := new(ExportResponse)
	err := c.cc.Invoke(ctx, "/traceprotobuf.UnaryExporter/Export", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UnaryExporterServer is the server API for UnaryExporter service.
type UnaryExporterServer interface {
	// Sends a batch of telemetry data.
	Export(context.Context, *ExportRequest) (*ExportResponse, error)
}

// UnimplementedUnaryExporterServer can be embedded to have forward compatible implementations.
type UnimplementedUnaryExporterServer struct {
}

func (*UnimplementedUnaryExporterServer) Export(ctx context.Context, req *ExportRequest) (*ExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Export not implemented")
}

func RegisterUnaryExporterServer(s *grpc.Server, srv UnaryExporterServer) {
	s.RegisterService(&_UnaryExporter_serviceDesc, srv)
}

func _UnaryExporter_Export_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnaryExporterServer).Export(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/traceprotobuf.UnaryExporter/Export",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnaryExporterServer).Export(ctx, req.(*ExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UnaryExporter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "traceprotobuf.UnaryExporter",
	HandlerType: (*UnaryExporterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Export",
			Handler:    _UnaryExporter_Export_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}

// StreamExporterClient is the client API for StreamExporter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamExporterClient interface {
	// Hello handshake.
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	// Sends a batch of telemetry data.
	Export(ctx context.Context, opts ...grpc.CallOption) (StreamExporter_ExportClient, error)
}

type streamExporterClient struct {
	cc *grpc.ClientConn
}

func NewStreamExporterClient(cc *grpc.ClientConn) StreamExporterClient {
	return &streamExporterClient{cc}
}

func (c *streamExporterClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/traceprotobuf.StreamExporter/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamExporterClient) Export(ctx context.Context, opts ...grpc.CallOption) (StreamExporter_ExportClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamExporter_serviceDesc.Streams[0], "/traceprotobuf.StreamExporter/Export", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamExporterExportClient{stream}
	return x, nil
}

type StreamExporter_ExportClient interface {
	Send(*ExportRequest) error
	Recv() (*ExportResponse, error)
	grpc.ClientStream
}

type streamExporterExportClient struct {
	grpc.ClientStream
}

func (x *streamExporterExportClient) Send(m *ExportRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamExporterExportClient) Recv() (*ExportResponse, error) {
	m := new(ExportResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamExporterServer is the server API for StreamExporter service.
type StreamExporterServer interface {
	// Hello handshake.
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	// Sends a batch of telemetry data.
	Export(StreamExporter_ExportServer) error
}

// UnimplementedStreamExporterServer can be embedded to have forward compatible implementations.
type UnimplementedStreamExporterServer struct {
}

func (*UnimplementedStreamExporterServer) Hello(ctx context.Context, req *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (*UnimplementedStreamExporterServer) Export(srv StreamExporter_ExportServer) error {
	return status.Errorf(codes.Unimplemented, "method Export not implemented")
}

func RegisterStreamExporterServer(s *grpc.Server, srv StreamExporterServer) {
	s.RegisterService(&_StreamExporter_serviceDesc, srv)
}

func _StreamExporter_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamExporterServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/traceprotobuf.StreamExporter/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamExporterServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamExporter_Export_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamExporterServer).Export(&streamExporterExportServer{stream})
}

type StreamExporter_ExportServer interface {
	Send(*ExportResponse) error
	Recv() (*ExportRequest, error)
	grpc.ServerStream
}

type streamExporterExportServer struct {
	grpc.ServerStream
}

func (x *streamExporterExportServer) Send(m *ExportResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamExporterExportServer) Recv() (*ExportRequest, error) {
	m := new(ExportRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StreamExporter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "traceprotobuf.StreamExporter",
	HandlerType: (*StreamExporterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _StreamExporter_Hello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Export",
			Handler:       _StreamExporter_Export_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc.proto",
}
