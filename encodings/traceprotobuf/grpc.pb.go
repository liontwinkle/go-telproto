// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc.proto

package traceprotobuf

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("grpc.proto", fileDescriptor_bedfbfc9b54e5600) }

var fileDescriptor_bedfbfc9b54e5600 = []byte{
	// 210 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x2f, 0x2a, 0x48,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2d, 0x29, 0x4a, 0x4c, 0x4e, 0x05, 0xb3, 0x93,
	0x4a, 0xd3, 0xa4, 0xf8, 0x52, 0x2b, 0x92, 0x33, 0x12, 0xf3, 0xd2, 0x53, 0x21, 0xd2, 0x46, 0x73,
	0x18, 0xb9, 0xb8, 0x43, 0xf3, 0x12, 0x8b, 0x2a, 0x43, 0x40, 0xca, 0x8a, 0x84, 0x5c, 0xb8, 0x58,
	0x3d, 0x52, 0x73, 0x72, 0xf2, 0x85, 0xa4, 0xf5, 0x50, 0x34, 0xea, 0x81, 0x45, 0x83, 0x52, 0x0b,
	0x4b, 0x53, 0x8b, 0x4b, 0xa4, 0x64, 0xb0, 0x4b, 0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x2a, 0x31,
	0x08, 0xb9, 0x73, 0xb1, 0xb9, 0x56, 0x14, 0xe4, 0x17, 0x95, 0x08, 0xa1, 0xab, 0x84, 0x08, 0xc3,
	0xcc, 0x91, 0xc5, 0x21, 0x0b, 0x33, 0xc8, 0x68, 0x21, 0x23, 0x17, 0x4f, 0x70, 0x49, 0x51, 0x6a,
	0x62, 0x2e, 0x55, 0xdd, 0xe7, 0x4d, 0x25, 0xf7, 0x69, 0x30, 0x1a, 0x30, 0x3a, 0x79, 0x70, 0xc9,
	0x64, 0xe6, 0xeb, 0xe5, 0x17, 0xa4, 0xe6, 0x25, 0xa7, 0xe6, 0x15, 0x97, 0x16, 0x43, 0x42, 0x16,
	0xa2, 0x53, 0xaf, 0xcc, 0xd0, 0x89, 0x0b, 0xec, 0xf4, 0x00, 0x90, 0x60, 0x00, 0xe3, 0x2b, 0x26,
	0x49, 0xff, 0x82, 0xd4, 0x3c, 0x67, 0x88, 0x4a, 0xb0, 0xa0, 0x1e, 0x58, 0x5e, 0x2f, 0xcc, 0x30,
	0x89, 0x0d, 0xac, 0xd3, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xf3, 0xa9, 0xf3, 0xa9, 0xc0, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UnaryTracerClient is the client API for UnaryTracer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UnaryTracerClient interface {
	// First request sent by client to server after connection is established.
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	// Sends a batch of telemetry data.
	Export(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportResponse, error)
}

type unaryTracerClient struct {
	cc *grpc.ClientConn
}

func NewUnaryTracerClient(cc *grpc.ClientConn) UnaryTracerClient {
	return &unaryTracerClient{cc}
}

func (c *unaryTracerClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/traceprotobuf.UnaryTracer/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unaryTracerClient) Export(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportResponse, error) {
	out := new(ExportResponse)
	err := c.cc.Invoke(ctx, "/traceprotobuf.UnaryTracer/Export", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UnaryTracerServer is the server API for UnaryTracer service.
type UnaryTracerServer interface {
	// First request sent by client to server after connection is established.
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	// Sends a batch of telemetry data.
	Export(context.Context, *ExportRequest) (*ExportResponse, error)
}

// UnimplementedUnaryTracerServer can be embedded to have forward compatible implementations.
type UnimplementedUnaryTracerServer struct {
}

func (*UnimplementedUnaryTracerServer) Hello(ctx context.Context, req *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (*UnimplementedUnaryTracerServer) Export(ctx context.Context, req *ExportRequest) (*ExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Export not implemented")
}

func RegisterUnaryTracerServer(s *grpc.Server, srv UnaryTracerServer) {
	s.RegisterService(&_UnaryTracer_serviceDesc, srv)
}

func _UnaryTracer_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnaryTracerServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/traceprotobuf.UnaryTracer/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnaryTracerServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnaryTracer_Export_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnaryTracerServer).Export(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/traceprotobuf.UnaryTracer/Export",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnaryTracerServer).Export(ctx, req.(*ExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UnaryTracer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "traceprotobuf.UnaryTracer",
	HandlerType: (*UnaryTracerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _UnaryTracer_Hello_Handler,
		},
		{
			MethodName: "Export",
			Handler:    _UnaryTracer_Export_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}

// StreamTracerClient is the client API for StreamTracer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamTracerClient interface {
	// First request sent by client to server after connection is established.
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	// Sends a batch of telemetry data.
	Export(ctx context.Context, opts ...grpc.CallOption) (StreamTracer_ExportClient, error)
}

type streamTracerClient struct {
	cc *grpc.ClientConn
}

func NewStreamTracerClient(cc *grpc.ClientConn) StreamTracerClient {
	return &streamTracerClient{cc}
}

func (c *streamTracerClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/traceprotobuf.StreamTracer/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamTracerClient) Export(ctx context.Context, opts ...grpc.CallOption) (StreamTracer_ExportClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamTracer_serviceDesc.Streams[0], "/traceprotobuf.StreamTracer/Export", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamTracerExportClient{stream}
	return x, nil
}

type StreamTracer_ExportClient interface {
	Send(*ExportRequest) error
	Recv() (*ExportResponse, error)
	grpc.ClientStream
}

type streamTracerExportClient struct {
	grpc.ClientStream
}

func (x *streamTracerExportClient) Send(m *ExportRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamTracerExportClient) Recv() (*ExportResponse, error) {
	m := new(ExportResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamTracerServer is the server API for StreamTracer service.
type StreamTracerServer interface {
	// First request sent by client to server after connection is established.
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	// Sends a batch of telemetry data.
	Export(StreamTracer_ExportServer) error
}

// UnimplementedStreamTracerServer can be embedded to have forward compatible implementations.
type UnimplementedStreamTracerServer struct {
}

func (*UnimplementedStreamTracerServer) Hello(ctx context.Context, req *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (*UnimplementedStreamTracerServer) Export(srv StreamTracer_ExportServer) error {
	return status.Errorf(codes.Unimplemented, "method Export not implemented")
}

func RegisterStreamTracerServer(s *grpc.Server, srv StreamTracerServer) {
	s.RegisterService(&_StreamTracer_serviceDesc, srv)
}

func _StreamTracer_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamTracerServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/traceprotobuf.StreamTracer/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamTracerServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamTracer_Export_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamTracerServer).Export(&streamTracerExportServer{stream})
}

type StreamTracer_ExportServer interface {
	Send(*ExportResponse) error
	Recv() (*ExportRequest, error)
	grpc.ServerStream
}

type streamTracerExportServer struct {
	grpc.ServerStream
}

func (x *streamTracerExportServer) Send(m *ExportResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamTracerExportServer) Recv() (*ExportRequest, error) {
	m := new(ExportRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StreamTracer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "traceprotobuf.StreamTracer",
	HandlerType: (*StreamTracerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _StreamTracer_Hello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Export",
			Handler:       _StreamTracer_Export_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc.proto",
}
