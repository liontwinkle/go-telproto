// Code generated by protoc-gen-go. DO NOT EDIT.
// source: metric_data.proto

package baseline

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The kind of metric. It describes how the data is reported.
//
// A gauge is an instantaneous measurement of a value.
//
// A counter/cumulative measurement is a value accumulated over a time
// interval. In a time series, cumulative measurements should have the same
// start time, increasing values and increasing end times, until an event
// resets the cumulative value to zero and sets a new start time for the
// following points.
type MetricDescriptor_Type int32

const (
	// Do not use this default value.
	MetricDescriptor_UNSPECIFIED MetricDescriptor_Type = 0
	// Integer gauge. The value can go both up and down.
	MetricDescriptor_GAUGE_INT64 MetricDescriptor_Type = 1
	// Floating point gauge. The value can go both up and down.
	MetricDescriptor_GAUGE_DOUBLE MetricDescriptor_Type = 2
	// Histogram gauge measurement. The count and sum can go both up and
	// down. Recorded values are always >= 0.
	// Used in scenarios like a snapshot of time the current items in a queue
	// have spent there.
	MetricDescriptor_GAUGE_HISTOGRAM MetricDescriptor_Type = 3
	// Integer counter measurement. The value cannot decrease, if resets
	// then the start_time should also be reset.
	MetricDescriptor_COUNTER_INT64 MetricDescriptor_Type = 4
	// Floating point counter measurement. The value cannot decrease, if
	// resets then the start_time should also be reset. Recorded values are
	// always >= 0.
	MetricDescriptor_COUNTER_DOUBLE MetricDescriptor_Type = 5
	// Histogram cumulative measurement. The count and sum cannot decrease,
	// if resets then the start_time should also be reset.
	MetricDescriptor_CUMULATIVE_HISTOGRAM MetricDescriptor_Type = 6
	// Some frameworks implemented Histograms as a summary of observations
	// (usually things like request durations and response sizes). While it
	// also provides a total count of observations and a sum of all observed
	// values, it calculates configurable percentiles over a sliding time
	// window. This is not recommended, since it cannot be aggregated.
	MetricDescriptor_SUMMARY MetricDescriptor_Type = 7
)

var MetricDescriptor_Type_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "GAUGE_INT64",
	2: "GAUGE_DOUBLE",
	3: "GAUGE_HISTOGRAM",
	4: "COUNTER_INT64",
	5: "COUNTER_DOUBLE",
	6: "CUMULATIVE_HISTOGRAM",
	7: "SUMMARY",
}

var MetricDescriptor_Type_value = map[string]int32{
	"UNSPECIFIED":          0,
	"GAUGE_INT64":          1,
	"GAUGE_DOUBLE":         2,
	"GAUGE_HISTOGRAM":      3,
	"COUNTER_INT64":        4,
	"COUNTER_DOUBLE":       5,
	"CUMULATIVE_HISTOGRAM": 6,
	"SUMMARY":              7,
}

func (x MetricDescriptor_Type) String() string {
	return proto.EnumName(MetricDescriptor_Type_name, int32(x))
}

func (MetricDescriptor_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9a96a8671bd66caf, []int{2, 0}
}

// A list of metrics from a Resource.
type ResourceMetrics struct {
	Resource             *Resource `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	Metrics              []*Metric `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ResourceMetrics) Reset()         { *m = ResourceMetrics{} }
func (m *ResourceMetrics) String() string { return proto.CompactTextString(m) }
func (*ResourceMetrics) ProtoMessage()    {}
func (*ResourceMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a96a8671bd66caf, []int{0}
}

func (m *ResourceMetrics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceMetrics.Unmarshal(m, b)
}
func (m *ResourceMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceMetrics.Marshal(b, m, deterministic)
}
func (m *ResourceMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceMetrics.Merge(m, src)
}
func (m *ResourceMetrics) XXX_Size() int {
	return xxx_messageInfo_ResourceMetrics.Size(m)
}
func (m *ResourceMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceMetrics proto.InternalMessageInfo

func (m *ResourceMetrics) GetResource() *Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *ResourceMetrics) GetMetrics() []*Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

// Defines a Metric which has one or more timeseries.
//
// The data model and relation between entities is shown in the diagram below.
//
// - Metric is composed of a Resource, a MetricDescriptor and a TimeSeriesList data.
// - MetricDescriptor contains a list of label keys (shown horizontally).
// - TimeSeriesList is composed of a list of TimeSeries (shown vertically).
// - TimeSeries contains a list of label values and a list of metric values (shown
//   horizontally).
//
//     Metric
//  +----------+         +--------+
//  |  resource|-------->|Resource|
//  |          |         +--------+
//  |          |
//  |          |         +------------------------+
//  |descriptor|-------->| MetricDescriptor       |
//  |          |         |+-----+-----+   +-----+ |
//  |          |         ||label|label|...|label| |
//  |      data|--+      ||key1 |key2 |   |keyN | |
//  +----------+  |      |+-----+-----+   +-----+ |
//                |      +------------------------+
//                |
//                |      +------------------------------+
//                |      |TimeSeries 1                  |
//                v      |+-----+-----+   +-----+       |
//             +-----+   ||label|label|...|label|       |
//             |  1  |-->|+-----+-----+   +-----+       |
//             +-----+   |+-----+-----+-----+   +-----+ |
//             |  .  |   ||value|value|value|...|value| |
//             |  .  |   |+-----+-----+-----+   +-----+ |
//             |  .  |   +------------------------------+
//             |  .  |                   .
//             |  .  |                   .
//             |  .  |                   .
//             |  .  |   +-----------------------------------+
//             |  .  |   |TimeSeries N                       |
//             +-----+   |+-----+-----+   +-----+            |
//             |  N  |-->||label|label|...|label|            |
//             +-----+   |+-----+-----+   +-----+            |
//                       |+-----+-----+-----+-----+   +-----+|
//                       ||value|value|value|value|...|value||
//                       |+-----+-----+-----+-----+   +-----+|
//                       +-----------------------------------+
//
//-----------------------------------------------------------------------
// TimeSeries contain an array of values, each value corresponding to a given moment in
// time. Each element of TimeSeries array is timestamped.
//
// TimeSeries are strongly typed: the element of a TimeSeries array has
// a specific Protobuf message depending on the value type of the metric and thus
// there are currently 4 TimeSeriesList and 4 TimeSeries messages, which
// correspond to the types of metric values.
// Defines a Metric which has one or more timeseries.
type Metric struct {
	// The descriptor of the Metric.
	MetricDescriptor *MetricDescriptor `protobuf:"bytes,1,opt,name=metric_descriptor,json=metricDescriptor,proto3" json:"metric_descriptor,omitempty"`
	// One or more timeseries for a single metric, where each timeseries has
	// one or more points.
	Timeseries []*TimeSeries `protobuf:"bytes,2,rep,name=timeseries,proto3" json:"timeseries,omitempty"`
	// The resource for the metric. If unset, it may be set to a default value
	// provided for a sequence of messages in an RPC stream.
	Resource             *Resource `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Metric) Reset()         { *m = Metric{} }
func (m *Metric) String() string { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()    {}
func (*Metric) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a96a8671bd66caf, []int{1}
}

func (m *Metric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metric.Unmarshal(m, b)
}
func (m *Metric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metric.Marshal(b, m, deterministic)
}
func (m *Metric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metric.Merge(m, src)
}
func (m *Metric) XXX_Size() int {
	return xxx_messageInfo_Metric.Size(m)
}
func (m *Metric) XXX_DiscardUnknown() {
	xxx_messageInfo_Metric.DiscardUnknown(m)
}

var xxx_messageInfo_Metric proto.InternalMessageInfo

func (m *Metric) GetMetricDescriptor() *MetricDescriptor {
	if m != nil {
		return m.MetricDescriptor
	}
	return nil
}

func (m *Metric) GetTimeseries() []*TimeSeries {
	if m != nil {
		return m.Timeseries
	}
	return nil
}

func (m *Metric) GetResource() *Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

// Defines a metric type and its schema.
type MetricDescriptor struct {
	// The metric type, including its DNS name prefix. It must be unique.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A detailed description of the metric, which can be used in documentation.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The unit in which the metric value is reported. Follows the format
	// described by http://unitsofmeasure.org/ucum.html.
	Unit string                `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit,omitempty"`
	Type MetricDescriptor_Type `protobuf:"varint,4,opt,name=type,proto3,enum=baseline.MetricDescriptor_Type" json:"type,omitempty"`
	// The label keys associated with the metric descriptor.
	LabelKeys            []string `protobuf:"bytes,5,rep,name=label_keys,json=labelKeys,proto3" json:"label_keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetricDescriptor) Reset()         { *m = MetricDescriptor{} }
func (m *MetricDescriptor) String() string { return proto.CompactTextString(m) }
func (*MetricDescriptor) ProtoMessage()    {}
func (*MetricDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a96a8671bd66caf, []int{2}
}

func (m *MetricDescriptor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricDescriptor.Unmarshal(m, b)
}
func (m *MetricDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricDescriptor.Marshal(b, m, deterministic)
}
func (m *MetricDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricDescriptor.Merge(m, src)
}
func (m *MetricDescriptor) XXX_Size() int {
	return xxx_messageInfo_MetricDescriptor.Size(m)
}
func (m *MetricDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_MetricDescriptor proto.InternalMessageInfo

func (m *MetricDescriptor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetricDescriptor) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MetricDescriptor) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *MetricDescriptor) GetType() MetricDescriptor_Type {
	if m != nil {
		return m.Type
	}
	return MetricDescriptor_UNSPECIFIED
}

func (m *MetricDescriptor) GetLabelKeys() []string {
	if m != nil {
		return m.LabelKeys
	}
	return nil
}

// A collection of data points that describes the time-varying values
// of a metric.
type TimeSeries struct {
	// The set of label values that uniquely identify this timeseries. Applies to
	// all points. The order of label values must match that of label keys in the
	// metric descriptor.
	LabelValues []*LabelValue `protobuf:"bytes,1,rep,name=label_values,json=labelValues,proto3" json:"label_values,omitempty"`
	// The data points of this timeseries. Point.value type MUST match the
	// MetricDescriptor.type.
	Points               []*Point `protobuf:"bytes,2,rep,name=points,proto3" json:"points,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimeSeries) Reset()         { *m = TimeSeries{} }
func (m *TimeSeries) String() string { return proto.CompactTextString(m) }
func (*TimeSeries) ProtoMessage()    {}
func (*TimeSeries) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a96a8671bd66caf, []int{3}
}

func (m *TimeSeries) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeSeries.Unmarshal(m, b)
}
func (m *TimeSeries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeSeries.Marshal(b, m, deterministic)
}
func (m *TimeSeries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeSeries.Merge(m, src)
}
func (m *TimeSeries) XXX_Size() int {
	return xxx_messageInfo_TimeSeries.Size(m)
}
func (m *TimeSeries) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeSeries.DiscardUnknown(m)
}

var xxx_messageInfo_TimeSeries proto.InternalMessageInfo

func (m *TimeSeries) GetLabelValues() []*LabelValue {
	if m != nil {
		return m.LabelValues
	}
	return nil
}

func (m *TimeSeries) GetPoints() []*Point {
	if m != nil {
		return m.Points
	}
	return nil
}

type LabelValue struct {
	// The value for the label.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// If false the value field is ignored and considered not set.
	// This is used to differentiate a missing label from an empty string.
	HasValue             bool     `protobuf:"varint,2,opt,name=has_value,json=hasValue,proto3" json:"has_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LabelValue) Reset()         { *m = LabelValue{} }
func (m *LabelValue) String() string { return proto.CompactTextString(m) }
func (*LabelValue) ProtoMessage()    {}
func (*LabelValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a96a8671bd66caf, []int{4}
}

func (m *LabelValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LabelValue.Unmarshal(m, b)
}
func (m *LabelValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LabelValue.Marshal(b, m, deterministic)
}
func (m *LabelValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelValue.Merge(m, src)
}
func (m *LabelValue) XXX_Size() int {
	return xxx_messageInfo_LabelValue.Size(m)
}
func (m *LabelValue) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelValue.DiscardUnknown(m)
}

var xxx_messageInfo_LabelValue proto.InternalMessageInfo

func (m *LabelValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *LabelValue) GetHasValue() bool {
	if m != nil {
		return m.HasValue
	}
	return false
}

// A timestamped measurement.
type Point struct {
	// Must be present for counter/cumulative metrics. The time when the
	// cumulative value was reset to zero. The cumulative value is over the time
	// interval (start_timestamp, timestamp]. If not specified, the backend can
	// use the previous recorded value.
	StartTimestamp *timestamp.Timestamp `protobuf:"bytes,1,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	// The moment when this point was recorded.
	// If not specified, the timestamp will be decided by the backend.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The actual point value.
	//
	// Types that are valid to be assigned to Value:
	//	*Point_Int64Value
	//	*Point_DoubleValue
	//	*Point_HistogramValue
	//	*Point_SummaryValue
	Value                isPoint_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Point) Reset()         { *m = Point{} }
func (m *Point) String() string { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()    {}
func (*Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a96a8671bd66caf, []int{5}
}

func (m *Point) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Point.Unmarshal(m, b)
}
func (m *Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Point.Marshal(b, m, deterministic)
}
func (m *Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Point.Merge(m, src)
}
func (m *Point) XXX_Size() int {
	return xxx_messageInfo_Point.Size(m)
}
func (m *Point) XXX_DiscardUnknown() {
	xxx_messageInfo_Point.DiscardUnknown(m)
}

var xxx_messageInfo_Point proto.InternalMessageInfo

func (m *Point) GetStartTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.StartTimestamp
	}
	return nil
}

func (m *Point) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type isPoint_Value interface {
	isPoint_Value()
}

type Point_Int64Value struct {
	Int64Value int64 `protobuf:"varint,3,opt,name=int64_value,json=int64Value,proto3,oneof"`
}

type Point_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,4,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type Point_HistogramValue struct {
	HistogramValue *HistogramValue `protobuf:"bytes,5,opt,name=histogram_value,json=histogramValue,proto3,oneof"`
}

type Point_SummaryValue struct {
	SummaryValue *SummaryValue `protobuf:"bytes,6,opt,name=summary_value,json=summaryValue,proto3,oneof"`
}

func (*Point_Int64Value) isPoint_Value() {}

func (*Point_DoubleValue) isPoint_Value() {}

func (*Point_HistogramValue) isPoint_Value() {}

func (*Point_SummaryValue) isPoint_Value() {}

func (m *Point) GetValue() isPoint_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Point) GetInt64Value() int64 {
	if x, ok := m.GetValue().(*Point_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (m *Point) GetDoubleValue() float64 {
	if x, ok := m.GetValue().(*Point_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *Point) GetHistogramValue() *HistogramValue {
	if x, ok := m.GetValue().(*Point_HistogramValue); ok {
		return x.HistogramValue
	}
	return nil
}

func (m *Point) GetSummaryValue() *SummaryValue {
	if x, ok := m.GetValue().(*Point_SummaryValue); ok {
		return x.SummaryValue
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Point) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Point_Int64Value)(nil),
		(*Point_DoubleValue)(nil),
		(*Point_HistogramValue)(nil),
		(*Point_SummaryValue)(nil),
	}
}

// Histogram contains summary statistics for a population of values. It may
// optionally contain the distribution of those values across a set of buckets.
type HistogramValue struct {
	// The number of values in the population. Must be non-negative. This value
	// must equal the sum of the values in bucket_counts if a histogram is
	// provided.
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// The sum of the values in the population. If count is zero then this field
	// must be zero.
	Sum float64 `protobuf:"fixed64,2,opt,name=sum,proto3" json:"sum,omitempty"`
	// Don't change bucket boundaries within a TimeSeries if your backend doesn't
	// support this.
	BucketOptions *HistogramValue_BucketOptions `protobuf:"bytes,3,opt,name=bucket_options,json=bucketOptions,proto3" json:"bucket_options,omitempty"`
	// The sum of the values in the Bucket counts must equal the value in the
	// count field of the histogram.
	Buckets              []*HistogramValue_Bucket `protobuf:"bytes,4,rep,name=buckets,proto3" json:"buckets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *HistogramValue) Reset()         { *m = HistogramValue{} }
func (m *HistogramValue) String() string { return proto.CompactTextString(m) }
func (*HistogramValue) ProtoMessage()    {}
func (*HistogramValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a96a8671bd66caf, []int{6}
}

func (m *HistogramValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HistogramValue.Unmarshal(m, b)
}
func (m *HistogramValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HistogramValue.Marshal(b, m, deterministic)
}
func (m *HistogramValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistogramValue.Merge(m, src)
}
func (m *HistogramValue) XXX_Size() int {
	return xxx_messageInfo_HistogramValue.Size(m)
}
func (m *HistogramValue) XXX_DiscardUnknown() {
	xxx_messageInfo_HistogramValue.DiscardUnknown(m)
}

var xxx_messageInfo_HistogramValue proto.InternalMessageInfo

func (m *HistogramValue) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *HistogramValue) GetSum() float64 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func (m *HistogramValue) GetBucketOptions() *HistogramValue_BucketOptions {
	if m != nil {
		return m.BucketOptions
	}
	return nil
}

func (m *HistogramValue) GetBuckets() []*HistogramValue_Bucket {
	if m != nil {
		return m.Buckets
	}
	return nil
}

// A Histogram may optionally contain the distribution of the values in the
// population. The bucket boundaries are described by BucketOptions.
type HistogramValue_BucketOptions struct {
	// Types that are valid to be assigned to Type:
	//	*HistogramValue_BucketOptions_Explicit_
	Type                 isHistogramValue_BucketOptions_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *HistogramValue_BucketOptions) Reset()         { *m = HistogramValue_BucketOptions{} }
func (m *HistogramValue_BucketOptions) String() string { return proto.CompactTextString(m) }
func (*HistogramValue_BucketOptions) ProtoMessage()    {}
func (*HistogramValue_BucketOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a96a8671bd66caf, []int{6, 0}
}

func (m *HistogramValue_BucketOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HistogramValue_BucketOptions.Unmarshal(m, b)
}
func (m *HistogramValue_BucketOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HistogramValue_BucketOptions.Marshal(b, m, deterministic)
}
func (m *HistogramValue_BucketOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistogramValue_BucketOptions.Merge(m, src)
}
func (m *HistogramValue_BucketOptions) XXX_Size() int {
	return xxx_messageInfo_HistogramValue_BucketOptions.Size(m)
}
func (m *HistogramValue_BucketOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_HistogramValue_BucketOptions.DiscardUnknown(m)
}

var xxx_messageInfo_HistogramValue_BucketOptions proto.InternalMessageInfo

type isHistogramValue_BucketOptions_Type interface {
	isHistogramValue_BucketOptions_Type()
}

type HistogramValue_BucketOptions_Explicit_ struct {
	Explicit *HistogramValue_BucketOptions_Explicit `protobuf:"bytes,1,opt,name=explicit,proto3,oneof"`
}

func (*HistogramValue_BucketOptions_Explicit_) isHistogramValue_BucketOptions_Type() {}

func (m *HistogramValue_BucketOptions) GetType() isHistogramValue_BucketOptions_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *HistogramValue_BucketOptions) GetExplicit() *HistogramValue_BucketOptions_Explicit {
	if x, ok := m.GetType().(*HistogramValue_BucketOptions_Explicit_); ok {
		return x.Explicit
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HistogramValue_BucketOptions) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HistogramValue_BucketOptions_Explicit_)(nil),
	}
}

// Specifies a set of buckets with arbitrary upper-bounds.
// This defines size(bounds) + 1 (= N) buckets. The boundaries for bucket
// index i are:
//
// [0, bucket_bounds[i]) for i == 0
// [bucket_bounds[i-1], bucket_bounds[i]) for 0 < i < N-1
// [bucket_bounds[i], +infinity) for i == N-1
type HistogramValue_BucketOptions_Explicit struct {
	// The values must be strictly increasing and > 0.
	Bounds               []float64 `protobuf:"fixed64,1,rep,packed,name=bounds,proto3" json:"bounds,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *HistogramValue_BucketOptions_Explicit) Reset()         { *m = HistogramValue_BucketOptions_Explicit{} }
func (m *HistogramValue_BucketOptions_Explicit) String() string { return proto.CompactTextString(m) }
func (*HistogramValue_BucketOptions_Explicit) ProtoMessage()    {}
func (*HistogramValue_BucketOptions_Explicit) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a96a8671bd66caf, []int{6, 0, 0}
}

func (m *HistogramValue_BucketOptions_Explicit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HistogramValue_BucketOptions_Explicit.Unmarshal(m, b)
}
func (m *HistogramValue_BucketOptions_Explicit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HistogramValue_BucketOptions_Explicit.Marshal(b, m, deterministic)
}
func (m *HistogramValue_BucketOptions_Explicit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistogramValue_BucketOptions_Explicit.Merge(m, src)
}
func (m *HistogramValue_BucketOptions_Explicit) XXX_Size() int {
	return xxx_messageInfo_HistogramValue_BucketOptions_Explicit.Size(m)
}
func (m *HistogramValue_BucketOptions_Explicit) XXX_DiscardUnknown() {
	xxx_messageInfo_HistogramValue_BucketOptions_Explicit.DiscardUnknown(m)
}

var xxx_messageInfo_HistogramValue_BucketOptions_Explicit proto.InternalMessageInfo

func (m *HistogramValue_BucketOptions_Explicit) GetBounds() []float64 {
	if m != nil {
		return m.Bounds
	}
	return nil
}

type HistogramValue_Bucket struct {
	// The number of values in each bucket of the histogram, as described in
	// bucket_bounds.
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// Exemplars are example points that may be used to annotate aggregated
	// Histogram values.
	Exemplar             *HistogramValue_Bucket_Exemplar `protobuf:"bytes,2,opt,name=exemplar,proto3" json:"exemplar,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *HistogramValue_Bucket) Reset()         { *m = HistogramValue_Bucket{} }
func (m *HistogramValue_Bucket) String() string { return proto.CompactTextString(m) }
func (*HistogramValue_Bucket) ProtoMessage()    {}
func (*HistogramValue_Bucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a96a8671bd66caf, []int{6, 1}
}

func (m *HistogramValue_Bucket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HistogramValue_Bucket.Unmarshal(m, b)
}
func (m *HistogramValue_Bucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HistogramValue_Bucket.Marshal(b, m, deterministic)
}
func (m *HistogramValue_Bucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistogramValue_Bucket.Merge(m, src)
}
func (m *HistogramValue_Bucket) XXX_Size() int {
	return xxx_messageInfo_HistogramValue_Bucket.Size(m)
}
func (m *HistogramValue_Bucket) XXX_DiscardUnknown() {
	xxx_messageInfo_HistogramValue_Bucket.DiscardUnknown(m)
}

var xxx_messageInfo_HistogramValue_Bucket proto.InternalMessageInfo

func (m *HistogramValue_Bucket) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *HistogramValue_Bucket) GetExemplar() *HistogramValue_Bucket_Exemplar {
	if m != nil {
		return m.Exemplar
	}
	return nil
}

// Exemplars are example points that may be used to annotate aggregated
// Histogram values. They are metadata that gives information about a
// particular value added to a Histogram bucket.
type HistogramValue_Bucket_Exemplar struct {
	// Value of the exemplar point. It determines which bucket the exemplar
	// belongs to.
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	// The observation (sampling) time of the above value.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Contextual information about the example value.
	Attachments          map[string]string `protobuf:"bytes,3,rep,name=attachments,proto3" json:"attachments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HistogramValue_Bucket_Exemplar) Reset()         { *m = HistogramValue_Bucket_Exemplar{} }
func (m *HistogramValue_Bucket_Exemplar) String() string { return proto.CompactTextString(m) }
func (*HistogramValue_Bucket_Exemplar) ProtoMessage()    {}
func (*HistogramValue_Bucket_Exemplar) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a96a8671bd66caf, []int{6, 1, 0}
}

func (m *HistogramValue_Bucket_Exemplar) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HistogramValue_Bucket_Exemplar.Unmarshal(m, b)
}
func (m *HistogramValue_Bucket_Exemplar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HistogramValue_Bucket_Exemplar.Marshal(b, m, deterministic)
}
func (m *HistogramValue_Bucket_Exemplar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistogramValue_Bucket_Exemplar.Merge(m, src)
}
func (m *HistogramValue_Bucket_Exemplar) XXX_Size() int {
	return xxx_messageInfo_HistogramValue_Bucket_Exemplar.Size(m)
}
func (m *HistogramValue_Bucket_Exemplar) XXX_DiscardUnknown() {
	xxx_messageInfo_HistogramValue_Bucket_Exemplar.DiscardUnknown(m)
}

var xxx_messageInfo_HistogramValue_Bucket_Exemplar proto.InternalMessageInfo

func (m *HistogramValue_Bucket_Exemplar) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *HistogramValue_Bucket_Exemplar) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *HistogramValue_Bucket_Exemplar) GetAttachments() map[string]string {
	if m != nil {
		return m.Attachments
	}
	return nil
}

// The start_timestamp only applies to the count and sum in the SummaryValue.
type SummaryValue struct {
	// The total number of recorded values since start_time. Optional since
	// some systems don't expose this.
	Count *wrappers.Int64Value `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
	// The total sum of recorded values since start_time. Optional since some
	// systems don't expose this. If count is zero then this field must be zero.
	// This field must be unset if the sum is not available.
	Sum *wrappers.DoubleValue `protobuf:"bytes,2,opt,name=sum,proto3" json:"sum,omitempty"`
	// Values calculated over an arbitrary time window.
	Snapshot             *SummaryValue_Snapshot `protobuf:"bytes,3,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *SummaryValue) Reset()         { *m = SummaryValue{} }
func (m *SummaryValue) String() string { return proto.CompactTextString(m) }
func (*SummaryValue) ProtoMessage()    {}
func (*SummaryValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a96a8671bd66caf, []int{7}
}

func (m *SummaryValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SummaryValue.Unmarshal(m, b)
}
func (m *SummaryValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SummaryValue.Marshal(b, m, deterministic)
}
func (m *SummaryValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SummaryValue.Merge(m, src)
}
func (m *SummaryValue) XXX_Size() int {
	return xxx_messageInfo_SummaryValue.Size(m)
}
func (m *SummaryValue) XXX_DiscardUnknown() {
	xxx_messageInfo_SummaryValue.DiscardUnknown(m)
}

var xxx_messageInfo_SummaryValue proto.InternalMessageInfo

func (m *SummaryValue) GetCount() *wrappers.Int64Value {
	if m != nil {
		return m.Count
	}
	return nil
}

func (m *SummaryValue) GetSum() *wrappers.DoubleValue {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *SummaryValue) GetSnapshot() *SummaryValue_Snapshot {
	if m != nil {
		return m.Snapshot
	}
	return nil
}

// The values in this message can be reset at arbitrary unknown times, with
// the requirement that all of them are reset at the same time.
type SummaryValue_Snapshot struct {
	// The number of values in the snapshot. Optional since some systems don't
	// expose this.
	Count *wrappers.Int64Value `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
	// The sum of values in the snapshot. Optional since some systems don't
	// expose this. If count is zero then this field must be zero or not set
	// (if not supported).
	Sum *wrappers.DoubleValue `protobuf:"bytes,2,opt,name=sum,proto3" json:"sum,omitempty"`
	// A list of values at different percentiles of the distribution calculated
	// from the current snapshot. The percentiles must be strictly increasing.
	PercentileValues     []*SummaryValue_Snapshot_ValueAtPercentile `protobuf:"bytes,3,rep,name=percentile_values,json=percentileValues,proto3" json:"percentile_values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *SummaryValue_Snapshot) Reset()         { *m = SummaryValue_Snapshot{} }
func (m *SummaryValue_Snapshot) String() string { return proto.CompactTextString(m) }
func (*SummaryValue_Snapshot) ProtoMessage()    {}
func (*SummaryValue_Snapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a96a8671bd66caf, []int{7, 0}
}

func (m *SummaryValue_Snapshot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SummaryValue_Snapshot.Unmarshal(m, b)
}
func (m *SummaryValue_Snapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SummaryValue_Snapshot.Marshal(b, m, deterministic)
}
func (m *SummaryValue_Snapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SummaryValue_Snapshot.Merge(m, src)
}
func (m *SummaryValue_Snapshot) XXX_Size() int {
	return xxx_messageInfo_SummaryValue_Snapshot.Size(m)
}
func (m *SummaryValue_Snapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_SummaryValue_Snapshot.DiscardUnknown(m)
}

var xxx_messageInfo_SummaryValue_Snapshot proto.InternalMessageInfo

func (m *SummaryValue_Snapshot) GetCount() *wrappers.Int64Value {
	if m != nil {
		return m.Count
	}
	return nil
}

func (m *SummaryValue_Snapshot) GetSum() *wrappers.DoubleValue {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *SummaryValue_Snapshot) GetPercentileValues() []*SummaryValue_Snapshot_ValueAtPercentile {
	if m != nil {
		return m.PercentileValues
	}
	return nil
}

// Represents the value at a given percentile of a distribution.
type SummaryValue_Snapshot_ValueAtPercentile struct {
	// The percentile of a distribution. Must be in the interval
	// (0.0, 100.0].
	Percentile float64 `protobuf:"fixed64,1,opt,name=percentile,proto3" json:"percentile,omitempty"`
	// The value at the given percentile of a distribution.
	Value                float64  `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SummaryValue_Snapshot_ValueAtPercentile) Reset() {
	*m = SummaryValue_Snapshot_ValueAtPercentile{}
}
func (m *SummaryValue_Snapshot_ValueAtPercentile) String() string { return proto.CompactTextString(m) }
func (*SummaryValue_Snapshot_ValueAtPercentile) ProtoMessage()    {}
func (*SummaryValue_Snapshot_ValueAtPercentile) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a96a8671bd66caf, []int{7, 0, 0}
}

func (m *SummaryValue_Snapshot_ValueAtPercentile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SummaryValue_Snapshot_ValueAtPercentile.Unmarshal(m, b)
}
func (m *SummaryValue_Snapshot_ValueAtPercentile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SummaryValue_Snapshot_ValueAtPercentile.Marshal(b, m, deterministic)
}
func (m *SummaryValue_Snapshot_ValueAtPercentile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SummaryValue_Snapshot_ValueAtPercentile.Merge(m, src)
}
func (m *SummaryValue_Snapshot_ValueAtPercentile) XXX_Size() int {
	return xxx_messageInfo_SummaryValue_Snapshot_ValueAtPercentile.Size(m)
}
func (m *SummaryValue_Snapshot_ValueAtPercentile) XXX_DiscardUnknown() {
	xxx_messageInfo_SummaryValue_Snapshot_ValueAtPercentile.DiscardUnknown(m)
}

var xxx_messageInfo_SummaryValue_Snapshot_ValueAtPercentile proto.InternalMessageInfo

func (m *SummaryValue_Snapshot_ValueAtPercentile) GetPercentile() float64 {
	if m != nil {
		return m.Percentile
	}
	return 0
}

func (m *SummaryValue_Snapshot_ValueAtPercentile) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterEnum("baseline.MetricDescriptor_Type", MetricDescriptor_Type_name, MetricDescriptor_Type_value)
	proto.RegisterType((*ResourceMetrics)(nil), "baseline.ResourceMetrics")
	proto.RegisterType((*Metric)(nil), "baseline.Metric")
	proto.RegisterType((*MetricDescriptor)(nil), "baseline.MetricDescriptor")
	proto.RegisterType((*TimeSeries)(nil), "baseline.TimeSeries")
	proto.RegisterType((*LabelValue)(nil), "baseline.LabelValue")
	proto.RegisterType((*Point)(nil), "baseline.Point")
	proto.RegisterType((*HistogramValue)(nil), "baseline.HistogramValue")
	proto.RegisterType((*HistogramValue_BucketOptions)(nil), "baseline.HistogramValue.BucketOptions")
	proto.RegisterType((*HistogramValue_BucketOptions_Explicit)(nil), "baseline.HistogramValue.BucketOptions.Explicit")
	proto.RegisterType((*HistogramValue_Bucket)(nil), "baseline.HistogramValue.Bucket")
	proto.RegisterType((*HistogramValue_Bucket_Exemplar)(nil), "baseline.HistogramValue.Bucket.Exemplar")
	proto.RegisterMapType((map[string]string)(nil), "baseline.HistogramValue.Bucket.Exemplar.AttachmentsEntry")
	proto.RegisterType((*SummaryValue)(nil), "baseline.SummaryValue")
	proto.RegisterType((*SummaryValue_Snapshot)(nil), "baseline.SummaryValue.Snapshot")
	proto.RegisterType((*SummaryValue_Snapshot_ValueAtPercentile)(nil), "baseline.SummaryValue.Snapshot.ValueAtPercentile")
}

func init() { proto.RegisterFile("metric_data.proto", fileDescriptor_9a96a8671bd66caf) }

var fileDescriptor_9a96a8671bd66caf = []byte{
	// 1037 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xcd, 0x6e, 0x23, 0xc5,
	0x13, 0xcf, 0x8c, 0x3f, 0x62, 0xd7, 0x24, 0xf6, 0xa4, 0xff, 0xd1, 0xca, 0x7f, 0xef, 0xb2, 0x09,
	0x83, 0x04, 0x11, 0x87, 0x89, 0x92, 0x8d, 0x96, 0x5d, 0x10, 0x20, 0xdb, 0x31, 0xb1, 0x45, 0x9c,
	0x44, 0x6d, 0x3b, 0x12, 0x42, 0x22, 0x1a, 0x4f, 0x9a, 0x78, 0x94, 0xf9, 0xd2, 0x74, 0xcf, 0x82,
	0x5f, 0x81, 0x27, 0xe0, 0xc2, 0x3b, 0x70, 0xe3, 0x19, 0xb8, 0x71, 0x47, 0xe2, 0x01, 0x78, 0x01,
	0xae, 0x68, 0xba, 0x7b, 0x3e, 0xec, 0x10, 0x79, 0xc5, 0x81, 0x5b, 0xd7, 0xaf, 0x7e, 0xf5, 0x9b,
	0xaa, 0xae, 0xaa, 0xd6, 0xc0, 0x8e, 0x47, 0x58, 0xe4, 0xd8, 0x37, 0xb7, 0x16, 0xb3, 0xcc, 0x30,
	0x0a, 0x58, 0x80, 0x6a, 0x33, 0x8b, 0x12, 0xd7, 0xf1, 0x49, 0x7b, 0x97, 0x11, 0x97, 0x24, 0x84,
	0x45, 0xc1, 0xdf, 0xde, 0xbb, 0x0b, 0x82, 0x3b, 0x97, 0x1c, 0x72, 0x6b, 0x16, 0x7f, 0x7b, 0xc8,
	0x1c, 0x8f, 0x50, 0x66, 0x79, 0xa1, 0x24, 0x3c, 0x5f, 0x25, 0x7c, 0x17, 0x59, 0x61, 0x48, 0x22,
	0x2a, 0xfc, 0x86, 0x07, 0x4d, 0x4c, 0x68, 0x10, 0x47, 0x36, 0x19, 0xf1, 0xaf, 0x53, 0x64, 0x42,
	0x2d, 0x92, 0x50, 0x4b, 0xd9, 0x57, 0x0e, 0xb4, 0x63, 0x64, 0xa6, 0x69, 0x98, 0x29, 0x19, 0x67,
	0x1c, 0xf4, 0x21, 0x6c, 0x8a, 0xc4, 0x69, 0x4b, 0xdd, 0x2f, 0x1d, 0x68, 0xc7, 0x7a, 0x4e, 0x17,
	0x9a, 0x38, 0x25, 0x18, 0xbf, 0x28, 0x50, 0x15, 0x18, 0x3a, 0xcb, 0xeb, 0x25, 0xd4, 0x8e, 0x9c,
	0x90, 0x05, 0x91, 0xfc, 0x5e, 0x7b, 0x55, 0xe0, 0x34, 0x63, 0x60, 0xdd, 0x5b, 0x41, 0xd0, 0x09,
	0x00, 0xaf, 0x9a, 0x44, 0x0e, 0x49, 0x53, 0xd8, 0xcd, 0x15, 0x26, 0x8e, 0x47, 0xc6, 0xdc, 0x87,
	0x0b, 0xbc, 0xa5, 0x2a, 0x4b, 0xeb, 0xab, 0x34, 0x7e, 0x53, 0x41, 0x5f, 0x4d, 0x06, 0x21, 0x28,
	0xfb, 0x96, 0x27, 0xae, 0xa9, 0x8e, 0xf9, 0x19, 0xed, 0x83, 0x96, 0x16, 0xe4, 0x04, 0x7e, 0x4b,
	0xe5, 0xae, 0x22, 0x94, 0x44, 0xc5, 0xbe, 0xc3, 0xf8, 0x67, 0xeb, 0x98, 0x9f, 0xd1, 0x0b, 0x28,
	0xb3, 0x45, 0x48, 0x5a, 0xe5, 0x7d, 0xe5, 0xa0, 0x71, 0xbc, 0xf7, 0xf8, 0x05, 0x98, 0x93, 0x45,
	0x48, 0x30, 0x27, 0xa3, 0x77, 0x00, 0x5c, 0x6b, 0x46, 0xdc, 0x9b, 0x7b, 0xb2, 0xa0, 0xad, 0xca,
	0x7e, 0xe9, 0xa0, 0x8e, 0xeb, 0x1c, 0xf9, 0x92, 0x2c, 0xa8, 0xf1, 0x93, 0x02, 0xe5, 0x84, 0x8d,
	0x9a, 0xa0, 0x4d, 0x2f, 0xc6, 0x57, 0xfd, 0xde, 0xf0, 0x8b, 0x61, 0xff, 0x54, 0xdf, 0x48, 0x80,
	0xb3, 0xce, 0xf4, 0xac, 0x7f, 0x33, 0xbc, 0x98, 0xbc, 0x3c, 0xd1, 0x15, 0xa4, 0xc3, 0x96, 0x00,
	0x4e, 0x2f, 0xa7, 0xdd, 0xf3, 0xbe, 0xae, 0xa2, 0xff, 0x41, 0x53, 0x20, 0x83, 0xe1, 0x78, 0x72,
	0x79, 0x86, 0x3b, 0x23, 0xbd, 0x84, 0x76, 0x60, 0xbb, 0x77, 0x39, 0xbd, 0x98, 0xf4, 0xb1, 0x8c,
	0x2c, 0x23, 0x04, 0x8d, 0x14, 0x92, 0xb1, 0x15, 0xd4, 0x82, 0xdd, 0xde, 0x74, 0x34, 0x3d, 0xef,
	0x4c, 0x86, 0xd7, 0x45, 0x81, 0x2a, 0xd2, 0x60, 0x73, 0x3c, 0x1d, 0x8d, 0x3a, 0xf8, 0x2b, 0x7d,
	0xd3, 0xf0, 0x01, 0xf2, 0xe6, 0xa0, 0x8f, 0x60, 0x4b, 0x14, 0xf3, 0xc6, 0x72, 0x63, 0x42, 0x5b,
	0xca, 0x6a, 0x23, 0xcf, 0x13, 0xef, 0x75, 0xe2, 0xc4, 0x9a, 0x9b, 0x9d, 0x29, 0xfa, 0x00, 0xaa,
	0x61, 0xe0, 0xf8, 0x2c, 0xed, 0x7d, 0x33, 0x0f, 0xb9, 0x4a, 0x70, 0x2c, 0xdd, 0xc6, 0xe7, 0x00,
	0xb9, 0x06, 0xda, 0x85, 0x0a, 0xff, 0x92, 0x6c, 0x9e, 0x30, 0xd0, 0x53, 0xa8, 0xcf, 0x2d, 0x2a,
	0x72, 0xe0, 0xbd, 0xab, 0xe1, 0xda, 0xdc, 0xa2, 0x3c, 0xc4, 0xf8, 0x5d, 0x85, 0x0a, 0x97, 0x44,
	0x3d, 0x68, 0x52, 0x66, 0x45, 0xec, 0x26, 0xdb, 0xb7, 0x6c, 0x74, 0xc5, 0xc2, 0x99, 0xe9, 0xc2,
	0xf1, 0xf9, 0xe3, 0x0c, 0xdc, 0xe0, 0x21, 0x99, 0x8d, 0x5e, 0x41, 0x3d, 0x0f, 0x57, 0xd7, 0x86,
	0xe7, 0x64, 0xf4, 0x2e, 0x68, 0x8e, 0xcf, 0x5e, 0x9e, 0xc8, 0x3c, 0x93, 0x41, 0x2a, 0x0d, 0x36,
	0x30, 0x70, 0x50, 0x94, 0xf7, 0x1e, 0x6c, 0xdd, 0x06, 0xf1, 0xcc, 0x25, 0x92, 0x93, 0x0c, 0x96,
	0x32, 0xd8, 0xc0, 0x9a, 0x40, 0x05, 0xa9, 0x07, 0xcd, 0xb9, 0x43, 0x59, 0x70, 0x17, 0x59, 0x9e,
	0xe4, 0x55, 0x78, 0x1e, 0xad, 0xfc, 0x0e, 0x07, 0x29, 0x81, 0x87, 0x0c, 0x36, 0x70, 0x63, 0xbe,
	0x84, 0xa0, 0x4f, 0x61, 0x9b, 0xc6, 0x9e, 0x67, 0x45, 0x0b, 0x29, 0x51, 0xe5, 0x12, 0x4f, 0x72,
	0x89, 0xb1, 0x70, 0xa7, 0x02, 0x5b, 0xb4, 0x60, 0x77, 0x37, 0x65, 0x1f, 0x8c, 0x9f, 0x2b, 0xd0,
	0x58, 0xfe, 0x58, 0xd2, 0x23, 0x3b, 0x88, 0x7d, 0xc6, 0x2f, 0xb7, 0x84, 0x85, 0x81, 0x74, 0x28,
	0xd1, 0xd8, 0xe3, 0x37, 0xa6, 0xe0, 0xe4, 0x88, 0x46, 0xd0, 0x98, 0xc5, 0xf6, 0x3d, 0x61, 0x37,
	0x01, 0x5f, 0x31, 0x2a, 0x57, 0xfa, 0xfd, 0xc7, 0xca, 0x30, 0xbb, 0x9c, 0x7e, 0x29, 0xd8, 0x78,
	0x7b, 0x56, 0x34, 0xd1, 0x6b, 0xd8, 0x14, 0x00, 0x6d, 0x95, 0xf9, 0x48, 0xed, 0xad, 0xd1, 0xc1,
	0x29, 0xbf, 0xfd, 0x83, 0x02, 0xdb, 0x4b, 0xda, 0x68, 0x04, 0x35, 0xf2, 0x7d, 0xe8, 0x3a, 0xb6,
	0xc3, 0xe4, 0x8c, 0x1c, 0xbe, 0x5d, 0x56, 0x66, 0x5f, 0x86, 0x0d, 0x36, 0x70, 0x26, 0xd1, 0x36,
	0xa0, 0x96, 0xe2, 0xe8, 0x09, 0x54, 0x67, 0x41, 0xec, 0xdf, 0x8a, 0x65, 0x51, 0xb0, 0xb4, 0xba,
	0x55, 0xf1, 0x98, 0xb4, 0xff, 0x50, 0xa1, 0x2a, 0x24, 0x1f, 0xb9, 0xc9, 0xd3, 0x24, 0x37, 0xe2,
	0x85, 0xae, 0x15, 0xc9, 0x01, 0x3c, 0x58, 0x93, 0x9b, 0xd9, 0x97, 0x7c, 0x9c, 0x45, 0xb6, 0xff,
	0x52, 0x92, 0x9c, 0x84, 0xb1, 0xbc, 0x56, 0x4a, 0xba, 0x56, 0xff, 0x7e, 0xd4, 0xbf, 0x06, 0xcd,
	0x62, 0xcc, 0xb2, 0xe7, 0x1e, 0x49, 0x56, 0xbc, 0xc4, 0xfb, 0xf1, 0xfa, 0x6d, 0xb3, 0x34, 0x3b,
	0x79, 0x6c, 0xdf, 0x67, 0xd1, 0x02, 0x17, 0xd5, 0xda, 0x9f, 0x81, 0xbe, 0x4a, 0x48, 0xa6, 0xeb,
	0x9e, 0x2c, 0xe4, 0xab, 0x90, 0x1c, 0xf3, 0x92, 0xd4, 0xc2, 0x4b, 0xf1, 0xb1, 0xfa, 0x4a, 0x31,
	0x7e, 0x2d, 0xc1, 0x56, 0x71, 0xb8, 0xd1, 0x51, 0xf1, 0x9a, 0xb5, 0xe3, 0xa7, 0x0f, 0x6a, 0x1c,
	0x66, 0x1b, 0x9a, 0xf6, 0xc0, 0xcc, 0xa7, 0x59, 0x3b, 0x7e, 0xf6, 0x20, 0xe0, 0x34, 0x5f, 0x57,
	0x31, 0xeb, 0x9f, 0x40, 0x8d, 0xfa, 0x56, 0x48, 0xe7, 0x01, 0x93, 0x53, 0xbe, 0xf7, 0xcf, 0x9b,
	0x66, 0x8e, 0x25, 0x0d, 0x67, 0x01, 0xed, 0x1f, 0x55, 0xa8, 0xa5, 0xf0, 0x7f, 0x91, 0xec, 0x37,
	0xb0, 0x13, 0x92, 0xc8, 0x26, 0x3e, 0x73, 0xd2, 0x97, 0x28, 0xed, 0xe1, 0xd1, 0x9a, 0xac, 0x4d,
	0x6e, 0x76, 0xd8, 0x55, 0x16, 0x8f, 0xf5, 0x5c, 0x4b, 0xbc, 0xfd, 0xed, 0x21, 0xec, 0x3c, 0xa0,
	0xa1, 0xe7, 0x00, 0x39, 0x51, 0xce, 0x61, 0x01, 0x59, 0xee, 0x67, 0x3a, 0xa2, 0xdd, 0x01, 0x3c,
	0x73, 0x02, 0x33, 0x08, 0x89, 0x6f, 0x13, 0x9f, 0xc6, 0xf2, 0x07, 0xc9, 0x64, 0x91, 0x65, 0x13,
	0xf3, 0xcd, 0x51, 0x17, 0x26, 0xc9, 0xe9, 0x2a, 0x01, 0xaf, 0x94, 0x3f, 0xd5, 0xff, 0x5f, 0x86,
	0xc4, 0xef, 0x09, 0x26, 0x07, 0x4d, 0xee, 0x37, 0xaf, 0x8f, 0x66, 0x55, 0x1e, 0xf9, 0xe2, 0xef,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xdc, 0x79, 0xe8, 0x29, 0xd0, 0x09, 0x00, 0x00,
}
