// Code generated by protoc-gen-go. DO NOT EDIT.
// source: telemetry_data.proto

package baseline

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ValueType is the enumeration of possible types that value can have.
type AttributeKeyValue_ValueType int32

const (
	AttributeKeyValue_STRING AttributeKeyValue_ValueType = 0
	AttributeKeyValue_BOOL   AttributeKeyValue_ValueType = 1
	AttributeKeyValue_INT64  AttributeKeyValue_ValueType = 2
	AttributeKeyValue_DOUBLE AttributeKeyValue_ValueType = 3
)

var AttributeKeyValue_ValueType_name = map[int32]string{
	0: "STRING",
	1: "BOOL",
	2: "INT64",
	3: "DOUBLE",
}

var AttributeKeyValue_ValueType_value = map[string]int32{
	"STRING": 0,
	"BOOL":   1,
	"INT64":  2,
	"DOUBLE": 3,
}

func (x AttributeKeyValue_ValueType) String() string {
	return proto.EnumName(AttributeKeyValue_ValueType_name, int32(x))
}

func (AttributeKeyValue_ValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{2, 0}
}

// SpanKind is the type of span. Can be used to specify additional relationships between spans
// in addition to a parent/child relationship.
type Span_SpanKind int32

const (
	// Unspecified. Do NOT use as default.
	// Implementations MAY assume SpanKind to be INTERNAL when receiving UNSPECIFIED.
	Span_SPAN_KIND_UNSPECIFIED Span_SpanKind = 0
	// Indicates that the span represents an internal operation within an application,
	// as opposed to an operations happening at the boundaries. Default value.
	Span_INTERNAL Span_SpanKind = 1
	// Indicates that the span covers server-side handling of an RPC or other
	// remote network request.
	Span_SERVER Span_SpanKind = 2
	// Indicates that the span describes a request to some remote service.
	Span_CLIENT Span_SpanKind = 3
	// Indicates that the span describes a producer sending a message to a broker.
	// Unlike CLIENT and SERVER, there is often no direct critical path latency relationship
	// between producer and consumer spans. A PRODUCER span ends when the message was accepted
	// by the broker while the logical processing of the message might span a much longer time.
	Span_PRODUCER Span_SpanKind = 4
	// Indicates that the span describes consumer receiving a message from a broker.
	// Like the PRODUCER kind, there is often no direct critical path latency relationship
	// between producer and consumer spans.
	Span_CONSUMER Span_SpanKind = 5
)

var Span_SpanKind_name = map[int32]string{
	0: "SPAN_KIND_UNSPECIFIED",
	1: "INTERNAL",
	2: "SERVER",
	3: "CLIENT",
	4: "PRODUCER",
	5: "CONSUMER",
}

var Span_SpanKind_value = map[string]int32{
	"SPAN_KIND_UNSPECIFIED": 0,
	"INTERNAL":              1,
	"SERVER":                2,
	"CLIENT":                3,
	"PRODUCER":              4,
	"CONSUMER":              5,
}

func (x Span_SpanKind) String() string {
	return proto.EnumName(Span_SpanKind_name, int32(x))
}

func (Span_SpanKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{3, 0}
}

// A collection of spans from a Resource.
type ResourceSpans struct {
	Resource             *Resource `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	Spans                []*Span   `protobuf:"bytes,2,rep,name=spans,proto3" json:"spans,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ResourceSpans) Reset()         { *m = ResourceSpans{} }
func (m *ResourceSpans) String() string { return proto.CompactTextString(m) }
func (*ResourceSpans) ProtoMessage()    {}
func (*ResourceSpans) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{0}
}

func (m *ResourceSpans) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceSpans.Unmarshal(m, b)
}
func (m *ResourceSpans) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceSpans.Marshal(b, m, deterministic)
}
func (m *ResourceSpans) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceSpans.Merge(m, src)
}
func (m *ResourceSpans) XXX_Size() int {
	return xxx_messageInfo_ResourceSpans.Size(m)
}
func (m *ResourceSpans) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceSpans.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceSpans proto.InternalMessageInfo

func (m *ResourceSpans) GetResource() *Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *ResourceSpans) GetSpans() []*Span {
	if m != nil {
		return m.Spans
	}
	return nil
}

// Resource information. This describes the source of telemetry data.
type Resource struct {
	// labels is a collection of attributes that describe the resource. See OpenTelemetry
	// specification semantic conventions for standardized label names:
	// https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md
	Labels []*AttributeKeyValue `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	// dropped_labels_count is the number of dropped labels. If the value is 0, then
	// no labels were dropped.
	DroppedLabelsCount   int32    `protobuf:"varint,2,opt,name=dropped_labels_count,json=droppedLabelsCount,proto3" json:"dropped_labels_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Resource) Reset()         { *m = Resource{} }
func (m *Resource) String() string { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()    {}
func (*Resource) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{1}
}

func (m *Resource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resource.Unmarshal(m, b)
}
func (m *Resource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resource.Marshal(b, m, deterministic)
}
func (m *Resource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resource.Merge(m, src)
}
func (m *Resource) XXX_Size() int {
	return xxx_messageInfo_Resource.Size(m)
}
func (m *Resource) XXX_DiscardUnknown() {
	xxx_messageInfo_Resource.DiscardUnknown(m)
}

var xxx_messageInfo_Resource proto.InternalMessageInfo

func (m *Resource) GetLabels() []*AttributeKeyValue {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Resource) GetDroppedLabelsCount() int32 {
	if m != nil {
		return m.DroppedLabelsCount
	}
	return 0
}

// AttributeKeyValue is a key-value pair that is used to store Span attributes, Resource
// labels, etc.
type AttributeKeyValue struct {
	// key part of the key-value pair.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// type of the value.
	Type AttributeKeyValue_ValueType `protobuf:"varint,2,opt,name=type,proto3,enum=baseline.AttributeKeyValue_ValueType" json:"type,omitempty"`
	// A string up to 256 bytes long.
	StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	// A 64-bit signed integer.
	Int64Value int64 `protobuf:"varint,4,opt,name=int64_value,json=int64Value,proto3" json:"int64_value,omitempty"`
	// A Boolean value represented by `true` or `false`.
	BoolValue bool `protobuf:"varint,5,opt,name=bool_value,json=boolValue,proto3" json:"bool_value,omitempty"`
	// A double value.
	DoubleValue          float64  `protobuf:"fixed64,6,opt,name=double_value,json=doubleValue,proto3" json:"double_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AttributeKeyValue) Reset()         { *m = AttributeKeyValue{} }
func (m *AttributeKeyValue) String() string { return proto.CompactTextString(m) }
func (*AttributeKeyValue) ProtoMessage()    {}
func (*AttributeKeyValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{2}
}

func (m *AttributeKeyValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttributeKeyValue.Unmarshal(m, b)
}
func (m *AttributeKeyValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttributeKeyValue.Marshal(b, m, deterministic)
}
func (m *AttributeKeyValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttributeKeyValue.Merge(m, src)
}
func (m *AttributeKeyValue) XXX_Size() int {
	return xxx_messageInfo_AttributeKeyValue.Size(m)
}
func (m *AttributeKeyValue) XXX_DiscardUnknown() {
	xxx_messageInfo_AttributeKeyValue.DiscardUnknown(m)
}

var xxx_messageInfo_AttributeKeyValue proto.InternalMessageInfo

func (m *AttributeKeyValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *AttributeKeyValue) GetType() AttributeKeyValue_ValueType {
	if m != nil {
		return m.Type
	}
	return AttributeKeyValue_STRING
}

func (m *AttributeKeyValue) GetStringValue() string {
	if m != nil {
		return m.StringValue
	}
	return ""
}

func (m *AttributeKeyValue) GetInt64Value() int64 {
	if m != nil {
		return m.Int64Value
	}
	return 0
}

func (m *AttributeKeyValue) GetBoolValue() bool {
	if m != nil {
		return m.BoolValue
	}
	return false
}

func (m *AttributeKeyValue) GetDoubleValue() float64 {
	if m != nil {
		return m.DoubleValue
	}
	return 0
}

// Span represents a single operation within a trace. Spans can be
// nested to form a trace tree. Spans may also be linked to other spans
// from the same or different trace and form graphs. Often, a trace
// contains a root span that describes the end-to-end latency, and one
// or more subspans for its sub-operations. A trace can also contain
// multiple root spans, or none at all. Spans do not need to be
// contiguous - there may be gaps or overlaps between spans in a trace.
//
// The next field id is 18.
type Span struct {
	// trace_id is the unique identifier of a trace. All spans from the same trace share
	// the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes
	// is considered invalid.
	//
	// This field is semantically required. If empty or invalid trace_id was received:
	// - The receiver MAY reject the invalid data and respond with the appropriate error
	//   code to the sender.
	// - The receiver MAY accept the invalid data and attempt to correct it.
	TraceId []byte `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// span_id is a unique identifier for a span within a trace, assigned when the span
	// is created. The ID is an 8-byte array. An ID with all zeroes is considered
	// invalid.
	//
	// This field is semantically required. If empty or invalid span_id was received:
	// - The receiver MAY reject the invalid data and respond with the appropriate error
	//   code to the sender.
	// - The receiver MAY accept the invalid data and attempt to correct it.
	SpanId []byte `protobuf:"bytes,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	// tracestate conveys information about request position in multiple distributed tracing graphs.
	// It is a collection of TracestateEntry with a maximum of 32 members in the collection.
	//
	// See the https://github.com/w3c/distributed-tracing for more details about this field.
	Tracestate []*Span_TraceStateEntry `protobuf:"bytes,3,rep,name=tracestate,proto3" json:"tracestate,omitempty"`
	// parent_span_id is the `span_id` of this span's parent span. If this is a root span, then this
	// field must be omitted. The ID is an 8-byte array.
	ParentSpanId []byte `protobuf:"bytes,4,opt,name=parent_span_id,json=parentSpanId,proto3" json:"parent_span_id,omitempty"`
	// resource that is associated with this span. Optional. If not set, this span
	// should be part of a ResourceSpans message that does include the resource information,
	// unless resource information is unknown.
	Resource *Resource `protobuf:"bytes,5,opt,name=resource,proto3" json:"resource,omitempty"`
	// name describes the span's operation.
	//
	// For example, the name can be a qualified method name or a file name
	// and a line number where the operation is called. A best practice is to use
	// the same display name at the same call point in an application.
	// This makes it easier to correlate spans in different traces.
	//
	// This field is semantically required to be set to non-empty string.
	//
	// This field is required.
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// kind field distinguishes between spans generated in a particular context. For example,
	// two spans with the same name may be distinguished using `CLIENT` (caller)
	// and `SERVER` (callee) to identify network latency associated with the span.
	Kind Span_SpanKind `protobuf:"varint,7,opt,name=kind,proto3,enum=baseline.Span_SpanKind" json:"kind,omitempty"`
	// start_time_unixnano is the start time of the span. On the client side, this is the time
	// kept by the local machine where the span execution starts. On the server side, this
	// is the time when the server's application handler starts running.
	//
	// This field is semantically required. When not set on receive -
	// receiver should set it to the value of end_time field if it was
	// set. Or to the current time if neither was set. It is important to
	// keep end_time > start_time for consistency.
	//
	// This field is required.
	StartTimeUnixnano int64 `protobuf:"varint,8,opt,name=start_time_unixnano,json=startTimeUnixnano,proto3" json:"start_time_unixnano,omitempty"`
	// end_time_unixnano is the end time of the span. On the client side, this is the time
	// kept by the local machine where the span execution ends. On the server side, this
	// is the time when the server application handler stops running.
	//
	// This field is semantically required. When not set on receive -
	// receiver should set it to start_time value. It is important to
	// keep end_time > start_time for consistency.
	//
	// This field is required.
	EndTimeUnixnano int64 `protobuf:"varint,9,opt,name=end_time_unixnano,json=endTimeUnixnano,proto3" json:"end_time_unixnano,omitempty"`
	// attributes is a collection of attribute key/value pairs. The value can be a string,
	// an integer, a double or the Boolean values `true` or `false`. Note, global attributes
	// like server name can be set as tags using resource API. Examples of attributes:
	//
	//     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
	//     "/http/server_latency": 300
	//     "abc.com/myattribute": true
	//     "abc.com/score": 10.239
	Attributes []*AttributeKeyValue `protobuf:"bytes,10,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// dropped_attributes_count is the number of attributes that were discarded. Attributes
	// can be discarded because their keys are too long or because there are too many
	// attributes. If this value is 0, then no attributes were dropped.
	DroppedAttributesCount int32 `protobuf:"varint,11,opt,name=dropped_attributes_count,json=droppedAttributesCount,proto3" json:"dropped_attributes_count,omitempty"`
	// timed_events is a collection of TimedEvent items.
	TimedEvents []*Span_TimedEvent `protobuf:"bytes,12,rep,name=timed_events,json=timedEvents,proto3" json:"timed_events,omitempty"`
	// dropped_timed_events_count is the number of dropped timed events. If the value is 0,
	// then no events were dropped.
	DroppedTimedEventsCount int32 `protobuf:"varint,13,opt,name=dropped_timed_events_count,json=droppedTimedEventsCount,proto3" json:"dropped_timed_events_count,omitempty"`
	// links is a collection of Links, which are references from this span to a span
	// in the same or different trace.
	Links []*Span_Link `protobuf:"bytes,14,rep,name=links,proto3" json:"links,omitempty"`
	// dropped_links_count is the number of dropped links after the maximum size was
	// enforced. If this value is 0, then no links were dropped.
	DroppedLinksCount int32 `protobuf:"varint,15,opt,name=dropped_links_count,json=droppedLinksCount,proto3" json:"dropped_links_count,omitempty"`
	// status is an optional final status for this span. Semantically when status
	// wasn't set it is means span ended without errors and assume Status.Ok (code = 0).
	Status *Status `protobuf:"bytes,16,opt,name=status,proto3" json:"status,omitempty"`
	// child_span_count is an optional number of child spans that were generated while this
	// span was active. If set, allows an implementation to detect missing child spans.
	ChildSpanCount       int32    `protobuf:"varint,17,opt,name=child_span_count,json=childSpanCount,proto3" json:"child_span_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Span) Reset()         { *m = Span{} }
func (m *Span) String() string { return proto.CompactTextString(m) }
func (*Span) ProtoMessage()    {}
func (*Span) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{3}
}

func (m *Span) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Span.Unmarshal(m, b)
}
func (m *Span) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Span.Marshal(b, m, deterministic)
}
func (m *Span) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Span.Merge(m, src)
}
func (m *Span) XXX_Size() int {
	return xxx_messageInfo_Span.Size(m)
}
func (m *Span) XXX_DiscardUnknown() {
	xxx_messageInfo_Span.DiscardUnknown(m)
}

var xxx_messageInfo_Span proto.InternalMessageInfo

func (m *Span) GetTraceId() []byte {
	if m != nil {
		return m.TraceId
	}
	return nil
}

func (m *Span) GetSpanId() []byte {
	if m != nil {
		return m.SpanId
	}
	return nil
}

func (m *Span) GetTracestate() []*Span_TraceStateEntry {
	if m != nil {
		return m.Tracestate
	}
	return nil
}

func (m *Span) GetParentSpanId() []byte {
	if m != nil {
		return m.ParentSpanId
	}
	return nil
}

func (m *Span) GetResource() *Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *Span) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Span) GetKind() Span_SpanKind {
	if m != nil {
		return m.Kind
	}
	return Span_SPAN_KIND_UNSPECIFIED
}

func (m *Span) GetStartTimeUnixnano() int64 {
	if m != nil {
		return m.StartTimeUnixnano
	}
	return 0
}

func (m *Span) GetEndTimeUnixnano() int64 {
	if m != nil {
		return m.EndTimeUnixnano
	}
	return 0
}

func (m *Span) GetAttributes() []*AttributeKeyValue {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Span) GetDroppedAttributesCount() int32 {
	if m != nil {
		return m.DroppedAttributesCount
	}
	return 0
}

func (m *Span) GetTimedEvents() []*Span_TimedEvent {
	if m != nil {
		return m.TimedEvents
	}
	return nil
}

func (m *Span) GetDroppedTimedEventsCount() int32 {
	if m != nil {
		return m.DroppedTimedEventsCount
	}
	return 0
}

func (m *Span) GetLinks() []*Span_Link {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *Span) GetDroppedLinksCount() int32 {
	if m != nil {
		return m.DroppedLinksCount
	}
	return 0
}

func (m *Span) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Span) GetChildSpanCount() int32 {
	if m != nil {
		return m.ChildSpanCount
	}
	return 0
}

// TraceStateEntry is the entry that is repeated in tracestate field (see below).
type Span_TraceStateEntry struct {
	// key must begin with a lowercase letter, and can only contain
	// lowercase letters 'a'-'z', digits '0'-'9', underscores '_', dashes
	// '-', asterisks '*', and forward slashes '/'.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// value is opaque string up to 256 characters printable ASCII
	// RFC0020 characters (i.e., the range 0x20 to 0x7E) except ',' and '='.
	// Note that this also excludes tabs, newlines, carriage returns, etc.
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Span_TraceStateEntry) Reset()         { *m = Span_TraceStateEntry{} }
func (m *Span_TraceStateEntry) String() string { return proto.CompactTextString(m) }
func (*Span_TraceStateEntry) ProtoMessage()    {}
func (*Span_TraceStateEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{3, 0}
}

func (m *Span_TraceStateEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Span_TraceStateEntry.Unmarshal(m, b)
}
func (m *Span_TraceStateEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Span_TraceStateEntry.Marshal(b, m, deterministic)
}
func (m *Span_TraceStateEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Span_TraceStateEntry.Merge(m, src)
}
func (m *Span_TraceStateEntry) XXX_Size() int {
	return xxx_messageInfo_Span_TraceStateEntry.Size(m)
}
func (m *Span_TraceStateEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_Span_TraceStateEntry.DiscardUnknown(m)
}

var xxx_messageInfo_Span_TraceStateEntry proto.InternalMessageInfo

func (m *Span_TraceStateEntry) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Span_TraceStateEntry) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// TimedEvent is a time-stamped annotation of the span, consisting of either
// user-supplied key-value pairs, or details of a message sent/received between Spans.
type Span_TimedEvent struct {
	// time_unixnano is the time the event occurred.
	TimeUnixnano int64 `protobuf:"varint,1,opt,name=time_unixnano,json=timeUnixnano,proto3" json:"time_unixnano,omitempty"`
	// name is a user-supplied description of the event.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// attributes is a collection of attribute key/value pairs on the event.
	Attributes []*AttributeKeyValue `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// dropped_attributes_count is the number of dropped attributes. If the value is 0,
	// then no attributes were dropped.
	DroppedAttributesCount int32    `protobuf:"varint,4,opt,name=dropped_attributes_count,json=droppedAttributesCount,proto3" json:"dropped_attributes_count,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *Span_TimedEvent) Reset()         { *m = Span_TimedEvent{} }
func (m *Span_TimedEvent) String() string { return proto.CompactTextString(m) }
func (*Span_TimedEvent) ProtoMessage()    {}
func (*Span_TimedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{3, 1}
}

func (m *Span_TimedEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Span_TimedEvent.Unmarshal(m, b)
}
func (m *Span_TimedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Span_TimedEvent.Marshal(b, m, deterministic)
}
func (m *Span_TimedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Span_TimedEvent.Merge(m, src)
}
func (m *Span_TimedEvent) XXX_Size() int {
	return xxx_messageInfo_Span_TimedEvent.Size(m)
}
func (m *Span_TimedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_Span_TimedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_Span_TimedEvent proto.InternalMessageInfo

func (m *Span_TimedEvent) GetTimeUnixnano() int64 {
	if m != nil {
		return m.TimeUnixnano
	}
	return 0
}

func (m *Span_TimedEvent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Span_TimedEvent) GetAttributes() []*AttributeKeyValue {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Span_TimedEvent) GetDroppedAttributesCount() int32 {
	if m != nil {
		return m.DroppedAttributesCount
	}
	return 0
}

// Link is a pointer from the current span to another span in the same trace or in a
// different trace. For example, this can be used in batching operations,
// where a single batch handler processes multiple requests from different
// traces or when the handler receives a request from a different project.
type Span_Link struct {
	// trace_id is a unique identifier of a trace that this linked span is part of.
	// The ID is a 16-byte array.
	TraceId []byte `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// span_id is a unique identifier for the linked span. The ID is an 8-byte array.
	SpanId []byte `protobuf:"bytes,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	// tracestate is the trace state associated with the link.
	Tracestate []*Span_TraceStateEntry `protobuf:"bytes,3,rep,name=tracestate,proto3" json:"tracestate,omitempty"`
	// attributes is a collection of attribute key/value pairs on the link.
	Attributes []*AttributeKeyValue `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// dropped_attributes_count is the number of dropped attributes. If the value is 0,
	// then no attributes were dropped.
	DroppedAttributesCount int32    `protobuf:"varint,5,opt,name=dropped_attributes_count,json=droppedAttributesCount,proto3" json:"dropped_attributes_count,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *Span_Link) Reset()         { *m = Span_Link{} }
func (m *Span_Link) String() string { return proto.CompactTextString(m) }
func (*Span_Link) ProtoMessage()    {}
func (*Span_Link) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{3, 2}
}

func (m *Span_Link) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Span_Link.Unmarshal(m, b)
}
func (m *Span_Link) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Span_Link.Marshal(b, m, deterministic)
}
func (m *Span_Link) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Span_Link.Merge(m, src)
}
func (m *Span_Link) XXX_Size() int {
	return xxx_messageInfo_Span_Link.Size(m)
}
func (m *Span_Link) XXX_DiscardUnknown() {
	xxx_messageInfo_Span_Link.DiscardUnknown(m)
}

var xxx_messageInfo_Span_Link proto.InternalMessageInfo

func (m *Span_Link) GetTraceId() []byte {
	if m != nil {
		return m.TraceId
	}
	return nil
}

func (m *Span_Link) GetSpanId() []byte {
	if m != nil {
		return m.SpanId
	}
	return nil
}

func (m *Span_Link) GetTracestate() []*Span_TraceStateEntry {
	if m != nil {
		return m.Tracestate
	}
	return nil
}

func (m *Span_Link) GetAttributes() []*AttributeKeyValue {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Span_Link) GetDroppedAttributesCount() int32 {
	if m != nil {
		return m.DroppedAttributesCount
	}
	return 0
}

// The Status type defines a logical error model that is suitable for different
// programming environments, including REST APIs and RPC APIs.
type Status struct {
	// The status code. This is optional field. It is safe to assume 0 (OK)
	// when not set.
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// A developer-facing error message, which should be in English.
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{4}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Status) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterEnum("baseline.AttributeKeyValue_ValueType", AttributeKeyValue_ValueType_name, AttributeKeyValue_ValueType_value)
	proto.RegisterEnum("baseline.Span_SpanKind", Span_SpanKind_name, Span_SpanKind_value)
	proto.RegisterType((*ResourceSpans)(nil), "baseline.ResourceSpans")
	proto.RegisterType((*Resource)(nil), "baseline.Resource")
	proto.RegisterType((*AttributeKeyValue)(nil), "baseline.AttributeKeyValue")
	proto.RegisterType((*Span)(nil), "baseline.Span")
	proto.RegisterType((*Span_TraceStateEntry)(nil), "baseline.Span.TraceStateEntry")
	proto.RegisterType((*Span_TimedEvent)(nil), "baseline.Span.TimedEvent")
	proto.RegisterType((*Span_Link)(nil), "baseline.Span.Link")
	proto.RegisterType((*Status)(nil), "baseline.Status")
}

func init() { proto.RegisterFile("telemetry_data.proto", fileDescriptor_9161fdd1e0292445) }

var fileDescriptor_9161fdd1e0292445 = []byte{
	// 903 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x5e, 0x27, 0x76, 0x9a, 0x9c, 0xa4, 0xa9, 0x33, 0x5b, 0xa8, 0x5b, 0xfe, 0xb2, 0x61, 0x91,
	0x02, 0x48, 0x16, 0xdb, 0x5d, 0x55, 0xbb, 0x5a, 0x84, 0xd4, 0xa6, 0x06, 0xa2, 0x06, 0x27, 0x9a,
	0x24, 0xbd, 0xb5, 0x9c, 0x78, 0x54, 0xac, 0x3a, 0x63, 0x63, 0x4f, 0x2a, 0xf2, 0x36, 0x3c, 0x08,
	0xaf, 0xc3, 0x0d, 0x77, 0xbc, 0x01, 0x9a, 0x33, 0x76, 0xfe, 0x40, 0x85, 0x8b, 0x95, 0xf6, 0xc6,
	0x9a, 0x39, 0xdf, 0x37, 0xdf, 0x99, 0x99, 0xf3, 0x9d, 0x31, 0x1c, 0x0b, 0x16, 0xb1, 0x05, 0x13,
	0xe9, 0xca, 0x0b, 0x7c, 0xe1, 0xdb, 0x49, 0x1a, 0x8b, 0x98, 0x54, 0x67, 0x7e, 0xc6, 0xa2, 0x90,
	0xb3, 0x0e, 0x83, 0x43, 0xca, 0xb2, 0x78, 0x99, 0xce, 0xd9, 0x38, 0xf1, 0x79, 0x46, 0x6c, 0xa8,
	0xa6, 0x79, 0xc0, 0xd2, 0xda, 0x5a, 0xb7, 0x7e, 0x4e, 0xec, 0x82, 0x6d, 0x17, 0x54, 0xba, 0xe6,
	0x90, 0xe7, 0x60, 0x64, 0x72, 0xa1, 0x55, 0x6a, 0x97, 0xbb, 0xf5, 0xf3, 0xe6, 0x86, 0x2c, 0xf5,
	0xa8, 0x02, 0x3b, 0xbf, 0x40, 0xb5, 0x58, 0x4b, 0x5e, 0x42, 0x25, 0xf2, 0x67, 0x2c, 0xca, 0x2c,
	0x0d, 0x97, 0x7c, 0xb4, 0x59, 0x72, 0x29, 0x44, 0x1a, 0xce, 0x96, 0x82, 0xdd, 0xb0, 0xd5, 0xad,
	0x1f, 0x2d, 0x19, 0xcd, 0xa9, 0xe4, 0x1b, 0x38, 0x0e, 0xd2, 0x38, 0x49, 0x58, 0xe0, 0xa9, 0x88,
	0x37, 0x8f, 0x97, 0x5c, 0x58, 0xa5, 0xb6, 0xd6, 0x35, 0x28, 0xc9, 0xb1, 0x01, 0x42, 0x3d, 0x89,
	0x74, 0x7e, 0x2b, 0x41, 0xeb, 0x1f, 0x7a, 0xc4, 0x84, 0xf2, 0x3d, 0x5b, 0xe1, 0xc9, 0x6a, 0x54,
	0x0e, 0xc9, 0x1b, 0xd0, 0xc5, 0x2a, 0x61, 0xa8, 0xd4, 0x3c, 0xff, 0xe2, 0x91, 0xcd, 0xd8, 0xf8,
	0x9d, 0xac, 0x12, 0x46, 0x71, 0x09, 0x79, 0x06, 0x8d, 0x4c, 0xa4, 0x21, 0xbf, 0xf3, 0x1e, 0x24,
	0x62, 0x95, 0x51, 0xb5, 0xae, 0x62, 0x2a, 0xdf, 0x67, 0x50, 0x0f, 0xb9, 0xb8, 0x78, 0x95, 0x33,
	0xf4, 0xb6, 0xd6, 0x2d, 0x53, 0xc0, 0x90, 0x22, 0x7c, 0x02, 0x30, 0x8b, 0xe3, 0x28, 0xc7, 0x8d,
	0xb6, 0xd6, 0xad, 0xd2, 0x9a, 0x8c, 0x28, 0xf8, 0x19, 0x34, 0x82, 0x78, 0x39, 0x8b, 0x58, 0x4e,
	0xa8, 0xb4, 0xb5, 0xae, 0x46, 0xeb, 0x2a, 0x86, 0x94, 0xce, 0x6b, 0xa8, 0xad, 0x37, 0x46, 0x00,
	0x2a, 0xe3, 0x09, 0xed, 0xbb, 0x3f, 0x98, 0x4f, 0x48, 0x15, 0xf4, 0xab, 0xe1, 0x70, 0x60, 0x6a,
	0xa4, 0x06, 0x46, 0xdf, 0x9d, 0x5c, 0xbc, 0x32, 0x4b, 0x92, 0x70, 0x3d, 0x9c, 0x5e, 0x0d, 0x1c,
	0xb3, 0xdc, 0xf9, 0x03, 0x40, 0x97, 0x55, 0x22, 0xa7, 0x50, 0x15, 0xa9, 0x3f, 0x67, 0x5e, 0x18,
	0xe0, 0xd5, 0x34, 0xe8, 0x01, 0xce, 0xfb, 0x01, 0x39, 0x81, 0x03, 0x59, 0x42, 0x89, 0x94, 0x10,
	0xa9, 0xc8, 0x69, 0x3f, 0x20, 0xdf, 0x01, 0x20, 0x27, 0x13, 0xbe, 0x90, 0x47, 0x97, 0xa5, 0xfc,
	0x74, 0xb7, 0xfa, 0xf6, 0x44, 0x12, 0xc6, 0x92, 0xe0, 0x70, 0x91, 0xae, 0xe8, 0xd6, 0x0a, 0xf2,
	0x1c, 0x9a, 0x89, 0x9f, 0x32, 0x2e, 0xbc, 0x42, 0x5f, 0x47, 0xfd, 0x86, 0x8a, 0x8e, 0x55, 0x96,
	0x6d, 0x3b, 0x1a, 0xff, 0xc3, 0x8e, 0x04, 0x74, 0xee, 0x2f, 0xd4, 0x3d, 0xd5, 0x28, 0x8e, 0xc9,
	0xd7, 0xa0, 0xdf, 0x87, 0x3c, 0xb0, 0x0e, 0xb0, 0xc2, 0x27, 0x7b, 0x7b, 0x94, 0x9f, 0x9b, 0x90,
	0x07, 0x14, 0x49, 0xc4, 0x86, 0xa7, 0x99, 0xf0, 0x53, 0xe1, 0x89, 0x70, 0xc1, 0xbc, 0x25, 0x0f,
	0x7f, 0xe5, 0x3e, 0x8f, 0xad, 0x2a, 0x16, 0xae, 0x85, 0xd0, 0x24, 0x5c, 0xb0, 0x69, 0x0e, 0x90,
	0xaf, 0xa0, 0xc5, 0x78, 0xb0, 0xc7, 0xae, 0x21, 0xfb, 0x88, 0xf1, 0x60, 0x87, 0xfb, 0x16, 0xc0,
	0x2f, 0x4c, 0x95, 0x59, 0xf0, 0xdf, 0xee, 0xdf, 0xa2, 0x93, 0xd7, 0x60, 0x15, 0x1d, 0xb0, 0x89,
	0xe6, 0x5d, 0x50, 0xc7, 0x2e, 0xf8, 0x30, 0xc7, 0xd7, 0x3a, 0xaa, 0x13, 0xc8, 0xb7, 0xd0, 0x90,
	0xdb, 0x0b, 0x3c, 0xf6, 0xc0, 0xb8, 0xc8, 0xac, 0x06, 0x26, 0x3e, 0xdd, 0xaf, 0x95, 0xa4, 0x38,
	0x92, 0x41, 0xeb, 0x62, 0x3d, 0xce, 0xc8, 0x5b, 0x38, 0x2b, 0xf2, 0x6e, 0xab, 0xe4, 0x99, 0x0f,
	0x31, 0xf3, 0x49, 0xce, 0xd8, 0x68, 0xe4, 0xa9, 0xbf, 0x04, 0x23, 0x0a, 0xf9, 0x7d, 0x66, 0x35,
	0x31, 0xe7, 0xd3, 0xbd, 0x9c, 0x83, 0x90, 0xdf, 0x53, 0xc5, 0x90, 0x17, 0xbf, 0xee, 0x70, 0x19,
	0xc8, 0x13, 0x1c, 0x61, 0x82, 0x56, 0xd1, 0xe0, 0x12, 0x51, 0xd2, 0x5d, 0xa8, 0x48, 0x23, 0x2d,
	0x33, 0xcb, 0x44, 0x5f, 0x98, 0x5b, 0xda, 0x18, 0xa7, 0x39, 0x4e, 0xba, 0x60, 0xce, 0x7f, 0x0e,
	0xa3, 0x40, 0x19, 0x4d, 0xc9, 0xb6, 0x50, 0xb6, 0x89, 0x71, 0xb9, 0x15, 0xd4, 0x3c, 0x7b, 0x03,
	0x47, 0x7b, 0x96, 0xfd, 0x97, 0x07, 0xe3, 0x18, 0x0c, 0xd5, 0x8b, 0x25, 0x8c, 0xa9, 0xc9, 0xd9,
	0xef, 0x1a, 0xc0, 0xe6, 0xf8, 0xe4, 0x73, 0x38, 0xdc, 0xb5, 0x84, 0x86, 0x96, 0xc0, 0x42, 0xac,
	0xfd, 0x50, 0x98, 0xb5, 0xb4, 0x65, 0xd6, 0x5d, 0x8f, 0x94, 0xdf, 0x9d, 0x47, 0xf4, 0xc7, 0x3c,
	0x72, 0xf6, 0x97, 0x06, 0xba, 0xbc, 0xdc, 0xf7, 0xf2, 0x14, 0xec, 0x9e, 0x59, 0x7f, 0x77, 0x67,
	0x36, 0x1e, 0x3b, 0x73, 0xe7, 0x0e, 0xaa, 0x45, 0xf3, 0x93, 0x53, 0xf8, 0x60, 0x3c, 0xba, 0x74,
	0xbd, 0x9b, 0xbe, 0x7b, 0xed, 0x4d, 0xdd, 0xf1, 0xc8, 0xe9, 0xf5, 0xbf, 0xef, 0x3b, 0xd7, 0xe6,
	0x13, 0xd2, 0x80, 0x6a, 0xdf, 0x9d, 0x38, 0xd4, 0xbd, 0x94, 0x4f, 0xa9, 0x7c, 0x60, 0x1d, 0x7a,
	0xeb, 0x50, 0xf5, 0x96, 0xf6, 0x06, 0x7d, 0xc7, 0x9d, 0x98, 0x65, 0xc9, 0x1a, 0xd1, 0xe1, 0xf5,
	0xb4, 0xe7, 0x50, 0x53, 0x97, 0xb3, 0xde, 0xd0, 0x1d, 0x4f, 0x7f, 0x72, 0xa8, 0x69, 0x74, 0x2e,
	0xa0, 0xa2, 0x2c, 0x29, 0x2b, 0x3e, 0x8f, 0x03, 0xf5, 0x67, 0x35, 0x28, 0x8e, 0x89, 0x05, 0x07,
	0x0b, 0x96, 0x65, 0xfe, 0x5d, 0x61, 0x84, 0x62, 0x7a, 0xf5, 0x23, 0x7c, 0x1c, 0xc6, 0x76, 0x9c,
	0x30, 0x3e, 0x67, 0x3c, 0x5b, 0x66, 0xea, 0xef, 0x6d, 0xe3, 0xcd, 0xd9, 0x0f, 0x2f, 0xae, 0x00,
	0x2f, 0x75, 0x24, 0x83, 0x23, 0xed, 0xcf, 0xd2, 0xe9, 0x30, 0x61, 0xbc, 0xa7, 0x98, 0x18, 0x54,
	0x97, 0x6e, 0xdf, 0xbe, 0x98, 0x55, 0x70, 0xe5, 0xcb, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x40,
	0x7d, 0x45, 0x6c, 0x0f, 0x08, 0x00, 0x00,
}
