// Code generated by protoc-gen-go. DO NOT EDIT.
// source: telemetry_data.proto

package otlp

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AttributeKeyValue_ValueType int32

const (
	AttributeKeyValue_STRING  AttributeKeyValue_ValueType = 0
	AttributeKeyValue_BOOL    AttributeKeyValue_ValueType = 1
	AttributeKeyValue_INT64   AttributeKeyValue_ValueType = 2
	AttributeKeyValue_FLOAT64 AttributeKeyValue_ValueType = 3
	AttributeKeyValue_BINARY  AttributeKeyValue_ValueType = 4
)

var AttributeKeyValue_ValueType_name = map[int32]string{
	0: "STRING",
	1: "BOOL",
	2: "INT64",
	3: "FLOAT64",
	4: "BINARY",
}

var AttributeKeyValue_ValueType_value = map[string]int32{
	"STRING":  0,
	"BOOL":    1,
	"INT64":   2,
	"FLOAT64": 3,
	"BINARY":  4,
}

func (x AttributeKeyValue_ValueType) String() string {
	return proto.EnumName(AttributeKeyValue_ValueType_name, int32(x))
}

func (AttributeKeyValue_ValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{3, 0}
}

// Type of span. Can be used to specify additional relationships between spans
// in addition to a parent/child relationship.
type Span_SpanKind int32

const (
	// Unspecified.
	Span_SPAN_KIND_UNSPECIFIED Span_SpanKind = 0
	// Indicates that the span covers server-side handling of an RPC or other
	// remote network request.
	Span_SERVER Span_SpanKind = 1
	// Indicates that the span covers the client-side wrapper around an RPC or
	// other remote request.
	Span_CLIENT Span_SpanKind = 2
)

var Span_SpanKind_name = map[int32]string{
	0: "SPAN_KIND_UNSPECIFIED",
	1: "SERVER",
	2: "CLIENT",
}

var Span_SpanKind_value = map[string]int32{
	"SPAN_KIND_UNSPECIFIED": 0,
	"SERVER":                1,
	"CLIENT":                2,
}

func (x Span_SpanKind) String() string {
	return proto.EnumName(Span_SpanKind_name, int32(x))
}

func (Span_SpanKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{5, 0}
}

// Indicates whether the message was sent or received.
type Span_TimeEvent_MessageEvent_Type int32

const (
	// Unknown event type.
	Span_TimeEvent_MessageEvent_TYPE_UNSPECIFIED Span_TimeEvent_MessageEvent_Type = 0
	// Indicates a sent message.
	Span_TimeEvent_MessageEvent_SENT Span_TimeEvent_MessageEvent_Type = 1
	// Indicates a received message.
	Span_TimeEvent_MessageEvent_RECEIVED Span_TimeEvent_MessageEvent_Type = 2
)

var Span_TimeEvent_MessageEvent_Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "SENT",
	2: "RECEIVED",
}

var Span_TimeEvent_MessageEvent_Type_value = map[string]int32{
	"TYPE_UNSPECIFIED": 0,
	"SENT":             1,
	"RECEIVED":         2,
}

func (x Span_TimeEvent_MessageEvent_Type) String() string {
	return proto.EnumName(Span_TimeEvent_MessageEvent_Type_name, int32(x))
}

func (Span_TimeEvent_MessageEvent_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{5, 1, 1, 0}
}

// The relationship of the current span relative to the linked span: child,
// parent, or unspecified.
type Span_Link_Type int32

const (
	// The relationship of the two spans is unknown, or known but other
	// than parent-child.
	Span_Link_TYPE_UNSPECIFIED Span_Link_Type = 0
	// The linked span is a child of the current span.
	Span_Link_CHILD_LINKED_SPAN Span_Link_Type = 1
	// The linked span is a parent of the current span.
	Span_Link_PARENT_LINKED_SPAN Span_Link_Type = 2
)

var Span_Link_Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "CHILD_LINKED_SPAN",
	2: "PARENT_LINKED_SPAN",
}

var Span_Link_Type_value = map[string]int32{
	"TYPE_UNSPECIFIED":   0,
	"CHILD_LINKED_SPAN":  1,
	"PARENT_LINKED_SPAN": 2,
}

func (x Span_Link_Type) String() string {
	return proto.EnumName(Span_Link_Type_name, int32(x))
}

func (Span_Link_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{5, 3, 0}
}

// The kind of metric. It describes how the data is reported.
//
// A gauge is an instantaneous measurement of a value.
//
// A cumulative measurement is a value accumulated over a time interval. In
// a time series, cumulative measurements should have the same start time,
// increasing values and increasing end times, until an event resets the
// cumulative value to zero and sets a new start time for the following
// points.
type MetricDescriptor_Type int32

const (
	// Do not use this default value.
	MetricDescriptor_UNSPECIFIED MetricDescriptor_Type = 0
	// Integer gauge. The value can go both up and down.
	MetricDescriptor_GAUGE_INT64 MetricDescriptor_Type = 1
	// Floating point gauge. The value can go both up and down.
	MetricDescriptor_GAUGE_DOUBLE MetricDescriptor_Type = 2
	// Distribution gauge measurement. The count and sum can go both up and
	// down. Recorded values are always >= 0.
	// Used in scenarios like a snapshot of time the current items in a queue
	// have spent there.
	MetricDescriptor_GAUGE_DISTRIBUTION MetricDescriptor_Type = 3
	// Integer cumulative measurement. The value cannot decrease, if resets
	// then the start_time should also be reset.
	MetricDescriptor_CUMULATIVE_INT64 MetricDescriptor_Type = 4
	// Floating point cumulative measurement. The value cannot decrease, if
	// resets then the start_time should also be reset. Recorded values are
	// always >= 0.
	MetricDescriptor_CUMULATIVE_DOUBLE MetricDescriptor_Type = 5
	// Distribution cumulative measurement. The count and sum cannot decrease,
	// if resets then the start_time should also be reset.
	MetricDescriptor_CUMULATIVE_DISTRIBUTION MetricDescriptor_Type = 6
	// Some frameworks implemented Histograms as a summary of observations
	// (usually things like request durations and response sizes). While it
	// also provides a total count of observations and a sum of all observed
	// values, it calculates configurable percentiles over a sliding time
	// window. This is not recommended, since it cannot be aggregated.
	MetricDescriptor_SUMMARY MetricDescriptor_Type = 7
)

var MetricDescriptor_Type_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "GAUGE_INT64",
	2: "GAUGE_DOUBLE",
	3: "GAUGE_DISTRIBUTION",
	4: "CUMULATIVE_INT64",
	5: "CUMULATIVE_DOUBLE",
	6: "CUMULATIVE_DISTRIBUTION",
	7: "SUMMARY",
}

var MetricDescriptor_Type_value = map[string]int32{
	"UNSPECIFIED":             0,
	"GAUGE_INT64":             1,
	"GAUGE_DOUBLE":            2,
	"GAUGE_DISTRIBUTION":      3,
	"CUMULATIVE_INT64":        4,
	"CUMULATIVE_DOUBLE":       5,
	"CUMULATIVE_DISTRIBUTION": 6,
	"SUMMARY":                 7,
}

func (x MetricDescriptor_Type) String() string {
	return proto.EnumName(MetricDescriptor_Type_name, int32(x))
}

func (MetricDescriptor_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{10, 0}
}

type Point_ValueType int32

const (
	Point_INT64        Point_ValueType = 0
	Point_DOUBLE       Point_ValueType = 1
	Point_DISTRIBUTION Point_ValueType = 2
	Point_SUMMARY      Point_ValueType = 3
)

var Point_ValueType_name = map[int32]string{
	0: "INT64",
	1: "DOUBLE",
	2: "DISTRIBUTION",
	3: "SUMMARY",
}

var Point_ValueType_value = map[string]int32{
	"INT64":        0,
	"DOUBLE":       1,
	"DISTRIBUTION": 2,
	"SUMMARY":      3,
}

func (x Point_ValueType) String() string {
	return proto.EnumName(Point_ValueType_name, int32(x))
}

func (Point_ValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{14, 0}
}

// A list of spans from a Resource.
type ResourceSpans struct {
	Resource             *Resource `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	Spans                []*Span   `protobuf:"bytes,2,rep,name=spans,proto3" json:"spans,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ResourceSpans) Reset()         { *m = ResourceSpans{} }
func (m *ResourceSpans) String() string { return proto.CompactTextString(m) }
func (*ResourceSpans) ProtoMessage()    {}
func (*ResourceSpans) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{0}
}

func (m *ResourceSpans) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceSpans.Unmarshal(m, b)
}
func (m *ResourceSpans) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceSpans.Marshal(b, m, deterministic)
}
func (m *ResourceSpans) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceSpans.Merge(m, src)
}
func (m *ResourceSpans) XXX_Size() int {
	return xxx_messageInfo_ResourceSpans.Size(m)
}
func (m *ResourceSpans) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceSpans.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceSpans proto.InternalMessageInfo

func (m *ResourceSpans) GetResource() *Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *ResourceSpans) GetSpans() []*Span {
	if m != nil {
		return m.Spans
	}
	return nil
}

// A list of metrics from a Resource.
type ResourceMetrics struct {
	Resource             *Resource `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	Metrics              []*Metric `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ResourceMetrics) Reset()         { *m = ResourceMetrics{} }
func (m *ResourceMetrics) String() string { return proto.CompactTextString(m) }
func (*ResourceMetrics) ProtoMessage()    {}
func (*ResourceMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{1}
}

func (m *ResourceMetrics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceMetrics.Unmarshal(m, b)
}
func (m *ResourceMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceMetrics.Marshal(b, m, deterministic)
}
func (m *ResourceMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceMetrics.Merge(m, src)
}
func (m *ResourceMetrics) XXX_Size() int {
	return xxx_messageInfo_ResourceMetrics.Size(m)
}
func (m *ResourceMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceMetrics proto.InternalMessageInfo

func (m *ResourceMetrics) GetResource() *Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *ResourceMetrics) GetMetrics() []*Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

// Resource information. This describes the source of telemetry data.
type Resource struct {
	// Identifier that uniquely identifies a process within a VM/container.
	Process *Process `protobuf:"bytes,1,opt,name=process,proto3" json:"process,omitempty"`
	// Name of the service.
	ServiceName string `protobuf:"bytes,3,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Set of labels that describe the resource.
	Attributes           []*AttributeKeyValue `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Resource) Reset()         { *m = Resource{} }
func (m *Resource) String() string { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()    {}
func (*Resource) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{2}
}

func (m *Resource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resource.Unmarshal(m, b)
}
func (m *Resource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resource.Marshal(b, m, deterministic)
}
func (m *Resource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resource.Merge(m, src)
}
func (m *Resource) XXX_Size() int {
	return xxx_messageInfo_Resource.Size(m)
}
func (m *Resource) XXX_DiscardUnknown() {
	xxx_messageInfo_Resource.DiscardUnknown(m)
}

var xxx_messageInfo_Resource proto.InternalMessageInfo

func (m *Resource) GetProcess() *Process {
	if m != nil {
		return m.Process
	}
	return nil
}

func (m *Resource) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *Resource) GetAttributes() []*AttributeKeyValue {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type AttributeKeyValue struct {
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The type of the value.
	Type AttributeKeyValue_ValueType `protobuf:"varint,2,opt,name=type,proto3,enum=otlp.AttributeKeyValue_ValueType" json:"type,omitempty"`
	// A string up to 256 bytes long.
	StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	// A 64-bit signed integer.
	IntValue int64 `protobuf:"varint,4,opt,name=int_value,json=intValue,proto3" json:"int_value,omitempty"`
	// A Boolean value represented by `true` or `false`.
	BoolValue bool `protobuf:"varint,5,opt,name=bool_value,json=boolValue,proto3" json:"bool_value,omitempty"`
	// A double value.
	DoubleValue float64 `protobuf:"fixed64,6,opt,name=double_value,json=doubleValue,proto3" json:"double_value,omitempty"`
	// A binary value of bytes.
	BunaryValue          []byte   `protobuf:"bytes,7,opt,name=bunary_value,json=bunaryValue,proto3" json:"bunary_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AttributeKeyValue) Reset()         { *m = AttributeKeyValue{} }
func (m *AttributeKeyValue) String() string { return proto.CompactTextString(m) }
func (*AttributeKeyValue) ProtoMessage()    {}
func (*AttributeKeyValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{3}
}

func (m *AttributeKeyValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttributeKeyValue.Unmarshal(m, b)
}
func (m *AttributeKeyValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttributeKeyValue.Marshal(b, m, deterministic)
}
func (m *AttributeKeyValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttributeKeyValue.Merge(m, src)
}
func (m *AttributeKeyValue) XXX_Size() int {
	return xxx_messageInfo_AttributeKeyValue.Size(m)
}
func (m *AttributeKeyValue) XXX_DiscardUnknown() {
	xxx_messageInfo_AttributeKeyValue.DiscardUnknown(m)
}

var xxx_messageInfo_AttributeKeyValue proto.InternalMessageInfo

func (m *AttributeKeyValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *AttributeKeyValue) GetType() AttributeKeyValue_ValueType {
	if m != nil {
		return m.Type
	}
	return AttributeKeyValue_STRING
}

func (m *AttributeKeyValue) GetStringValue() string {
	if m != nil {
		return m.StringValue
	}
	return ""
}

func (m *AttributeKeyValue) GetIntValue() int64 {
	if m != nil {
		return m.IntValue
	}
	return 0
}

func (m *AttributeKeyValue) GetBoolValue() bool {
	if m != nil {
		return m.BoolValue
	}
	return false
}

func (m *AttributeKeyValue) GetDoubleValue() float64 {
	if m != nil {
		return m.DoubleValue
	}
	return 0
}

func (m *AttributeKeyValue) GetBunaryValue() []byte {
	if m != nil {
		return m.BunaryValue
	}
	return nil
}

// Identifies a process within a VM/container.
type Process struct {
	// The host name. Usually refers to the machine/container name.
	// For example: os.Hostname() in Go, socket.gethostname() in Python.
	HostName string `protobuf:"bytes,1,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	// Process id.
	Pid uint32 `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	// Start time of this process. Represented in epoch time.
	StartTimeUnixnano    int64    `protobuf:"varint,3,opt,name=start_time_unixnano,json=startTimeUnixnano,proto3" json:"start_time_unixnano,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Process) Reset()         { *m = Process{} }
func (m *Process) String() string { return proto.CompactTextString(m) }
func (*Process) ProtoMessage()    {}
func (*Process) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{4}
}

func (m *Process) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Process.Unmarshal(m, b)
}
func (m *Process) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Process.Marshal(b, m, deterministic)
}
func (m *Process) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Process.Merge(m, src)
}
func (m *Process) XXX_Size() int {
	return xxx_messageInfo_Process.Size(m)
}
func (m *Process) XXX_DiscardUnknown() {
	xxx_messageInfo_Process.DiscardUnknown(m)
}

var xxx_messageInfo_Process proto.InternalMessageInfo

func (m *Process) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *Process) GetPid() uint32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *Process) GetStartTimeUnixnano() int64 {
	if m != nil {
		return m.StartTimeUnixnano
	}
	return 0
}

// A span represents a single operation within a trace. Spans can be
// nested to form a trace tree. Spans may also be linked to other spans
// from the same or different trace. And form graphs. Often, a trace
// contains a root span that describes the end-to-end latency, and one
// or more subspans for its sub-operations. A trace can also contain
// multiple root spans, or none at all. Spans do not need to be
// contiguous - there may be gaps or overlaps between spans in a trace.
//
// The next id is 17.
type Span struct {
	// A unique identifier for a trace. All spans from the same trace share
	// the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes
	// is considered invalid.
	//
	// This field is semantically required. Receiver should generate new
	// random trace_id if empty or invalid trace_id was received.
	//
	// This field is required.
	TraceId []byte `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// A unique identifier for a span within a trace, assigned when the span
	// is created. The ID is an 8-byte array. An ID with all zeroes is considered
	// invalid.
	//
	// This field is semantically required. Receiver should generate new
	// random span_id if empty or invalid span_id was received.
	//
	// This field is required.
	SpanId []byte `protobuf:"bytes,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	// The Tracestate on the span.
	Tracestate *Span_Tracestate `protobuf:"bytes,3,opt,name=tracestate,proto3" json:"tracestate,omitempty"`
	// The `span_id` of this span's parent span. If this is a root span, then this
	// field must be empty. The ID is an 8-byte array.
	ParentSpanId []byte `protobuf:"bytes,4,opt,name=parent_span_id,json=parentSpanId,proto3" json:"parent_span_id,omitempty"`
	// A description of the span's operation.
	//
	// For example, the name can be a qualified method name or a file name
	// and a line number where the operation is called. A best practice is to use
	// the same display name at the same call point in an application.
	// This makes it easier to correlate spans in different traces.
	//
	// This field is semantically required to be set to non-empty string.
	// When null or empty string received - receiver may use string "name"
	// as a replacement. There might be smarted algorithms implemented by
	// receiver to fix the empty span name.
	//
	// This field is required.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Distinguishes between spans generated in a particular context. For example,
	// two spans with the same name may be distinguished using `CLIENT` (caller)
	// and `SERVER` (callee) to identify queueing latency associated with the span.
	Kind Span_SpanKind `protobuf:"varint,6,opt,name=kind,proto3,enum=otlp.Span_SpanKind" json:"kind,omitempty"`
	// The start time of the span. On the client side, this is the time kept by
	// the local machine where the span execution starts. On the server side, this
	// is the time when the server's application handler starts running.
	//
	// This field is semantically required. When not set on receive -
	// receiver should set it to the value of end_time field if it was
	// set. Or to the current time if neither was set. It is important to
	// keep end_time > start_time for consistency.
	//
	// This field is required.
	StartTimeUnixnano int64 `protobuf:"varint,7,opt,name=start_time_unixnano,json=startTimeUnixnano,proto3" json:"start_time_unixnano,omitempty"`
	// The end time of the span. On the client side, this is the time kept by
	// the local machine where the span execution ends. On the server side, this
	// is the time when the server application handler stops running.
	//
	// This field is semantically required. When not set on receive -
	// receiver should set it to start_time value. It is important to
	// keep end_time > start_time for consistency.
	//
	// This field is required.
	EndTimeUnixnano int64 `protobuf:"varint,8,opt,name=end_time_unixnano,json=endTimeUnixnano,proto3" json:"end_time_unixnano,omitempty"`
	// The set of attributes. The value can be a string, an integer, a double
	// or the Boolean values `true` or `false`. Note, global attributes like
	// server name can be set as tags using resource API. Examples of attributes:
	//
	//     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
	//     "/http/server_latency": 300
	//     "abc.com/myattribute": true
	//     "abc.com/score": 10.239
	Attributes []*AttributeKeyValue `protobuf:"bytes,9,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// A stack trace captured at the start of the span.
	StackTrace *StackTrace `protobuf:"bytes,10,opt,name=stack_trace,json=stackTrace,proto3" json:"stack_trace,omitempty"`
	// The included time events.
	TimeEvents *Span_TimeEvents `protobuf:"bytes,11,opt,name=time_events,json=timeEvents,proto3" json:"time_events,omitempty"`
	// The included links.
	Links *Span_Links `protobuf:"bytes,12,opt,name=links,proto3" json:"links,omitempty"`
	// An optional final status for this span. Semantically when Status
	// wasn't set it is means span ended without errors and assume
	// Status.Ok (code = 0).
	Status *Status `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	// An optional resource that is associated with this span. If not set, this span
	// should be part of a ResourceSpan that does include the resource information, unless resource
	// information is unknown.
	Resource *Resource `protobuf:"bytes,14,opt,name=resource,proto3" json:"resource,omitempty"`
	// A highly recommended but not required flag that identifies when a
	// trace crosses a process boundary. True when the parent_span belongs
	// to the same process as the current span. This flag is most commonly
	// used to indicate the need to adjust time as clocks in different
	// processes may not be synchronized.
	SameProcessAsParentSpan *wrappers.BoolValue `protobuf:"bytes,15,opt,name=same_process_as_parent_span,json=sameProcessAsParentSpan,proto3" json:"same_process_as_parent_span,omitempty"`
	// An optional number of child spans that were generated while this span
	// was active. If set, allows an implementation to detect missing child spans.
	ChildSpanCount       *wrappers.UInt32Value `protobuf:"bytes,16,opt,name=child_span_count,json=childSpanCount,proto3" json:"child_span_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Span) Reset()         { *m = Span{} }
func (m *Span) String() string { return proto.CompactTextString(m) }
func (*Span) ProtoMessage()    {}
func (*Span) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{5}
}

func (m *Span) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Span.Unmarshal(m, b)
}
func (m *Span) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Span.Marshal(b, m, deterministic)
}
func (m *Span) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Span.Merge(m, src)
}
func (m *Span) XXX_Size() int {
	return xxx_messageInfo_Span.Size(m)
}
func (m *Span) XXX_DiscardUnknown() {
	xxx_messageInfo_Span.DiscardUnknown(m)
}

var xxx_messageInfo_Span proto.InternalMessageInfo

func (m *Span) GetTraceId() []byte {
	if m != nil {
		return m.TraceId
	}
	return nil
}

func (m *Span) GetSpanId() []byte {
	if m != nil {
		return m.SpanId
	}
	return nil
}

func (m *Span) GetTracestate() *Span_Tracestate {
	if m != nil {
		return m.Tracestate
	}
	return nil
}

func (m *Span) GetParentSpanId() []byte {
	if m != nil {
		return m.ParentSpanId
	}
	return nil
}

func (m *Span) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Span) GetKind() Span_SpanKind {
	if m != nil {
		return m.Kind
	}
	return Span_SPAN_KIND_UNSPECIFIED
}

func (m *Span) GetStartTimeUnixnano() int64 {
	if m != nil {
		return m.StartTimeUnixnano
	}
	return 0
}

func (m *Span) GetEndTimeUnixnano() int64 {
	if m != nil {
		return m.EndTimeUnixnano
	}
	return 0
}

func (m *Span) GetAttributes() []*AttributeKeyValue {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Span) GetStackTrace() *StackTrace {
	if m != nil {
		return m.StackTrace
	}
	return nil
}

func (m *Span) GetTimeEvents() *Span_TimeEvents {
	if m != nil {
		return m.TimeEvents
	}
	return nil
}

func (m *Span) GetLinks() *Span_Links {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *Span) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Span) GetResource() *Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *Span) GetSameProcessAsParentSpan() *wrappers.BoolValue {
	if m != nil {
		return m.SameProcessAsParentSpan
	}
	return nil
}

func (m *Span) GetChildSpanCount() *wrappers.UInt32Value {
	if m != nil {
		return m.ChildSpanCount
	}
	return nil
}

// This field conveys information about request position in multiple distributed tracing graphs.
// It is a list of Tracestate.Entry with a maximum of 32 members in the list.
//
// See the https://github.com/w3c/distributed-tracing for more details about this field.
type Span_Tracestate struct {
	// A list of entries that represent the Tracestate.
	Entries              []*Span_Tracestate_Entry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *Span_Tracestate) Reset()         { *m = Span_Tracestate{} }
func (m *Span_Tracestate) String() string { return proto.CompactTextString(m) }
func (*Span_Tracestate) ProtoMessage()    {}
func (*Span_Tracestate) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{5, 0}
}

func (m *Span_Tracestate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Span_Tracestate.Unmarshal(m, b)
}
func (m *Span_Tracestate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Span_Tracestate.Marshal(b, m, deterministic)
}
func (m *Span_Tracestate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Span_Tracestate.Merge(m, src)
}
func (m *Span_Tracestate) XXX_Size() int {
	return xxx_messageInfo_Span_Tracestate.Size(m)
}
func (m *Span_Tracestate) XXX_DiscardUnknown() {
	xxx_messageInfo_Span_Tracestate.DiscardUnknown(m)
}

var xxx_messageInfo_Span_Tracestate proto.InternalMessageInfo

func (m *Span_Tracestate) GetEntries() []*Span_Tracestate_Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type Span_Tracestate_Entry struct {
	// The key must begin with a lowercase letter, and can only contain
	// lowercase letters 'a'-'z', digits '0'-'9', underscores '_', dashes
	// '-', asterisks '*', and forward slashes '/'.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The value is opaque string up to 256 characters printable ASCII
	// RFC0020 characters (i.e., the range 0x20 to 0x7E) except ',' and '='.
	// Note that this also excludes tabs, newlines, carriage returns, etc.
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Span_Tracestate_Entry) Reset()         { *m = Span_Tracestate_Entry{} }
func (m *Span_Tracestate_Entry) String() string { return proto.CompactTextString(m) }
func (*Span_Tracestate_Entry) ProtoMessage()    {}
func (*Span_Tracestate_Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{5, 0, 0}
}

func (m *Span_Tracestate_Entry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Span_Tracestate_Entry.Unmarshal(m, b)
}
func (m *Span_Tracestate_Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Span_Tracestate_Entry.Marshal(b, m, deterministic)
}
func (m *Span_Tracestate_Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Span_Tracestate_Entry.Merge(m, src)
}
func (m *Span_Tracestate_Entry) XXX_Size() int {
	return xxx_messageInfo_Span_Tracestate_Entry.Size(m)
}
func (m *Span_Tracestate_Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Span_Tracestate_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Span_Tracestate_Entry proto.InternalMessageInfo

func (m *Span_Tracestate_Entry) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Span_Tracestate_Entry) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// A time-stamped annotation or message event in the Span.
type Span_TimeEvent struct {
	// The time the event occurred.
	TimeUnixnano int64 `protobuf:"varint,1,opt,name=time_unixnano,json=timeUnixnano,proto3" json:"time_unixnano,omitempty"`
	// A `TimeEvent` can contain either an `Annotation` object or a
	// `MessageEvent` object, but not both.
	//
	// Types that are valid to be assigned to Value:
	//	*Span_TimeEvent_Annotation_
	//	*Span_TimeEvent_MessageEvent_
	Value                isSpan_TimeEvent_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Span_TimeEvent) Reset()         { *m = Span_TimeEvent{} }
func (m *Span_TimeEvent) String() string { return proto.CompactTextString(m) }
func (*Span_TimeEvent) ProtoMessage()    {}
func (*Span_TimeEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{5, 1}
}

func (m *Span_TimeEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Span_TimeEvent.Unmarshal(m, b)
}
func (m *Span_TimeEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Span_TimeEvent.Marshal(b, m, deterministic)
}
func (m *Span_TimeEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Span_TimeEvent.Merge(m, src)
}
func (m *Span_TimeEvent) XXX_Size() int {
	return xxx_messageInfo_Span_TimeEvent.Size(m)
}
func (m *Span_TimeEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_Span_TimeEvent.DiscardUnknown(m)
}

var xxx_messageInfo_Span_TimeEvent proto.InternalMessageInfo

func (m *Span_TimeEvent) GetTimeUnixnano() int64 {
	if m != nil {
		return m.TimeUnixnano
	}
	return 0
}

type isSpan_TimeEvent_Value interface {
	isSpan_TimeEvent_Value()
}

type Span_TimeEvent_Annotation_ struct {
	Annotation *Span_TimeEvent_Annotation `protobuf:"bytes,2,opt,name=annotation,proto3,oneof"`
}

type Span_TimeEvent_MessageEvent_ struct {
	MessageEvent *Span_TimeEvent_MessageEvent `protobuf:"bytes,3,opt,name=message_event,json=messageEvent,proto3,oneof"`
}

func (*Span_TimeEvent_Annotation_) isSpan_TimeEvent_Value() {}

func (*Span_TimeEvent_MessageEvent_) isSpan_TimeEvent_Value() {}

func (m *Span_TimeEvent) GetValue() isSpan_TimeEvent_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Span_TimeEvent) GetAnnotation() *Span_TimeEvent_Annotation {
	if x, ok := m.GetValue().(*Span_TimeEvent_Annotation_); ok {
		return x.Annotation
	}
	return nil
}

func (m *Span_TimeEvent) GetMessageEvent() *Span_TimeEvent_MessageEvent {
	if x, ok := m.GetValue().(*Span_TimeEvent_MessageEvent_); ok {
		return x.MessageEvent
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Span_TimeEvent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Span_TimeEvent_Annotation_)(nil),
		(*Span_TimeEvent_MessageEvent_)(nil),
	}
}

// A text annotation with a set of attributes.
type Span_TimeEvent_Annotation struct {
	// A user-supplied message describing the event.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// A set of attributes on the annotation.
	Attributes           []*AttributeKeyValue `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Span_TimeEvent_Annotation) Reset()         { *m = Span_TimeEvent_Annotation{} }
func (m *Span_TimeEvent_Annotation) String() string { return proto.CompactTextString(m) }
func (*Span_TimeEvent_Annotation) ProtoMessage()    {}
func (*Span_TimeEvent_Annotation) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{5, 1, 0}
}

func (m *Span_TimeEvent_Annotation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Span_TimeEvent_Annotation.Unmarshal(m, b)
}
func (m *Span_TimeEvent_Annotation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Span_TimeEvent_Annotation.Marshal(b, m, deterministic)
}
func (m *Span_TimeEvent_Annotation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Span_TimeEvent_Annotation.Merge(m, src)
}
func (m *Span_TimeEvent_Annotation) XXX_Size() int {
	return xxx_messageInfo_Span_TimeEvent_Annotation.Size(m)
}
func (m *Span_TimeEvent_Annotation) XXX_DiscardUnknown() {
	xxx_messageInfo_Span_TimeEvent_Annotation.DiscardUnknown(m)
}

var xxx_messageInfo_Span_TimeEvent_Annotation proto.InternalMessageInfo

func (m *Span_TimeEvent_Annotation) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Span_TimeEvent_Annotation) GetAttributes() []*AttributeKeyValue {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// An event describing a message sent/received between Spans.
type Span_TimeEvent_MessageEvent struct {
	// The type of MessageEvent. Indicates whether the message was sent or
	// received.
	Type Span_TimeEvent_MessageEvent_Type `protobuf:"varint,1,opt,name=type,proto3,enum=otlp.Span_TimeEvent_MessageEvent_Type" json:"type,omitempty"`
	// An identifier for the MessageEvent's message that can be used to match
	// SENT and RECEIVED MessageEvents. For example, this field could
	// represent a sequence ID for a streaming RPC. It is recommended to be
	// unique within a Span.
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// The number of uncompressed bytes sent or received.
	UncompressedSize uint64 `protobuf:"varint,3,opt,name=uncompressed_size,json=uncompressedSize,proto3" json:"uncompressed_size,omitempty"`
	// The number of compressed bytes sent or received. If zero, assumed to
	// be the same size as uncompressed.
	CompressedSize       uint64   `protobuf:"varint,4,opt,name=compressed_size,json=compressedSize,proto3" json:"compressed_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Span_TimeEvent_MessageEvent) Reset()         { *m = Span_TimeEvent_MessageEvent{} }
func (m *Span_TimeEvent_MessageEvent) String() string { return proto.CompactTextString(m) }
func (*Span_TimeEvent_MessageEvent) ProtoMessage()    {}
func (*Span_TimeEvent_MessageEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{5, 1, 1}
}

func (m *Span_TimeEvent_MessageEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Span_TimeEvent_MessageEvent.Unmarshal(m, b)
}
func (m *Span_TimeEvent_MessageEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Span_TimeEvent_MessageEvent.Marshal(b, m, deterministic)
}
func (m *Span_TimeEvent_MessageEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Span_TimeEvent_MessageEvent.Merge(m, src)
}
func (m *Span_TimeEvent_MessageEvent) XXX_Size() int {
	return xxx_messageInfo_Span_TimeEvent_MessageEvent.Size(m)
}
func (m *Span_TimeEvent_MessageEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_Span_TimeEvent_MessageEvent.DiscardUnknown(m)
}

var xxx_messageInfo_Span_TimeEvent_MessageEvent proto.InternalMessageInfo

func (m *Span_TimeEvent_MessageEvent) GetType() Span_TimeEvent_MessageEvent_Type {
	if m != nil {
		return m.Type
	}
	return Span_TimeEvent_MessageEvent_TYPE_UNSPECIFIED
}

func (m *Span_TimeEvent_MessageEvent) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Span_TimeEvent_MessageEvent) GetUncompressedSize() uint64 {
	if m != nil {
		return m.UncompressedSize
	}
	return 0
}

func (m *Span_TimeEvent_MessageEvent) GetCompressedSize() uint64 {
	if m != nil {
		return m.CompressedSize
	}
	return 0
}

// A collection of `TimeEvent`s. A `TimeEvent` is a time-stamped annotation
// on the span, consisting of either user-supplied key-value pairs, or
// details of a message sent/received between Spans.
type Span_TimeEvents struct {
	// A collection of `TimeEvent`s.
	TimeEvent []*Span_TimeEvent `protobuf:"bytes,1,rep,name=time_event,json=timeEvent,proto3" json:"time_event,omitempty"`
	// The number of dropped annotations in all the included time events.
	// If the value is 0, then no annotations were dropped.
	DroppedAnnotationsCount int32 `protobuf:"varint,2,opt,name=dropped_annotations_count,json=droppedAnnotationsCount,proto3" json:"dropped_annotations_count,omitempty"`
	// The number of dropped message events in all the included time events.
	// If the value is 0, then no message events were dropped.
	DroppedMessageEventsCount int32    `protobuf:"varint,3,opt,name=dropped_message_events_count,json=droppedMessageEventsCount,proto3" json:"dropped_message_events_count,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *Span_TimeEvents) Reset()         { *m = Span_TimeEvents{} }
func (m *Span_TimeEvents) String() string { return proto.CompactTextString(m) }
func (*Span_TimeEvents) ProtoMessage()    {}
func (*Span_TimeEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{5, 2}
}

func (m *Span_TimeEvents) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Span_TimeEvents.Unmarshal(m, b)
}
func (m *Span_TimeEvents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Span_TimeEvents.Marshal(b, m, deterministic)
}
func (m *Span_TimeEvents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Span_TimeEvents.Merge(m, src)
}
func (m *Span_TimeEvents) XXX_Size() int {
	return xxx_messageInfo_Span_TimeEvents.Size(m)
}
func (m *Span_TimeEvents) XXX_DiscardUnknown() {
	xxx_messageInfo_Span_TimeEvents.DiscardUnknown(m)
}

var xxx_messageInfo_Span_TimeEvents proto.InternalMessageInfo

func (m *Span_TimeEvents) GetTimeEvent() []*Span_TimeEvent {
	if m != nil {
		return m.TimeEvent
	}
	return nil
}

func (m *Span_TimeEvents) GetDroppedAnnotationsCount() int32 {
	if m != nil {
		return m.DroppedAnnotationsCount
	}
	return 0
}

func (m *Span_TimeEvents) GetDroppedMessageEventsCount() int32 {
	if m != nil {
		return m.DroppedMessageEventsCount
	}
	return 0
}

// A pointer from the current span to another span in the same trace or in a
// different trace. For example, this can be used in batching operations,
// where a single batch handler processes multiple requests from different
// traces or when the handler receives a request from a different project.
type Span_Link struct {
	// A unique identifier of a trace that this linked span is part of. The ID is a
	// 16-byte array.
	TraceId []byte `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// A unique identifier for the linked span. The ID is an 8-byte array.
	SpanId []byte `protobuf:"bytes,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	// The relationship of the current span relative to the linked span.
	Type Span_Link_Type `protobuf:"varint,3,opt,name=type,proto3,enum=otlp.Span_Link_Type" json:"type,omitempty"`
	// A set of attributes on the link.
	Attributes []*AttributeKeyValue `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// The Tracestate associated with the link.
	Tracestate           *Span_Tracestate `protobuf:"bytes,5,opt,name=tracestate,proto3" json:"tracestate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Span_Link) Reset()         { *m = Span_Link{} }
func (m *Span_Link) String() string { return proto.CompactTextString(m) }
func (*Span_Link) ProtoMessage()    {}
func (*Span_Link) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{5, 3}
}

func (m *Span_Link) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Span_Link.Unmarshal(m, b)
}
func (m *Span_Link) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Span_Link.Marshal(b, m, deterministic)
}
func (m *Span_Link) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Span_Link.Merge(m, src)
}
func (m *Span_Link) XXX_Size() int {
	return xxx_messageInfo_Span_Link.Size(m)
}
func (m *Span_Link) XXX_DiscardUnknown() {
	xxx_messageInfo_Span_Link.DiscardUnknown(m)
}

var xxx_messageInfo_Span_Link proto.InternalMessageInfo

func (m *Span_Link) GetTraceId() []byte {
	if m != nil {
		return m.TraceId
	}
	return nil
}

func (m *Span_Link) GetSpanId() []byte {
	if m != nil {
		return m.SpanId
	}
	return nil
}

func (m *Span_Link) GetType() Span_Link_Type {
	if m != nil {
		return m.Type
	}
	return Span_Link_TYPE_UNSPECIFIED
}

func (m *Span_Link) GetAttributes() []*AttributeKeyValue {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Span_Link) GetTracestate() *Span_Tracestate {
	if m != nil {
		return m.Tracestate
	}
	return nil
}

// A collection of links, which are references from this span to a span
// in the same or different trace.
type Span_Links struct {
	// A collection of links.
	Link []*Span_Link `protobuf:"bytes,1,rep,name=link,proto3" json:"link,omitempty"`
	// The number of dropped links after the maximum size was enforced. If
	// this value is 0, then no links were dropped.
	DroppedLinksCount    int32    `protobuf:"varint,2,opt,name=dropped_links_count,json=droppedLinksCount,proto3" json:"dropped_links_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Span_Links) Reset()         { *m = Span_Links{} }
func (m *Span_Links) String() string { return proto.CompactTextString(m) }
func (*Span_Links) ProtoMessage()    {}
func (*Span_Links) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{5, 4}
}

func (m *Span_Links) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Span_Links.Unmarshal(m, b)
}
func (m *Span_Links) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Span_Links.Marshal(b, m, deterministic)
}
func (m *Span_Links) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Span_Links.Merge(m, src)
}
func (m *Span_Links) XXX_Size() int {
	return xxx_messageInfo_Span_Links.Size(m)
}
func (m *Span_Links) XXX_DiscardUnknown() {
	xxx_messageInfo_Span_Links.DiscardUnknown(m)
}

var xxx_messageInfo_Span_Links proto.InternalMessageInfo

func (m *Span_Links) GetLink() []*Span_Link {
	if m != nil {
		return m.Link
	}
	return nil
}

func (m *Span_Links) GetDroppedLinksCount() int32 {
	if m != nil {
		return m.DroppedLinksCount
	}
	return 0
}

// The `Status` type defines a logical error model that is suitable for different
// programming environments, including REST APIs and RPC APIs. This proto's fields
// are a subset of those of
// [google.rpc.Status](https://github.com/googleapis/googleapis/blob/master/google/rpc/status.proto),
// which is used by [gRPC](https://github.com/grpc).
type Status struct {
	// The status code. This is optional field. It is safe to assume 0 (OK)
	// when not set.
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// A developer-facing error message, which should be in English.
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{6}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Status) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// The call stack which originated this span.
type StackTrace struct {
	// Stack frames in this stack trace.
	StackFrames *StackTrace_StackFrames `protobuf:"bytes,1,opt,name=stack_frames,json=stackFrames,proto3" json:"stack_frames,omitempty"`
	// The hash ID is used to conserve network bandwidth for duplicate
	// stack traces within a single trace.
	//
	// Often multiple spans will have identical stack traces.
	// The first occurrence of a stack trace should contain both
	// `stack_frames` and a value in `stack_trace_hash_id`.
	//
	// Subsequent spans within the same request can refer
	// to that stack trace by setting only `stack_trace_hash_id`.
	//
	// TODO: describe how to deal with the case where stack_trace_hash_id is
	// zero because it was not set.
	StackTraceHashId     uint64   `protobuf:"varint,2,opt,name=stack_trace_hash_id,json=stackTraceHashId,proto3" json:"stack_trace_hash_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StackTrace) Reset()         { *m = StackTrace{} }
func (m *StackTrace) String() string { return proto.CompactTextString(m) }
func (*StackTrace) ProtoMessage()    {}
func (*StackTrace) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{7}
}

func (m *StackTrace) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StackTrace.Unmarshal(m, b)
}
func (m *StackTrace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StackTrace.Marshal(b, m, deterministic)
}
func (m *StackTrace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StackTrace.Merge(m, src)
}
func (m *StackTrace) XXX_Size() int {
	return xxx_messageInfo_StackTrace.Size(m)
}
func (m *StackTrace) XXX_DiscardUnknown() {
	xxx_messageInfo_StackTrace.DiscardUnknown(m)
}

var xxx_messageInfo_StackTrace proto.InternalMessageInfo

func (m *StackTrace) GetStackFrames() *StackTrace_StackFrames {
	if m != nil {
		return m.StackFrames
	}
	return nil
}

func (m *StackTrace) GetStackTraceHashId() uint64 {
	if m != nil {
		return m.StackTraceHashId
	}
	return 0
}

// A single stack frame in a stack trace.
type StackTrace_StackFrame struct {
	// The fully-qualified name that uniquely identifies the function or
	// method that is active in this frame.
	FunctionName string `protobuf:"bytes,1,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	// An un-mangled function name, if `function_name` is
	// [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
	// be fully qualified.
	OriginalFunctionName string `protobuf:"bytes,2,opt,name=original_function_name,json=originalFunctionName,proto3" json:"original_function_name,omitempty"`
	// The name of the source file where the function call appears.
	FileName string `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	// The line number in `file_name` where the function call appears.
	LineNumber int64 `protobuf:"varint,4,opt,name=line_number,json=lineNumber,proto3" json:"line_number,omitempty"`
	// The column number where the function call appears, if available.
	// This is important in JavaScript because of its anonymous functions.
	ColumnNumber int64 `protobuf:"varint,5,opt,name=column_number,json=columnNumber,proto3" json:"column_number,omitempty"`
	// The binary module from where the code was loaded.
	LoadModule *Module `protobuf:"bytes,6,opt,name=load_module,json=loadModule,proto3" json:"load_module,omitempty"`
	// The version of the deployed source code.
	SourceVersion        string   `protobuf:"bytes,7,opt,name=source_version,json=sourceVersion,proto3" json:"source_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StackTrace_StackFrame) Reset()         { *m = StackTrace_StackFrame{} }
func (m *StackTrace_StackFrame) String() string { return proto.CompactTextString(m) }
func (*StackTrace_StackFrame) ProtoMessage()    {}
func (*StackTrace_StackFrame) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{7, 0}
}

func (m *StackTrace_StackFrame) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StackTrace_StackFrame.Unmarshal(m, b)
}
func (m *StackTrace_StackFrame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StackTrace_StackFrame.Marshal(b, m, deterministic)
}
func (m *StackTrace_StackFrame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StackTrace_StackFrame.Merge(m, src)
}
func (m *StackTrace_StackFrame) XXX_Size() int {
	return xxx_messageInfo_StackTrace_StackFrame.Size(m)
}
func (m *StackTrace_StackFrame) XXX_DiscardUnknown() {
	xxx_messageInfo_StackTrace_StackFrame.DiscardUnknown(m)
}

var xxx_messageInfo_StackTrace_StackFrame proto.InternalMessageInfo

func (m *StackTrace_StackFrame) GetFunctionName() string {
	if m != nil {
		return m.FunctionName
	}
	return ""
}

func (m *StackTrace_StackFrame) GetOriginalFunctionName() string {
	if m != nil {
		return m.OriginalFunctionName
	}
	return ""
}

func (m *StackTrace_StackFrame) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *StackTrace_StackFrame) GetLineNumber() int64 {
	if m != nil {
		return m.LineNumber
	}
	return 0
}

func (m *StackTrace_StackFrame) GetColumnNumber() int64 {
	if m != nil {
		return m.ColumnNumber
	}
	return 0
}

func (m *StackTrace_StackFrame) GetLoadModule() *Module {
	if m != nil {
		return m.LoadModule
	}
	return nil
}

func (m *StackTrace_StackFrame) GetSourceVersion() string {
	if m != nil {
		return m.SourceVersion
	}
	return ""
}

// A collection of stack frames, which can be truncated.
type StackTrace_StackFrames struct {
	// Stack frames in this call stack.
	Frame []*StackTrace_StackFrame `protobuf:"bytes,1,rep,name=frame,proto3" json:"frame,omitempty"`
	// The number of stack frames that were dropped because there
	// were too many stack frames.
	// If this value is 0, then no stack frames were dropped.
	DroppedFramesCount   int32    `protobuf:"varint,2,opt,name=dropped_frames_count,json=droppedFramesCount,proto3" json:"dropped_frames_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StackTrace_StackFrames) Reset()         { *m = StackTrace_StackFrames{} }
func (m *StackTrace_StackFrames) String() string { return proto.CompactTextString(m) }
func (*StackTrace_StackFrames) ProtoMessage()    {}
func (*StackTrace_StackFrames) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{7, 1}
}

func (m *StackTrace_StackFrames) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StackTrace_StackFrames.Unmarshal(m, b)
}
func (m *StackTrace_StackFrames) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StackTrace_StackFrames.Marshal(b, m, deterministic)
}
func (m *StackTrace_StackFrames) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StackTrace_StackFrames.Merge(m, src)
}
func (m *StackTrace_StackFrames) XXX_Size() int {
	return xxx_messageInfo_StackTrace_StackFrames.Size(m)
}
func (m *StackTrace_StackFrames) XXX_DiscardUnknown() {
	xxx_messageInfo_StackTrace_StackFrames.DiscardUnknown(m)
}

var xxx_messageInfo_StackTrace_StackFrames proto.InternalMessageInfo

func (m *StackTrace_StackFrames) GetFrame() []*StackTrace_StackFrame {
	if m != nil {
		return m.Frame
	}
	return nil
}

func (m *StackTrace_StackFrames) GetDroppedFramesCount() int32 {
	if m != nil {
		return m.DroppedFramesCount
	}
	return 0
}

// A description of a binary module.
type Module struct {
	// TODO: document the meaning of this field.
	// For example: main binary, kernel modules, and dynamic libraries
	// such as libc.so, sharedlib.so.
	Module string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	// A unique identifier for the module, usually a hash of its
	// contents.
	BuildId              string   `protobuf:"bytes,2,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Module) Reset()         { *m = Module{} }
func (m *Module) String() string { return proto.CompactTextString(m) }
func (*Module) ProtoMessage()    {}
func (*Module) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{8}
}

func (m *Module) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Module.Unmarshal(m, b)
}
func (m *Module) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Module.Marshal(b, m, deterministic)
}
func (m *Module) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Module.Merge(m, src)
}
func (m *Module) XXX_Size() int {
	return xxx_messageInfo_Module.Size(m)
}
func (m *Module) XXX_DiscardUnknown() {
	xxx_messageInfo_Module.DiscardUnknown(m)
}

var xxx_messageInfo_Module proto.InternalMessageInfo

func (m *Module) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *Module) GetBuildId() string {
	if m != nil {
		return m.BuildId
	}
	return ""
}

// Defines a Metric which has one or more timeseries.
type Metric struct {
	// The descriptor of the Metric.
	// TODO(issue #152): consider only sending the name of descriptor for
	// optimization.
	MetricDescriptor *MetricDescriptor `protobuf:"bytes,1,opt,name=metric_descriptor,json=metricDescriptor,proto3" json:"metric_descriptor,omitempty"`
	// One or more timeseries for a single metric, where each timeseries has
	// one or more points.
	Timeseries []*TimeSeries `protobuf:"bytes,2,rep,name=timeseries,proto3" json:"timeseries,omitempty"`
	// The resource for the metric. If unset, it may be set to a default value
	// provided for a sequence of messages in an RPC stream.
	Resource             *Resource `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Metric) Reset()         { *m = Metric{} }
func (m *Metric) String() string { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()    {}
func (*Metric) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{9}
}

func (m *Metric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metric.Unmarshal(m, b)
}
func (m *Metric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metric.Marshal(b, m, deterministic)
}
func (m *Metric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metric.Merge(m, src)
}
func (m *Metric) XXX_Size() int {
	return xxx_messageInfo_Metric.Size(m)
}
func (m *Metric) XXX_DiscardUnknown() {
	xxx_messageInfo_Metric.DiscardUnknown(m)
}

var xxx_messageInfo_Metric proto.InternalMessageInfo

func (m *Metric) GetMetricDescriptor() *MetricDescriptor {
	if m != nil {
		return m.MetricDescriptor
	}
	return nil
}

func (m *Metric) GetTimeseries() []*TimeSeries {
	if m != nil {
		return m.Timeseries
	}
	return nil
}

func (m *Metric) GetResource() *Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

// Defines a metric type and its schema.
type MetricDescriptor struct {
	// The metric type, including its DNS name prefix. It must be unique.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A detailed description of the metric, which can be used in documentation.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The unit in which the metric value is reported. Follows the format
	// described by http://unitsofmeasure.org/ucum.html.
	Unit string                `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit,omitempty"`
	Type MetricDescriptor_Type `protobuf:"varint,4,opt,name=type,proto3,enum=otlp.MetricDescriptor_Type" json:"type,omitempty"`
	// The label keys associated with the metric descriptor.
	LabelKeys            []*LabelKey `protobuf:"bytes,5,rep,name=label_keys,json=labelKeys,proto3" json:"label_keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *MetricDescriptor) Reset()         { *m = MetricDescriptor{} }
func (m *MetricDescriptor) String() string { return proto.CompactTextString(m) }
func (*MetricDescriptor) ProtoMessage()    {}
func (*MetricDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{10}
}

func (m *MetricDescriptor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricDescriptor.Unmarshal(m, b)
}
func (m *MetricDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricDescriptor.Marshal(b, m, deterministic)
}
func (m *MetricDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricDescriptor.Merge(m, src)
}
func (m *MetricDescriptor) XXX_Size() int {
	return xxx_messageInfo_MetricDescriptor.Size(m)
}
func (m *MetricDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_MetricDescriptor proto.InternalMessageInfo

func (m *MetricDescriptor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetricDescriptor) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MetricDescriptor) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *MetricDescriptor) GetType() MetricDescriptor_Type {
	if m != nil {
		return m.Type
	}
	return MetricDescriptor_UNSPECIFIED
}

func (m *MetricDescriptor) GetLabelKeys() []*LabelKey {
	if m != nil {
		return m.LabelKeys
	}
	return nil
}

// Defines a label key associated with a metric descriptor.
type LabelKey struct {
	// The key for the label.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// A human-readable description of what this label key represents.
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LabelKey) Reset()         { *m = LabelKey{} }
func (m *LabelKey) String() string { return proto.CompactTextString(m) }
func (*LabelKey) ProtoMessage()    {}
func (*LabelKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{11}
}

func (m *LabelKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LabelKey.Unmarshal(m, b)
}
func (m *LabelKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LabelKey.Marshal(b, m, deterministic)
}
func (m *LabelKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelKey.Merge(m, src)
}
func (m *LabelKey) XXX_Size() int {
	return xxx_messageInfo_LabelKey.Size(m)
}
func (m *LabelKey) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelKey.DiscardUnknown(m)
}

var xxx_messageInfo_LabelKey proto.InternalMessageInfo

func (m *LabelKey) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *LabelKey) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// A collection of data points that describes the time-varying values
// of a metric.
type TimeSeries struct {
	// Must be present for cumulative metrics. The time when the cumulative value
	// was reset to zero. Exclusive. The cumulative value is over the time interval
	// (start_timestamp, timestamp]. If not specified, the backend can use the
	// previous recorded value.
	StartTimeUnixnano int64 `protobuf:"varint,1,opt,name=start_time_unixnano,json=startTimeUnixnano,proto3" json:"start_time_unixnano,omitempty"`
	// The set of label values that uniquely identify this timeseries. Applies to
	// all points. The order of label values must match that of label keys in the
	// metric descriptor.
	LabelValues []*LabelValue `protobuf:"bytes,2,rep,name=label_values,json=labelValues,proto3" json:"label_values,omitempty"`
	// The data points of this timeseries. Point.value type MUST match the
	// MetricDescriptor.type.
	Points               []*Point `protobuf:"bytes,3,rep,name=points,proto3" json:"points,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimeSeries) Reset()         { *m = TimeSeries{} }
func (m *TimeSeries) String() string { return proto.CompactTextString(m) }
func (*TimeSeries) ProtoMessage()    {}
func (*TimeSeries) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{12}
}

func (m *TimeSeries) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeSeries.Unmarshal(m, b)
}
func (m *TimeSeries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeSeries.Marshal(b, m, deterministic)
}
func (m *TimeSeries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeSeries.Merge(m, src)
}
func (m *TimeSeries) XXX_Size() int {
	return xxx_messageInfo_TimeSeries.Size(m)
}
func (m *TimeSeries) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeSeries.DiscardUnknown(m)
}

var xxx_messageInfo_TimeSeries proto.InternalMessageInfo

func (m *TimeSeries) GetStartTimeUnixnano() int64 {
	if m != nil {
		return m.StartTimeUnixnano
	}
	return 0
}

func (m *TimeSeries) GetLabelValues() []*LabelValue {
	if m != nil {
		return m.LabelValues
	}
	return nil
}

func (m *TimeSeries) GetPoints() []*Point {
	if m != nil {
		return m.Points
	}
	return nil
}

type LabelValue struct {
	// The value for the label.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// If false the value field is ignored and considered not set.
	// This is used to differentiate a missing label from an empty string.
	HasValue             bool     `protobuf:"varint,2,opt,name=has_value,json=hasValue,proto3" json:"has_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LabelValue) Reset()         { *m = LabelValue{} }
func (m *LabelValue) String() string { return proto.CompactTextString(m) }
func (*LabelValue) ProtoMessage()    {}
func (*LabelValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{13}
}

func (m *LabelValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LabelValue.Unmarshal(m, b)
}
func (m *LabelValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LabelValue.Marshal(b, m, deterministic)
}
func (m *LabelValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelValue.Merge(m, src)
}
func (m *LabelValue) XXX_Size() int {
	return xxx_messageInfo_LabelValue.Size(m)
}
func (m *LabelValue) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelValue.DiscardUnknown(m)
}

var xxx_messageInfo_LabelValue proto.InternalMessageInfo

func (m *LabelValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *LabelValue) GetHasValue() bool {
	if m != nil {
		return m.HasValue
	}
	return false
}

// A timestamped measurement.
type Point struct {
	// The moment when this point was recorded. Inclusive.
	// If not specified, the timestamp will be decided by the backend.
	TimeUnixnano int64 `protobuf:"varint,1,opt,name=time_unixnano,json=timeUnixnano,proto3" json:"time_unixnano,omitempty"`
	// Defines which of the value fields is set.
	ValueType Point_ValueType `protobuf:"varint,2,opt,name=value_type,json=valueType,proto3,enum=otlp.Point_ValueType" json:"value_type,omitempty"`
	// A 64-bit integer.
	Int64Value int64 `protobuf:"varint,3,opt,name=int64_value,json=int64Value,proto3" json:"int64_value,omitempty"`
	// A 64-bit double-precision floating-point number.
	DoubleValue float64 `protobuf:"fixed64,4,opt,name=double_value,json=doubleValue,proto3" json:"double_value,omitempty"`
	// A distribution value.
	DistributionValue *DistributionValue `protobuf:"bytes,5,opt,name=distribution_value,json=distributionValue,proto3" json:"distribution_value,omitempty"`
	// A summary value. This is not recommended, since it cannot be aggregated.
	SummaryValue         *SummaryValue `protobuf:"bytes,6,opt,name=summary_value,json=summaryValue,proto3" json:"summary_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Point) Reset()         { *m = Point{} }
func (m *Point) String() string { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()    {}
func (*Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{14}
}

func (m *Point) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Point.Unmarshal(m, b)
}
func (m *Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Point.Marshal(b, m, deterministic)
}
func (m *Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Point.Merge(m, src)
}
func (m *Point) XXX_Size() int {
	return xxx_messageInfo_Point.Size(m)
}
func (m *Point) XXX_DiscardUnknown() {
	xxx_messageInfo_Point.DiscardUnknown(m)
}

var xxx_messageInfo_Point proto.InternalMessageInfo

func (m *Point) GetTimeUnixnano() int64 {
	if m != nil {
		return m.TimeUnixnano
	}
	return 0
}

func (m *Point) GetValueType() Point_ValueType {
	if m != nil {
		return m.ValueType
	}
	return Point_INT64
}

func (m *Point) GetInt64Value() int64 {
	if m != nil {
		return m.Int64Value
	}
	return 0
}

func (m *Point) GetDoubleValue() float64 {
	if m != nil {
		return m.DoubleValue
	}
	return 0
}

func (m *Point) GetDistributionValue() *DistributionValue {
	if m != nil {
		return m.DistributionValue
	}
	return nil
}

func (m *Point) GetSummaryValue() *SummaryValue {
	if m != nil {
		return m.SummaryValue
	}
	return nil
}

// Distribution contains summary statistics for a population of values. It
// optionally contains a histogram representing the distribution of those
// values across a set of buckets.
type DistributionValue struct {
	// The number of values in the population. Must be non-negative. This value
	// must equal the sum of the values in bucket_counts if a histogram is
	// provided.
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// The sum of the values in the population. If count is zero then this field
	// must be zero.
	Sum float64 `protobuf:"fixed64,2,opt,name=sum,proto3" json:"sum,omitempty"`
	// The sum of squared deviations from the mean of the values in the
	// population. For values x_i this is:
	//
	//     Sum[i=1..n]((x_i - mean)^2)
	//
	// Knuth, "The Art of Computer Programming", Vol. 2, page 323, 3rd edition
	// describes Welford's method for accumulating this sum in one pass.
	//
	// If count is zero then this field must be zero.
	SumOfSquaredDeviation float64 `protobuf:"fixed64,3,opt,name=sum_of_squared_deviation,json=sumOfSquaredDeviation,proto3" json:"sum_of_squared_deviation,omitempty"`
	// Don't change bucket boundaries within a TimeSeries if your backend doesn't
	// support this.
	// TODO(issue #152): consider not required to send bucket options for
	// optimization.
	BucketOptions *DistributionValue_BucketOptions `protobuf:"bytes,4,opt,name=bucket_options,json=bucketOptions,proto3" json:"bucket_options,omitempty"`
	// If the distribution does not have a histogram, then omit this field.
	// If there is a histogram, then the sum of the values in the Bucket counts
	// must equal the value in the count field of the distribution.
	Buckets              []*DistributionValue_Bucket `protobuf:"bytes,5,rep,name=buckets,proto3" json:"buckets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *DistributionValue) Reset()         { *m = DistributionValue{} }
func (m *DistributionValue) String() string { return proto.CompactTextString(m) }
func (*DistributionValue) ProtoMessage()    {}
func (*DistributionValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{15}
}

func (m *DistributionValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DistributionValue.Unmarshal(m, b)
}
func (m *DistributionValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DistributionValue.Marshal(b, m, deterministic)
}
func (m *DistributionValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributionValue.Merge(m, src)
}
func (m *DistributionValue) XXX_Size() int {
	return xxx_messageInfo_DistributionValue.Size(m)
}
func (m *DistributionValue) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributionValue.DiscardUnknown(m)
}

var xxx_messageInfo_DistributionValue proto.InternalMessageInfo

func (m *DistributionValue) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *DistributionValue) GetSum() float64 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func (m *DistributionValue) GetSumOfSquaredDeviation() float64 {
	if m != nil {
		return m.SumOfSquaredDeviation
	}
	return 0
}

func (m *DistributionValue) GetBucketOptions() *DistributionValue_BucketOptions {
	if m != nil {
		return m.BucketOptions
	}
	return nil
}

func (m *DistributionValue) GetBuckets() []*DistributionValue_Bucket {
	if m != nil {
		return m.Buckets
	}
	return nil
}

// A Distribution may optionally contain a histogram of the values in the
// population. The bucket boundaries for that histogram are described by
// BucketOptions.
//
// If bucket_options has no type, then there is no histogram associated with
// the Distribution.
type DistributionValue_BucketOptions struct {
	// Types that are valid to be assigned to Type:
	//	*DistributionValue_BucketOptions_Explicit_
	Type                 isDistributionValue_BucketOptions_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *DistributionValue_BucketOptions) Reset()         { *m = DistributionValue_BucketOptions{} }
func (m *DistributionValue_BucketOptions) String() string { return proto.CompactTextString(m) }
func (*DistributionValue_BucketOptions) ProtoMessage()    {}
func (*DistributionValue_BucketOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{15, 0}
}

func (m *DistributionValue_BucketOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DistributionValue_BucketOptions.Unmarshal(m, b)
}
func (m *DistributionValue_BucketOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DistributionValue_BucketOptions.Marshal(b, m, deterministic)
}
func (m *DistributionValue_BucketOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributionValue_BucketOptions.Merge(m, src)
}
func (m *DistributionValue_BucketOptions) XXX_Size() int {
	return xxx_messageInfo_DistributionValue_BucketOptions.Size(m)
}
func (m *DistributionValue_BucketOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributionValue_BucketOptions.DiscardUnknown(m)
}

var xxx_messageInfo_DistributionValue_BucketOptions proto.InternalMessageInfo

type isDistributionValue_BucketOptions_Type interface {
	isDistributionValue_BucketOptions_Type()
}

type DistributionValue_BucketOptions_Explicit_ struct {
	Explicit *DistributionValue_BucketOptions_Explicit `protobuf:"bytes,1,opt,name=explicit,proto3,oneof"`
}

func (*DistributionValue_BucketOptions_Explicit_) isDistributionValue_BucketOptions_Type() {}

func (m *DistributionValue_BucketOptions) GetType() isDistributionValue_BucketOptions_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *DistributionValue_BucketOptions) GetExplicit() *DistributionValue_BucketOptions_Explicit {
	if x, ok := m.GetType().(*DistributionValue_BucketOptions_Explicit_); ok {
		return x.Explicit
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DistributionValue_BucketOptions) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DistributionValue_BucketOptions_Explicit_)(nil),
	}
}

// Specifies a set of buckets with arbitrary upper-bounds.
// This defines size(bounds) + 1 (= N) buckets. The boundaries for bucket
// index i are:
//
// [0, bucket_bounds[i]) for i == 0
// [bucket_bounds[i-1], bucket_bounds[i]) for 0 < i < N-1
// [bucket_bounds[i], +infinity) for i == N-1
type DistributionValue_BucketOptions_Explicit struct {
	// The values must be strictly increasing and > 0.
	Bounds               []float64 `protobuf:"fixed64,1,rep,packed,name=bounds,proto3" json:"bounds,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DistributionValue_BucketOptions_Explicit) Reset() {
	*m = DistributionValue_BucketOptions_Explicit{}
}
func (m *DistributionValue_BucketOptions_Explicit) String() string { return proto.CompactTextString(m) }
func (*DistributionValue_BucketOptions_Explicit) ProtoMessage()    {}
func (*DistributionValue_BucketOptions_Explicit) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{15, 0, 0}
}

func (m *DistributionValue_BucketOptions_Explicit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DistributionValue_BucketOptions_Explicit.Unmarshal(m, b)
}
func (m *DistributionValue_BucketOptions_Explicit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DistributionValue_BucketOptions_Explicit.Marshal(b, m, deterministic)
}
func (m *DistributionValue_BucketOptions_Explicit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributionValue_BucketOptions_Explicit.Merge(m, src)
}
func (m *DistributionValue_BucketOptions_Explicit) XXX_Size() int {
	return xxx_messageInfo_DistributionValue_BucketOptions_Explicit.Size(m)
}
func (m *DistributionValue_BucketOptions_Explicit) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributionValue_BucketOptions_Explicit.DiscardUnknown(m)
}

var xxx_messageInfo_DistributionValue_BucketOptions_Explicit proto.InternalMessageInfo

func (m *DistributionValue_BucketOptions_Explicit) GetBounds() []float64 {
	if m != nil {
		return m.Bounds
	}
	return nil
}

type DistributionValue_Bucket struct {
	// The number of values in each bucket of the histogram, as described in
	// bucket_bounds.
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// If the distribution does not have a histogram, then omit this field.
	Exemplar             *DistributionValue_Exemplar `protobuf:"bytes,2,opt,name=exemplar,proto3" json:"exemplar,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *DistributionValue_Bucket) Reset()         { *m = DistributionValue_Bucket{} }
func (m *DistributionValue_Bucket) String() string { return proto.CompactTextString(m) }
func (*DistributionValue_Bucket) ProtoMessage()    {}
func (*DistributionValue_Bucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{15, 1}
}

func (m *DistributionValue_Bucket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DistributionValue_Bucket.Unmarshal(m, b)
}
func (m *DistributionValue_Bucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DistributionValue_Bucket.Marshal(b, m, deterministic)
}
func (m *DistributionValue_Bucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributionValue_Bucket.Merge(m, src)
}
func (m *DistributionValue_Bucket) XXX_Size() int {
	return xxx_messageInfo_DistributionValue_Bucket.Size(m)
}
func (m *DistributionValue_Bucket) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributionValue_Bucket.DiscardUnknown(m)
}

var xxx_messageInfo_DistributionValue_Bucket proto.InternalMessageInfo

func (m *DistributionValue_Bucket) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *DistributionValue_Bucket) GetExemplar() *DistributionValue_Exemplar {
	if m != nil {
		return m.Exemplar
	}
	return nil
}

// Exemplars are example points that may be used to annotate aggregated
// Distribution values. They are metadata that gives information about a
// particular value added to a Distribution bucket.
type DistributionValue_Exemplar struct {
	// Value of the exemplar point. It determines which bucket the exemplar
	// belongs to.
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	// The observation (sampling) time of the above value.
	TimeUnixnano int64 `protobuf:"varint,2,opt,name=time_unixnano,json=timeUnixnano,proto3" json:"time_unixnano,omitempty"`
	// Contextual information about the example value.
	Attachments          map[string]string `protobuf:"bytes,3,rep,name=attachments,proto3" json:"attachments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DistributionValue_Exemplar) Reset()         { *m = DistributionValue_Exemplar{} }
func (m *DistributionValue_Exemplar) String() string { return proto.CompactTextString(m) }
func (*DistributionValue_Exemplar) ProtoMessage()    {}
func (*DistributionValue_Exemplar) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{15, 2}
}

func (m *DistributionValue_Exemplar) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DistributionValue_Exemplar.Unmarshal(m, b)
}
func (m *DistributionValue_Exemplar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DistributionValue_Exemplar.Marshal(b, m, deterministic)
}
func (m *DistributionValue_Exemplar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributionValue_Exemplar.Merge(m, src)
}
func (m *DistributionValue_Exemplar) XXX_Size() int {
	return xxx_messageInfo_DistributionValue_Exemplar.Size(m)
}
func (m *DistributionValue_Exemplar) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributionValue_Exemplar.DiscardUnknown(m)
}

var xxx_messageInfo_DistributionValue_Exemplar proto.InternalMessageInfo

func (m *DistributionValue_Exemplar) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *DistributionValue_Exemplar) GetTimeUnixnano() int64 {
	if m != nil {
		return m.TimeUnixnano
	}
	return 0
}

func (m *DistributionValue_Exemplar) GetAttachments() map[string]string {
	if m != nil {
		return m.Attachments
	}
	return nil
}

// The start_timestamp only applies to the count and sum in the SummaryValue.
type SummaryValue struct {
	// The total number of recorded values since start_time. Optional since
	// some systems don't expose this.
	Count *wrappers.Int64Value `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
	// The total sum of recorded values since start_time. Optional since some
	// systems don't expose this. If count is zero then this field must be zero.
	// This field must be unset if the sum is not available.
	Sum *wrappers.DoubleValue `protobuf:"bytes,2,opt,name=sum,proto3" json:"sum,omitempty"`
	// Values calculated over an arbitrary time window.
	Snapshot             *SummaryValue_Snapshot `protobuf:"bytes,3,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *SummaryValue) Reset()         { *m = SummaryValue{} }
func (m *SummaryValue) String() string { return proto.CompactTextString(m) }
func (*SummaryValue) ProtoMessage()    {}
func (*SummaryValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{16}
}

func (m *SummaryValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SummaryValue.Unmarshal(m, b)
}
func (m *SummaryValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SummaryValue.Marshal(b, m, deterministic)
}
func (m *SummaryValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SummaryValue.Merge(m, src)
}
func (m *SummaryValue) XXX_Size() int {
	return xxx_messageInfo_SummaryValue.Size(m)
}
func (m *SummaryValue) XXX_DiscardUnknown() {
	xxx_messageInfo_SummaryValue.DiscardUnknown(m)
}

var xxx_messageInfo_SummaryValue proto.InternalMessageInfo

func (m *SummaryValue) GetCount() *wrappers.Int64Value {
	if m != nil {
		return m.Count
	}
	return nil
}

func (m *SummaryValue) GetSum() *wrappers.DoubleValue {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *SummaryValue) GetSnapshot() *SummaryValue_Snapshot {
	if m != nil {
		return m.Snapshot
	}
	return nil
}

// The values in this message can be reset at arbitrary unknown times, with
// the requirement that all of them are reset at the same time.
type SummaryValue_Snapshot struct {
	// The number of values in the snapshot. Optional since some systems don't
	// expose this.
	Count *wrappers.Int64Value `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
	// The sum of values in the snapshot. Optional since some systems don't
	// expose this. If count is zero then this field must be zero or not set
	// (if not supported).
	Sum *wrappers.DoubleValue `protobuf:"bytes,2,opt,name=sum,proto3" json:"sum,omitempty"`
	// A list of values at different percentiles of the distribution calculated
	// from the current snapshot. The percentiles must be strictly increasing.
	PercentileValues     []*SummaryValue_Snapshot_ValueAtPercentile `protobuf:"bytes,3,rep,name=percentile_values,json=percentileValues,proto3" json:"percentile_values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *SummaryValue_Snapshot) Reset()         { *m = SummaryValue_Snapshot{} }
func (m *SummaryValue_Snapshot) String() string { return proto.CompactTextString(m) }
func (*SummaryValue_Snapshot) ProtoMessage()    {}
func (*SummaryValue_Snapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{16, 0}
}

func (m *SummaryValue_Snapshot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SummaryValue_Snapshot.Unmarshal(m, b)
}
func (m *SummaryValue_Snapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SummaryValue_Snapshot.Marshal(b, m, deterministic)
}
func (m *SummaryValue_Snapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SummaryValue_Snapshot.Merge(m, src)
}
func (m *SummaryValue_Snapshot) XXX_Size() int {
	return xxx_messageInfo_SummaryValue_Snapshot.Size(m)
}
func (m *SummaryValue_Snapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_SummaryValue_Snapshot.DiscardUnknown(m)
}

var xxx_messageInfo_SummaryValue_Snapshot proto.InternalMessageInfo

func (m *SummaryValue_Snapshot) GetCount() *wrappers.Int64Value {
	if m != nil {
		return m.Count
	}
	return nil
}

func (m *SummaryValue_Snapshot) GetSum() *wrappers.DoubleValue {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *SummaryValue_Snapshot) GetPercentileValues() []*SummaryValue_Snapshot_ValueAtPercentile {
	if m != nil {
		return m.PercentileValues
	}
	return nil
}

// Represents the value at a given percentile of a distribution.
type SummaryValue_Snapshot_ValueAtPercentile struct {
	// The percentile of a distribution. Must be in the interval
	// (0.0, 100.0].
	Percentile float64 `protobuf:"fixed64,1,opt,name=percentile,proto3" json:"percentile,omitempty"`
	// The value at the given percentile of a distribution.
	Value                float64  `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SummaryValue_Snapshot_ValueAtPercentile) Reset() {
	*m = SummaryValue_Snapshot_ValueAtPercentile{}
}
func (m *SummaryValue_Snapshot_ValueAtPercentile) String() string { return proto.CompactTextString(m) }
func (*SummaryValue_Snapshot_ValueAtPercentile) ProtoMessage()    {}
func (*SummaryValue_Snapshot_ValueAtPercentile) Descriptor() ([]byte, []int) {
	return fileDescriptor_9161fdd1e0292445, []int{16, 0, 0}
}

func (m *SummaryValue_Snapshot_ValueAtPercentile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SummaryValue_Snapshot_ValueAtPercentile.Unmarshal(m, b)
}
func (m *SummaryValue_Snapshot_ValueAtPercentile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SummaryValue_Snapshot_ValueAtPercentile.Marshal(b, m, deterministic)
}
func (m *SummaryValue_Snapshot_ValueAtPercentile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SummaryValue_Snapshot_ValueAtPercentile.Merge(m, src)
}
func (m *SummaryValue_Snapshot_ValueAtPercentile) XXX_Size() int {
	return xxx_messageInfo_SummaryValue_Snapshot_ValueAtPercentile.Size(m)
}
func (m *SummaryValue_Snapshot_ValueAtPercentile) XXX_DiscardUnknown() {
	xxx_messageInfo_SummaryValue_Snapshot_ValueAtPercentile.DiscardUnknown(m)
}

var xxx_messageInfo_SummaryValue_Snapshot_ValueAtPercentile proto.InternalMessageInfo

func (m *SummaryValue_Snapshot_ValueAtPercentile) GetPercentile() float64 {
	if m != nil {
		return m.Percentile
	}
	return 0
}

func (m *SummaryValue_Snapshot_ValueAtPercentile) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterEnum("otlp.AttributeKeyValue_ValueType", AttributeKeyValue_ValueType_name, AttributeKeyValue_ValueType_value)
	proto.RegisterEnum("otlp.Span_SpanKind", Span_SpanKind_name, Span_SpanKind_value)
	proto.RegisterEnum("otlp.Span_TimeEvent_MessageEvent_Type", Span_TimeEvent_MessageEvent_Type_name, Span_TimeEvent_MessageEvent_Type_value)
	proto.RegisterEnum("otlp.Span_Link_Type", Span_Link_Type_name, Span_Link_Type_value)
	proto.RegisterEnum("otlp.MetricDescriptor_Type", MetricDescriptor_Type_name, MetricDescriptor_Type_value)
	proto.RegisterEnum("otlp.Point_ValueType", Point_ValueType_name, Point_ValueType_value)
	proto.RegisterType((*ResourceSpans)(nil), "otlp.ResourceSpans")
	proto.RegisterType((*ResourceMetrics)(nil), "otlp.ResourceMetrics")
	proto.RegisterType((*Resource)(nil), "otlp.Resource")
	proto.RegisterType((*AttributeKeyValue)(nil), "otlp.AttributeKeyValue")
	proto.RegisterType((*Process)(nil), "otlp.Process")
	proto.RegisterType((*Span)(nil), "otlp.Span")
	proto.RegisterType((*Span_Tracestate)(nil), "otlp.Span.Tracestate")
	proto.RegisterType((*Span_Tracestate_Entry)(nil), "otlp.Span.Tracestate.Entry")
	proto.RegisterType((*Span_TimeEvent)(nil), "otlp.Span.TimeEvent")
	proto.RegisterType((*Span_TimeEvent_Annotation)(nil), "otlp.Span.TimeEvent.Annotation")
	proto.RegisterType((*Span_TimeEvent_MessageEvent)(nil), "otlp.Span.TimeEvent.MessageEvent")
	proto.RegisterType((*Span_TimeEvents)(nil), "otlp.Span.TimeEvents")
	proto.RegisterType((*Span_Link)(nil), "otlp.Span.Link")
	proto.RegisterType((*Span_Links)(nil), "otlp.Span.Links")
	proto.RegisterType((*Status)(nil), "otlp.Status")
	proto.RegisterType((*StackTrace)(nil), "otlp.StackTrace")
	proto.RegisterType((*StackTrace_StackFrame)(nil), "otlp.StackTrace.StackFrame")
	proto.RegisterType((*StackTrace_StackFrames)(nil), "otlp.StackTrace.StackFrames")
	proto.RegisterType((*Module)(nil), "otlp.Module")
	proto.RegisterType((*Metric)(nil), "otlp.Metric")
	proto.RegisterType((*MetricDescriptor)(nil), "otlp.MetricDescriptor")
	proto.RegisterType((*LabelKey)(nil), "otlp.LabelKey")
	proto.RegisterType((*TimeSeries)(nil), "otlp.TimeSeries")
	proto.RegisterType((*LabelValue)(nil), "otlp.LabelValue")
	proto.RegisterType((*Point)(nil), "otlp.Point")
	proto.RegisterType((*DistributionValue)(nil), "otlp.DistributionValue")
	proto.RegisterType((*DistributionValue_BucketOptions)(nil), "otlp.DistributionValue.BucketOptions")
	proto.RegisterType((*DistributionValue_BucketOptions_Explicit)(nil), "otlp.DistributionValue.BucketOptions.Explicit")
	proto.RegisterType((*DistributionValue_Bucket)(nil), "otlp.DistributionValue.Bucket")
	proto.RegisterType((*DistributionValue_Exemplar)(nil), "otlp.DistributionValue.Exemplar")
	proto.RegisterMapType((map[string]string)(nil), "otlp.DistributionValue.Exemplar.AttachmentsEntry")
	proto.RegisterType((*SummaryValue)(nil), "otlp.SummaryValue")
	proto.RegisterType((*SummaryValue_Snapshot)(nil), "otlp.SummaryValue.Snapshot")
	proto.RegisterType((*SummaryValue_Snapshot_ValueAtPercentile)(nil), "otlp.SummaryValue.Snapshot.ValueAtPercentile")
}

func init() { proto.RegisterFile("telemetry_data.proto", fileDescriptor_9161fdd1e0292445) }

var fileDescriptor_9161fdd1e0292445 = []byte{
	// 2322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x5b, 0x6f, 0x1b, 0xc7,
	0xf5, 0xf7, 0x92, 0xcb, 0xdb, 0x59, 0x4a, 0x5a, 0x4e, 0x64, 0x9b, 0xa6, 0xfc, 0x4f, 0xe8, 0x4d,
	0xe2, 0x08, 0xf9, 0xc3, 0x74, 0x2c, 0xdf, 0x02, 0xb7, 0x8d, 0x41, 0x49, 0x94, 0x45, 0x88, 0xa6,
	0x84, 0xa1, 0x24, 0x34, 0x45, 0x8a, 0xc5, 0x92, 0x3b, 0x92, 0x16, 0xe2, 0x5e, 0xba, 0xb3, 0xab,
	0x46, 0x79, 0xed, 0x53, 0x9f, 0xfa, 0xd0, 0xa2, 0xe8, 0x63, 0xfb, 0x58, 0xf4, 0x3b, 0x14, 0x28,
	0xfa, 0xd2, 0xcf, 0xd0, 0x0f, 0x50, 0x14, 0xf9, 0x14, 0xc5, 0x5c, 0xf6, 0x42, 0x8a, 0xb2, 0xd5,
	0x3c, 0xf4, 0x85, 0x98, 0x39, 0xb7, 0x3d, 0x33, 0xe7, 0xcc, 0xef, 0x9c, 0x43, 0x58, 0x8d, 0xc8,
	0x94, 0xb8, 0x24, 0x0a, 0x2f, 0x4d, 0xdb, 0x8a, 0xac, 0x4e, 0x10, 0xfa, 0x91, 0x8f, 0x54, 0x3f,
	0x9a, 0x06, 0xad, 0x0f, 0x4f, 0x7d, 0xff, 0x74, 0x4a, 0x1e, 0x73, 0xda, 0x38, 0x3e, 0x79, 0xfc,
	0xcb, 0xd0, 0x0a, 0x02, 0x12, 0x52, 0x21, 0x65, 0xfc, 0x1c, 0x96, 0x30, 0xa1, 0x7e, 0x1c, 0x4e,
	0xc8, 0x28, 0xb0, 0x3c, 0x8a, 0x3e, 0x87, 0x6a, 0x28, 0x09, 0x4d, 0xa5, 0xad, 0xac, 0x6b, 0x1b,
	0xcb, 0x1d, 0x66, 0xa9, 0x93, 0x88, 0xe1, 0x94, 0x8f, 0xda, 0x50, 0xa2, 0x4c, 0xa9, 0x59, 0x68,
	0x17, 0xd7, 0xb5, 0x0d, 0x10, 0x82, 0xcc, 0x0e, 0x16, 0x0c, 0x83, 0xc0, 0x4a, 0xa2, 0xf7, 0x96,
	0x44, 0xa1, 0x33, 0xf9, 0xef, 0x3e, 0xf0, 0x10, 0x2a, 0xae, 0x50, 0x93, 0x9f, 0xa8, 0x0b, 0x51,
	0x61, 0x0b, 0x27, 0x4c, 0xe3, 0x37, 0x0a, 0x54, 0x13, 0x75, 0xf4, 0x19, 0x54, 0x82, 0xd0, 0x9f,
	0x10, 0x4a, 0xa5, 0xfd, 0x25, 0xa1, 0x74, 0x20, 0x88, 0x38, 0xe1, 0xa2, 0x07, 0x50, 0xa7, 0x24,
	0xbc, 0x70, 0x26, 0xc4, 0xf4, 0x2c, 0x97, 0x34, 0x8b, 0x6d, 0x65, 0xbd, 0x86, 0x35, 0x49, 0x1b,
	0x5a, 0x2e, 0x41, 0x2f, 0x01, 0xac, 0x28, 0x0a, 0x9d, 0x71, 0x1c, 0x91, 0xc4, 0x87, 0xbb, 0xc2,
	0x5c, 0x37, 0xa1, 0xef, 0x91, 0xcb, 0x63, 0x6b, 0x1a, 0x13, 0x9c, 0x13, 0x35, 0xfe, 0x51, 0x80,
	0xc6, 0x15, 0x09, 0xa4, 0x43, 0xf1, 0x9c, 0x5c, 0x72, 0xb7, 0x6a, 0x98, 0x2d, 0xd1, 0x73, 0x50,
	0xa3, 0xcb, 0x80, 0x34, 0x0b, 0x6d, 0x65, 0x7d, 0x79, 0xe3, 0xc1, 0x35, 0xa6, 0x3b, 0xfc, 0xf7,
	0xf0, 0x32, 0x20, 0x98, 0x8b, 0x73, 0xd7, 0xa3, 0xd0, 0xf1, 0x4e, 0xcd, 0x0b, 0xc6, 0x49, 0x5d,
	0xe7, 0x34, 0xf1, 0xad, 0x35, 0xa8, 0x39, 0x5e, 0x24, 0xf9, 0x6a, 0x5b, 0x59, 0x2f, 0xe2, 0xaa,
	0xe3, 0x45, 0x82, 0xf9, 0x7f, 0x00, 0x63, 0xdf, 0x9f, 0x4a, 0x6e, 0xa9, 0xad, 0xac, 0x57, 0x71,
	0x8d, 0x51, 0x04, 0xfb, 0x01, 0xd4, 0x6d, 0x3f, 0x1e, 0x4f, 0x89, 0x14, 0x28, 0xb7, 0x95, 0x75,
	0x05, 0x6b, 0x82, 0x96, 0x8a, 0x8c, 0x63, 0xcf, 0x0a, 0x2f, 0xa5, 0x48, 0xa5, 0xad, 0xac, 0xd7,
	0xb1, 0x26, 0x68, 0x5c, 0xc4, 0xe8, 0x41, 0x2d, 0xf5, 0x1b, 0x01, 0x94, 0x47, 0x87, 0xb8, 0x3f,
	0x7c, 0xa3, 0xdf, 0x42, 0x55, 0x50, 0x37, 0xf7, 0xf7, 0x07, 0xba, 0x82, 0x6a, 0x50, 0xea, 0x0f,
	0x0f, 0x5f, 0x3c, 0xd3, 0x0b, 0x48, 0x83, 0xca, 0xce, 0x60, 0xbf, 0xcb, 0x36, 0x45, 0x26, 0xbd,
	0xd9, 0x1f, 0x76, 0xf1, 0xd7, 0xba, 0x6a, 0x9c, 0x41, 0x45, 0x86, 0x8e, 0x9d, 0xe9, 0xcc, 0xa7,
	0x91, 0x08, 0x97, 0xb8, 0xc5, 0x2a, 0x23, 0xf0, 0x58, 0xe9, 0x50, 0x0c, 0x1c, 0x9b, 0xdf, 0xe4,
	0x12, 0x66, 0x4b, 0xd4, 0x81, 0x0f, 0x68, 0x64, 0x85, 0x91, 0x19, 0x39, 0x2e, 0x31, 0x63, 0xcf,
	0xf9, 0xd6, 0xb3, 0x3c, 0x9f, 0x5f, 0x56, 0x11, 0x37, 0x38, 0xeb, 0xd0, 0x71, 0xc9, 0x91, 0x64,
	0x18, 0xbf, 0xd2, 0x41, 0x65, 0xd9, 0x8b, 0xee, 0x41, 0x35, 0x0a, 0xad, 0x09, 0x31, 0x1d, 0x9b,
	0x7f, 0xa6, 0x8e, 0x2b, 0x7c, 0xdf, 0xb7, 0xd1, 0x5d, 0xa8, 0xb0, 0xd4, 0x36, 0xe5, 0x97, 0xea,
	0xb8, 0xcc, 0xb6, 0x7d, 0x1b, 0x3d, 0x07, 0xe0, 0x32, 0x34, 0xb2, 0x22, 0x11, 0x10, 0x6d, 0xe3,
	0x76, 0xf6, 0x22, 0x3a, 0x87, 0x29, 0x13, 0xe7, 0x04, 0xd1, 0x27, 0xb0, 0x1c, 0x58, 0x21, 0xf1,
	0x22, 0x33, 0x31, 0xab, 0x72, 0xb3, 0x75, 0x41, 0x1d, 0x09, 0xe3, 0x08, 0x54, 0x7e, 0xe6, 0x12,
	0x3f, 0x33, 0x5f, 0xa3, 0xcf, 0x40, 0x3d, 0x77, 0x3c, 0x9b, 0x07, 0x67, 0x79, 0xe3, 0x83, 0xdc,
	0xa7, 0xd8, 0xcf, 0x9e, 0xe3, 0xd9, 0x98, 0x0b, 0x5c, 0x77, 0x0d, 0x95, 0x6b, 0xae, 0x01, 0x7d,
	0x0e, 0x0d, 0xe2, 0xd9, 0x73, 0xd2, 0x55, 0x2e, 0xbd, 0x42, 0x3c, 0x7b, 0x46, 0x76, 0xf6, 0x81,
	0xd4, 0x6e, 0xfc, 0x40, 0xd0, 0x13, 0xd0, 0x68, 0x64, 0x4d, 0xce, 0x4d, 0x7e, 0x17, 0x4d, 0xe0,
	0xf7, 0xa5, 0xcb, 0x43, 0x30, 0x06, 0xbf, 0x2f, 0x0c, 0x34, 0x5d, 0xa3, 0x17, 0xa0, 0x71, 0x9f,
	0xc8, 0x05, 0xf1, 0x22, 0xda, 0xd4, 0xae, 0x5e, 0xb1, 0xe3, 0x92, 0x1e, 0x67, 0x62, 0x88, 0xd2,
	0x35, 0x7a, 0x08, 0xa5, 0xa9, 0xe3, 0x9d, 0xd3, 0x66, 0x7d, 0xe6, 0x23, 0x4c, 0x63, 0xc0, 0xe8,
	0x58, 0xb0, 0xd1, 0x27, 0x50, 0x66, 0x31, 0x89, 0x69, 0x73, 0x89, 0x0b, 0xd6, 0x53, 0x6f, 0xa2,
	0x98, 0x62, 0xc9, 0x9b, 0xc1, 0xaf, 0xe5, 0xf7, 0xe0, 0xd7, 0x4f, 0x61, 0x8d, 0x5a, 0x2e, 0x31,
	0x25, 0xe2, 0x98, 0x16, 0x35, 0x73, 0xc1, 0x6e, 0xae, 0x70, 0xf5, 0x56, 0x47, 0x60, 0x74, 0x27,
	0xc1, 0xe8, 0xce, 0x66, 0xf2, 0x10, 0xf1, 0x5d, 0xa6, 0x2e, 0xb3, 0xbf, 0x4b, 0x0f, 0xd2, 0x94,
	0x40, 0x3b, 0xa0, 0x4f, 0xce, 0x9c, 0xa9, 0x2d, 0xb2, 0x66, 0xe2, 0xc7, 0x5e, 0xd4, 0xd4, 0xb9,
	0xb9, 0xfb, 0x57, 0xcc, 0x1d, 0xf5, 0xbd, 0xe8, 0xe9, 0x86, 0x30, 0xb8, 0xcc, 0xb5, 0x98, 0x89,
	0x2d, 0xa6, 0xd3, 0x8a, 0x00, 0xb2, 0xc4, 0x44, 0xcf, 0xa1, 0x42, 0xbc, 0x28, 0x74, 0x08, 0x83,
	0x4e, 0x16, 0xca, 0xb5, 0x85, 0x09, 0xdc, 0xe9, 0x79, 0x51, 0x78, 0x89, 0x13, 0xd9, 0xd6, 0x63,
	0x28, 0x71, 0xca, 0x02, 0x7c, 0x5b, 0x85, 0x92, 0xc0, 0x87, 0x02, 0xa7, 0x89, 0x4d, 0xeb, 0x0f,
	0x2a, 0xd4, 0xd2, 0x60, 0xa1, 0x8f, 0x61, 0x69, 0x36, 0xd7, 0x14, 0x9e, 0x6b, 0xf5, 0x28, 0x9f,
	0x68, 0x5d, 0x00, 0xcb, 0xf3, 0xfc, 0xc8, 0x8a, 0x1c, 0xdf, 0xe3, 0xd6, 0xb4, 0x8d, 0x8f, 0x16,
	0xc5, 0xbe, 0xd3, 0x4d, 0xc5, 0x76, 0x6f, 0xe1, 0x9c, 0x12, 0xda, 0x85, 0x25, 0x97, 0x50, 0x6a,
	0x9d, 0xca, 0x14, 0x92, 0x8f, 0xf4, 0xc1, 0x42, 0x2b, 0x6f, 0x85, 0x24, 0xdf, 0xec, 0xde, 0xc2,
	0x75, 0x37, 0xb7, 0x6f, 0x9d, 0x02, 0x64, 0x5f, 0x41, 0x6d, 0xd0, 0x6c, 0x42, 0x27, 0xa1, 0x13,
	0x70, 0xdf, 0xc4, 0xe9, 0xf3, 0xa4, 0x1f, 0x5c, 0x46, 0x5a, 0xff, 0x52, 0xa0, 0x9e, 0xf7, 0x04,
	0xbd, 0x92, 0xf5, 0x42, 0xe1, 0x8f, 0xfe, 0xe1, 0x7b, 0x5d, 0xef, 0xe4, 0x8a, 0xc6, 0x32, 0x14,
	0x24, 0x6a, 0xa9, 0xb8, 0xe0, 0xd8, 0xe8, 0xff, 0xa1, 0x11, 0x7b, 0x13, 0xdf, 0x0d, 0x42, 0x42,
	0x29, 0xb1, 0x4d, 0xea, 0x7c, 0x27, 0x80, 0x4b, 0xc5, 0x7a, 0x9e, 0x31, 0x72, 0xbe, 0x63, 0x68,
	0xb3, 0x32, 0x2f, 0xaa, 0x72, 0xd1, 0xe5, 0x59, 0x41, 0xe3, 0x19, 0xa8, 0x1c, 0xf0, 0x57, 0x41,
	0x3f, 0xfc, 0xfa, 0xa0, 0x67, 0x1e, 0x0d, 0x47, 0x07, 0xbd, 0xad, 0xfe, 0x4e, 0xbf, 0xb7, 0x2d,
	0xa0, 0x7f, 0xd4, 0x1b, 0x1e, 0xea, 0x0a, 0xaa, 0x43, 0x15, 0xf7, 0xb6, 0x7a, 0xfd, 0xe3, 0xde,
	0xb6, 0x5e, 0xd8, 0xac, 0xc8, 0x3c, 0x69, 0xfd, 0x55, 0x01, 0xc8, 0xde, 0x31, 0x7a, 0x0a, 0x90,
	0xbd, 0x79, 0x99, 0x94, 0xab, 0x8b, 0x4e, 0x8d, 0x6b, 0xe9, 0x8b, 0x47, 0xaf, 0xe0, 0x9e, 0x1d,
	0xfa, 0x41, 0x40, 0x6c, 0x33, 0x0b, 0x3f, 0x95, 0xaf, 0x84, 0x9d, 0xbf, 0x84, 0xef, 0x4a, 0x81,
	0x2c, 0x8c, 0x94, 0x3f, 0x08, 0xf4, 0x1a, 0xee, 0x27, 0xba, 0x33, 0xc9, 0x92, 0xa8, 0x17, 0xb9,
	0x7a, 0x62, 0x3f, 0x7f, 0xd5, 0xc2, 0x40, 0xeb, 0x4f, 0x05, 0x50, 0x19, 0xac, 0xfc, 0xa0, 0x22,
	0xb2, 0x2e, 0xc3, 0x5b, 0xe4, 0xe1, 0x5d, 0x9d, 0x43, 0xaa, 0x7c, 0x30, 0x67, 0x53, 0x4a, 0xbd,
	0x39, 0xf0, 0xce, 0xd6, 0xa9, 0xd2, 0x0d, 0xeb, 0x94, 0xb1, 0xf7, 0xce, 0xb0, 0xde, 0x86, 0xc6,
	0xd6, 0x6e, 0x7f, 0xb0, 0x6d, 0x0e, 0xfa, 0xc3, 0xbd, 0xde, 0xb6, 0x39, 0x3a, 0xe8, 0x0e, 0x75,
	0x05, 0xdd, 0x01, 0x74, 0xd0, 0xc5, 0xbd, 0xe1, 0xe1, 0x0c, 0xbd, 0xd0, 0xfa, 0x06, 0x4a, 0x1c,
	0x79, 0xd1, 0xc7, 0xa0, 0x32, 0xec, 0x95, 0x81, 0x5d, 0x99, 0x3b, 0x2f, 0xe6, 0x4c, 0x56, 0xbf,
	0x92, 0x90, 0x70, 0xa0, 0x9e, 0x09, 0x64, 0x43, 0xb2, 0xb8, 0x3d, 0x1e, 0x01, 0xe3, 0x27, 0x50,
	0x4d, 0x2a, 0x20, 0xba, 0x07, 0xb7, 0xd9, 0x37, 0xcd, 0xbd, 0xfe, 0x70, 0x7b, 0xce, 0x67, 0xd6,
	0x91, 0xf4, 0xf0, 0x71, 0x0f, 0xeb, 0x0a, 0x5b, 0x6f, 0x0d, 0xfa, 0x2c, 0x31, 0x0b, 0xc6, 0x0b,
	0x28, 0x0b, 0xc8, 0x67, 0x55, 0x77, 0xe2, 0xdb, 0xe2, 0xb1, 0x95, 0x30, 0x5f, 0xa3, 0x26, 0x6b,
	0x49, 0x79, 0xd0, 0x25, 0xa4, 0x25, 0x5b, 0xe3, 0xb7, 0x2a, 0x40, 0x56, 0xb9, 0xd0, 0x6b, 0xd6,
	0xa2, 0xb1, 0x02, 0x77, 0x12, 0x5a, 0x2e, 0x49, 0x7a, 0xd1, 0xfb, 0xf3, 0x15, 0x4e, 0x2c, 0x77,
	0xb8, 0x0c, 0x16, 0x25, 0x51, 0x6c, 0xd0, 0x23, 0x5e, 0xb6, 0x93, 0x0a, 0x69, 0x9e, 0x59, 0xf4,
	0xcc, 0x4c, 0xdf, 0xaf, 0x9e, 0xd5, 0xc5, 0x5d, 0x8b, 0x9e, 0xf5, 0xed, 0xd6, 0x1f, 0x0b, 0xf2,
	0xf3, 0x5c, 0x9d, 0x81, 0xea, 0x49, 0xec, 0x4d, 0x58, 0x66, 0xe7, 0xdb, 0xa5, 0x7a, 0x42, 0xe4,
	0x2d, 0xd3, 0x33, 0xb8, 0xe3, 0x87, 0xce, 0xa9, 0xe3, 0x59, 0x53, 0x73, 0x56, 0x5a, 0x9c, 0x6d,
	0x35, 0xe1, 0xee, 0xe4, 0xb5, 0xd6, 0xa0, 0x76, 0xe2, 0x4c, 0x67, 0x9a, 0xe6, 0x2a, 0x23, 0x70,
	0xe6, 0x47, 0xa0, 0x4d, 0x1d, 0x8f, 0x98, 0x5e, 0xec, 0x8e, 0x49, 0x28, 0x1b, 0x4f, 0x60, 0xa4,
	0x21, 0xa7, 0x30, 0xc7, 0x26, 0xfe, 0x34, 0x76, 0xbd, 0x44, 0xa4, 0x24, 0xd0, 0x5e, 0x10, 0xa5,
	0xd0, 0x23, 0xd0, 0xa6, 0xbe, 0x65, 0x9b, 0xae, 0x6f, 0xc7, 0x53, 0xd1, 0x7f, 0x66, 0xcd, 0x3f,
	0xa7, 0x61, 0x60, 0x02, 0x62, 0x8d, 0x3e, 0x85, 0x65, 0x51, 0x71, 0xcd, 0x0b, 0x12, 0x52, 0x06,
	0xc2, 0x15, 0xee, 0xd6, 0x92, 0xa0, 0x1e, 0x0b, 0x62, 0x2b, 0x04, 0x2d, 0x77, 0xdb, 0xe8, 0x09,
	0x94, 0x78, 0x6c, 0xe6, 0x6a, 0xdd, 0xa2, 0xd0, 0x60, 0x21, 0x89, 0xbe, 0x80, 0xd5, 0x24, 0x15,
	0x45, 0x58, 0x67, 0x72, 0x11, 0x49, 0x9e, 0xb0, 0x2f, 0x92, 0xf1, 0x47, 0x50, 0x96, 0x4e, 0xde,
	0x81, 0xb2, 0x3c, 0x8e, 0x08, 0x85, 0xdc, 0x31, 0x9c, 0x18, 0xc7, 0xac, 0x94, 0xcb, 0xe0, 0xd6,
	0x70, 0x85, 0xef, 0xfb, 0xb6, 0xf1, 0x17, 0x05, 0xca, 0x62, 0xd6, 0x41, 0x5b, 0xd0, 0x10, 0xd3,
	0x8e, 0x99, 0x14, 0x16, 0x3f, 0x94, 0x39, 0x75, 0x27, 0x3f, 0x14, 0x6d, 0xa7, 0x5c, 0xac, 0xbb,
	0x73, 0x14, 0xf4, 0x85, 0x40, 0x53, 0x4a, 0x78, 0x89, 0x17, 0x75, 0x48, 0xb6, 0x43, 0x0c, 0x48,
	0x47, 0x9c, 0x8e, 0x73, 0x32, 0x33, 0xdd, 0x4e, 0xf1, 0xdd, 0xdd, 0x8e, 0xf1, 0xef, 0x02, 0xe8,
	0xf3, 0x4e, 0xa4, 0x9d, 0xab, 0x92, 0xeb, 0x5c, 0xe7, 0x0a, 0x66, 0xe1, 0x6a, 0xc1, 0x44, 0xa0,
	0xc6, 0x9e, 0x13, 0xc9, 0xec, 0xe2, 0x6b, 0xf4, 0x58, 0x62, 0xa3, 0xca, 0xb1, 0x71, 0x6d, 0xf1,
	0xa1, 0xf3, 0x10, 0xf9, 0x08, 0x60, 0x6a, 0x8d, 0xc9, 0xd4, 0x3c, 0x27, 0x97, 0xb4, 0x59, 0xe2,
	0xa7, 0x95, 0xde, 0x0f, 0x18, 0x7d, 0x8f, 0x5c, 0xe2, 0xda, 0x54, 0xae, 0xa8, 0xf1, 0x67, 0x45,
	0x42, 0xdc, 0x0a, 0x68, 0xb3, 0x48, 0xb1, 0x02, 0xda, 0x9b, 0xee, 0xd1, 0x9b, 0x9e, 0x29, 0x66,
	0x15, 0x05, 0xe9, 0x50, 0x17, 0x84, 0xed, 0xfd, 0xa3, 0xcd, 0x41, 0x4f, 0x2f, 0x30, 0xa4, 0x93,
	0x94, 0x3e, 0x1b, 0x73, 0x36, 0x8f, 0x0e, 0xfb, 0xfb, 0x43, 0xbd, 0xc8, 0xe0, 0x72, 0xeb, 0xe8,
	0xed, 0xd1, 0xa0, 0x7b, 0xd8, 0x3f, 0x4e, 0xf4, 0x55, 0x0e, 0x97, 0x19, 0x55, 0x1a, 0x29, 0xa1,
	0x35, 0xb8, 0x9b, 0x27, 0xe7, 0x2d, 0x95, 0xd9, 0x7c, 0x34, 0x3a, 0x7a, 0xfb, 0x96, 0xcd, 0x44,
	0x15, 0xe3, 0x2b, 0xa8, 0x26, 0x47, 0x58, 0xd0, 0x74, 0xbd, 0xf7, 0x7e, 0x8d, 0xdf, 0xcb, 0x2a,
	0x2b, 0x22, 0x7e, 0xdd, 0x84, 0xa0, 0x5c, 0x37, 0x21, 0x3c, 0x85, 0xba, 0xb8, 0x59, 0x5e, 0xb3,
	0xe7, 0x32, 0x89, 0x3b, 0x26, 0xea, 0x8e, 0x36, 0x4d, 0xd7, 0x0c, 0xeb, 0xcb, 0x81, 0xef, 0xb0,
	0xce, 0xbd, 0xc8, 0xc5, 0x35, 0x39, 0x96, 0x33, 0x1a, 0x96, 0x2c, 0xe3, 0x35, 0x40, 0xa6, 0x9f,
	0x75, 0x8f, 0x4a, 0xae, 0x7b, 0xe4, 0x53, 0xa0, 0x45, 0xcd, 0xac, 0xaf, 0xac, 0xe2, 0xea, 0x99,
	0x45, 0xc5, 0xd0, 0xf9, 0x7d, 0x01, 0x4a, 0xdc, 0xe4, 0xcd, 0xda, 0xca, 0x67, 0x00, 0xdc, 0x8e,
	0x99, 0x9b, 0xc2, 0x6f, 0xe7, 0x1c, 0xcb, 0x4d, 0xde, 0xb5, 0x8b, 0x74, 0x98, 0xfd, 0x08, 0x34,
	0xc7, 0x8b, 0x5e, 0x3c, 0xcb, 0x4d, 0xdf, 0x45, 0x0c, 0x9c, 0xb4, 0x78, 0x80, 0x56, 0xaf, 0x0e,
	0xd0, 0x3b, 0x80, 0x6c, 0x87, 0x8a, 0xb2, 0xcc, 0x60, 0x37, 0x1b, 0xc5, 0xd3, 0x42, 0xbe, 0x9d,
	0xe3, 0x8b, 0x0b, 0x6d, 0xd8, 0xf3, 0x24, 0xf4, 0x12, 0x96, 0x68, 0xec, 0xba, 0xd9, 0x24, 0x2e,
	0xc0, 0x12, 0x49, 0x34, 0x13, 0x2c, 0xa1, 0x5d, 0xa7, 0xb9, 0x9d, 0xd1, 0xcd, 0x8f, 0xe7, 0xe9,
	0x20, 0xce, 0xeb, 0xa2, 0xcc, 0x48, 0x9e, 0xe8, 0x33, 0x69, 0x58, 0xc8, 0xa7, 0x61, 0xd1, 0xf8,
	0x7b, 0x09, 0x1a, 0x57, 0x9c, 0x64, 0x51, 0x13, 0xa8, 0x28, 0x2e, 0x5c, 0x6c, 0x58, 0x9a, 0xd2,
	0xd8, 0xe5, 0x57, 0xac, 0x60, 0xb6, 0x44, 0x2f, 0xa1, 0x49, 0x63, 0xd7, 0xf4, 0x4f, 0x4c, 0xfa,
	0x8b, 0xd8, 0x0a, 0x89, 0x6d, 0xda, 0xe4, 0xc2, 0x11, 0x0d, 0x7e, 0x91, 0x8b, 0xdd, 0xa6, 0xb1,
	0xbb, 0x7f, 0x32, 0x12, 0xdc, 0xed, 0x84, 0x89, 0x06, 0xb0, 0x3c, 0x8e, 0x27, 0xe7, 0x24, 0x32,
	0x7d, 0x9e, 0xce, 0x94, 0xdf, 0xaf, 0xb6, 0xf1, 0xe9, 0x35, 0xd7, 0xd6, 0xd9, 0xe4, 0xd2, 0xfb,
	0x42, 0x18, 0x2f, 0x8d, 0xf3, 0x5b, 0xf4, 0x25, 0x54, 0x04, 0x21, 0xc1, 0x88, 0x0f, 0xdf, 0x6d,
	0x06, 0x27, 0xe2, 0xad, 0x5f, 0x2b, 0xb0, 0x34, 0x63, 0x1a, 0x0d, 0xa0, 0x4a, 0xbe, 0x0d, 0xa6,
	0xce, 0xc4, 0x89, 0x24, 0x38, 0x77, 0x6e, 0xe4, 0x53, 0xa7, 0x27, 0xb5, 0x76, 0x6f, 0xe1, 0xd4,
	0x42, 0xcb, 0x80, 0x6a, 0x42, 0x67, 0xd5, 0x63, 0xec, 0xc7, 0x9e, 0x2d, 0x26, 0x33, 0x05, 0xcb,
	0xdd, 0x66, 0x59, 0xa0, 0x62, 0xeb, 0x1b, 0x28, 0x0b, 0x8b, 0xd7, 0x5c, 0xff, 0x8f, 0x99, 0x67,
	0xc4, 0x0d, 0xa6, 0x56, 0x28, 0xa7, 0xa7, 0xf6, 0x75, 0x9e, 0xf5, 0xa4, 0x1c, 0x4e, 0x35, 0x5a,
	0xff, 0x54, 0x98, 0x2b, 0x62, 0x33, 0xfb, 0x2a, 0x95, 0xe4, 0x55, 0x5e, 0x79, 0x6e, 0x85, 0x05,
	0xcf, 0x6d, 0x04, 0x9a, 0x15, 0x45, 0xd6, 0xe4, 0xcc, 0x25, 0x19, 0x10, 0x3c, 0x79, 0x9f, 0x23,
	0xac, 0xa3, 0x4d, 0x74, 0xc4, 0xe8, 0x99, 0xb7, 0xd2, 0xfa, 0x0a, 0xf4, 0x79, 0x81, 0x9b, 0x4e,
	0xa2, 0xaf, 0x0a, 0x5f, 0x2a, 0xc6, 0xdf, 0x8a, 0x50, 0xcf, 0xbf, 0x13, 0xd6, 0x18, 0x64, 0x37,
	0xc8, 0x1a, 0x83, 0xf9, 0x89, 0xba, 0x9f, 0xbe, 0xf4, 0xe4, 0x7a, 0x3b, 0x59, 0x76, 0x2f, 0x1a,
	0xc1, 0xb7, 0xb3, 0x87, 0x9f, 0xe4, 0x7e, 0x95, 0x7a, 0x56, 0x40, 0xcf, 0xfc, 0x64, 0x0c, 0x5d,
	0xbb, 0xfa, 0x60, 0x3b, 0x23, 0x29, 0x82, 0x53, 0xe1, 0xd6, 0xef, 0x0a, 0x50, 0x4d, 0xc8, 0xff,
	0x0b, 0x47, 0x7f, 0x06, 0x8d, 0x80, 0x84, 0x13, 0xe2, 0x45, 0x4e, 0x82, 0x66, 0x49, 0xdc, 0x1e,
	0xbd, 0xc3, 0x63, 0x81, 0x9b, 0xdd, 0xe8, 0x20, 0xd5, 0xc5, 0x7a, 0x66, 0x47, 0x54, 0x84, 0x56,
	0x1f, 0x1a, 0x57, 0xc4, 0xd0, 0x87, 0x00, 0x99, 0xa0, 0x4c, 0xb1, 0x1c, 0x65, 0x36, 0x8e, 0x49,
	0xf6, 0x6d, 0xee, 0xc2, 0x7d, 0xc7, 0xef, 0xf8, 0x01, 0xf1, 0x26, 0xc4, 0xa3, 0xb1, 0xfc, 0x7b,
	0xbb, 0xc3, 0x5b, 0xe7, 0xce, 0xc5, 0x93, 0x4d, 0xf1, 0x2f, 0xc7, 0x01, 0x23, 0x1e, 0x28, 0xdf,
	0x17, 0xee, 0xed, 0x07, 0xc4, 0xdb, 0x12, 0x92, 0x9c, 0x28, 0xc6, 0x9e, 0xce, 0xf1, 0x93, 0x71,
	0x99, 0x6b, 0x3e, 0xfd, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xef, 0xe1, 0x11, 0xd6, 0x56, 0x17,
	0x00, 0x00,
}
