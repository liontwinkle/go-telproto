// Code generated by protoc-gen-go. DO NOT EDIT.
// source: metric_data.proto

package otlp

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Type of metric. It describes how the data is reported.
//
// A gauge is an instantaneous measurement of a value.
//
// A counter/cumulative measurement is a value accumulated over a time
// interval. In a time series, cumulative measurements should have the same
// start time, increasing values and increasing end times, until an event
// resets the cumulative value to zero and sets a new start time for the
// following points.
type MetricDescriptor_Type int32

const (
	// Do not use this default value.
	MetricDescriptor_UNSPECIFIED MetricDescriptor_Type = 0
	// Integer gauge. The value can go both up and down over time.
	// Corresponding value is stored in Point.int64_value.
	MetricDescriptor_GAUGE_INT64 MetricDescriptor_Type = 1
	// Floating point gauge. The value can go both up and down over time.
	// Corresponding value is stored in Point.double_value.
	MetricDescriptor_GAUGE_DOUBLE MetricDescriptor_Type = 2
	// Histogram gauge measurement.
	// Used in scenarios like a snapshot of time the current items in a queue
	// have spent there.
	// Corresponding value is stored in Point.histogram_value. The count and sum of the
	// histogram can go both up and down over time. Recorded values are always >= 0.
	MetricDescriptor_GAUGE_HISTOGRAM MetricDescriptor_Type = 3
	// Integer counter measurement. The value cannot decrease; if value is reset then
	// Point.start_time_unixnano should also be reset.
	// Corresponding value is stored in Point.int64_value.
	MetricDescriptor_COUNTER_INT64 MetricDescriptor_Type = 4
	// Floating point counter measurement. The value cannot decrease, if
	// resets then the start_time should also be reset. Recorded values are
	// always >= 0.
	// Corresponding value is stored in Point.double_value.
	MetricDescriptor_COUNTER_DOUBLE MetricDescriptor_Type = 5
	// Histogram cumulative measurement.
	// Corresponding value is stored in Point.histogram_value. The count and sum of the
	// histogram cannot decrease; if values are reset then Point.start_time_unixnano
	// should also be reset.
	MetricDescriptor_CUMULATIVE_HISTOGRAM MetricDescriptor_Type = 6
	// Summary value. Some frameworks implemented Histograms as a summary of observations
	// (usually things like request durations and response sizes). While it
	// also provides a total count of observations and a sum of all observed
	// values, it calculates configurable percentiles over a sliding time
	// window.
	// Corresponding value is stored in Point.summary_value.
	MetricDescriptor_SUMMARY MetricDescriptor_Type = 7
)

var MetricDescriptor_Type_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "GAUGE_INT64",
	2: "GAUGE_DOUBLE",
	3: "GAUGE_HISTOGRAM",
	4: "COUNTER_INT64",
	5: "COUNTER_DOUBLE",
	6: "CUMULATIVE_HISTOGRAM",
	7: "SUMMARY",
}

var MetricDescriptor_Type_value = map[string]int32{
	"UNSPECIFIED":          0,
	"GAUGE_INT64":          1,
	"GAUGE_DOUBLE":         2,
	"GAUGE_HISTOGRAM":      3,
	"COUNTER_INT64":        4,
	"COUNTER_DOUBLE":       5,
	"CUMULATIVE_HISTOGRAM": 6,
	"SUMMARY":              7,
}

func (x MetricDescriptor_Type) String() string {
	return proto.EnumName(MetricDescriptor_Type_name, int32(x))
}

func (MetricDescriptor_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9a96a8671bd66caf, []int{2, 0}
}

// ValueType is the enumeration of possible types that Point's value can have.
type Point_ValueType int32

const (
	Point_INT64     Point_ValueType = 0
	Point_DOUBLE    Point_ValueType = 1
	Point_HISTOGRAM Point_ValueType = 2
	Point_SUMMARY   Point_ValueType = 3
)

var Point_ValueType_name = map[int32]string{
	0: "INT64",
	1: "DOUBLE",
	2: "HISTOGRAM",
	3: "SUMMARY",
}

var Point_ValueType_value = map[string]int32{
	"INT64":     0,
	"DOUBLE":    1,
	"HISTOGRAM": 2,
	"SUMMARY":   3,
}

func (x Point_ValueType) String() string {
	return proto.EnumName(Point_ValueType_name, int32(x))
}

func (Point_ValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9a96a8671bd66caf, []int{5, 0}
}

// A collection of metrics from a Resource.
type ResourceMetrics struct {
	Resource             *Resource `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	Metrics              []*Metric `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ResourceMetrics) Reset()         { *m = ResourceMetrics{} }
func (m *ResourceMetrics) String() string { return proto.CompactTextString(m) }
func (*ResourceMetrics) ProtoMessage()    {}
func (*ResourceMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a96a8671bd66caf, []int{0}
}

func (m *ResourceMetrics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceMetrics.Unmarshal(m, b)
}
func (m *ResourceMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceMetrics.Marshal(b, m, deterministic)
}
func (m *ResourceMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceMetrics.Merge(m, src)
}
func (m *ResourceMetrics) XXX_Size() int {
	return xxx_messageInfo_ResourceMetrics.Size(m)
}
func (m *ResourceMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceMetrics proto.InternalMessageInfo

func (m *ResourceMetrics) GetResource() *Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *ResourceMetrics) GetMetrics() []*Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

// Defines a Metric which has one or more timeseries.
type Metric struct {
	// metric_descriptor describes the Metric.
	MetricDescriptor *MetricDescriptor `protobuf:"bytes,1,opt,name=metric_descriptor,json=metricDescriptor,proto3" json:"metric_descriptor,omitempty"`
	// timeseries is one or more TimeSeries for a single metric, where each timeseries has
	// one or more points.
	Timeseries []*TimeSeries `protobuf:"bytes,2,rep,name=timeseries,proto3" json:"timeseries,omitempty"`
	// resource that is associated with this metric. Optional. If not set, this metric
	// should be part of a ResourceMetrics message that does include the resource
	// information, unless resource information is unknown.
	Resource             *Resource `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Metric) Reset()         { *m = Metric{} }
func (m *Metric) String() string { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()    {}
func (*Metric) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a96a8671bd66caf, []int{1}
}

func (m *Metric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metric.Unmarshal(m, b)
}
func (m *Metric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metric.Marshal(b, m, deterministic)
}
func (m *Metric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metric.Merge(m, src)
}
func (m *Metric) XXX_Size() int {
	return xxx_messageInfo_Metric.Size(m)
}
func (m *Metric) XXX_DiscardUnknown() {
	xxx_messageInfo_Metric.DiscardUnknown(m)
}

var xxx_messageInfo_Metric proto.InternalMessageInfo

func (m *Metric) GetMetricDescriptor() *MetricDescriptor {
	if m != nil {
		return m.MetricDescriptor
	}
	return nil
}

func (m *Metric) GetTimeseries() []*TimeSeries {
	if m != nil {
		return m.Timeseries
	}
	return nil
}

func (m *Metric) GetResource() *Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

// Defines a metric type and its schema.
type MetricDescriptor struct {
	// name of the metric, including its DNS name prefix. It must be unique.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// description of the metric, which can be used in documentation.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// unit in which the metric value is reported. Follows the format
	// described by http://unitsofmeasure.org/ucum.html.
	Unit string                `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit,omitempty"`
	Type MetricDescriptor_Type `protobuf:"varint,4,opt,name=type,proto3,enum=otlp.MetricDescriptor_Type" json:"type,omitempty"`
	// The label keys associated with the metric descriptor.
	LabelKeys            []string `protobuf:"bytes,5,rep,name=label_keys,json=labelKeys,proto3" json:"label_keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetricDescriptor) Reset()         { *m = MetricDescriptor{} }
func (m *MetricDescriptor) String() string { return proto.CompactTextString(m) }
func (*MetricDescriptor) ProtoMessage()    {}
func (*MetricDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a96a8671bd66caf, []int{2}
}

func (m *MetricDescriptor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricDescriptor.Unmarshal(m, b)
}
func (m *MetricDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricDescriptor.Marshal(b, m, deterministic)
}
func (m *MetricDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricDescriptor.Merge(m, src)
}
func (m *MetricDescriptor) XXX_Size() int {
	return xxx_messageInfo_MetricDescriptor.Size(m)
}
func (m *MetricDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_MetricDescriptor proto.InternalMessageInfo

func (m *MetricDescriptor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetricDescriptor) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MetricDescriptor) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *MetricDescriptor) GetType() MetricDescriptor_Type {
	if m != nil {
		return m.Type
	}
	return MetricDescriptor_UNSPECIFIED
}

func (m *MetricDescriptor) GetLabelKeys() []string {
	if m != nil {
		return m.LabelKeys
	}
	return nil
}

// TimeSeries is a collection of data points that describes the time-varying values
// of a metric.
type TimeSeries struct {
	// The set of label values that uniquely identify this timeseries. Applies to
	// all points. The order of label values must match that of label keys in the
	// metric descriptor.
	LabelValues []*LabelValue `protobuf:"bytes,1,rep,name=label_values,json=labelValues,proto3" json:"label_values,omitempty"`
	// The data points of this timeseries. Point.value type MUST match the
	// MetricDescriptor.type (see matching types in MetricDescriptor.Type comments).
	Points               []*Point `protobuf:"bytes,2,rep,name=points,proto3" json:"points,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimeSeries) Reset()         { *m = TimeSeries{} }
func (m *TimeSeries) String() string { return proto.CompactTextString(m) }
func (*TimeSeries) ProtoMessage()    {}
func (*TimeSeries) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a96a8671bd66caf, []int{3}
}

func (m *TimeSeries) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeSeries.Unmarshal(m, b)
}
func (m *TimeSeries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeSeries.Marshal(b, m, deterministic)
}
func (m *TimeSeries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeSeries.Merge(m, src)
}
func (m *TimeSeries) XXX_Size() int {
	return xxx_messageInfo_TimeSeries.Size(m)
}
func (m *TimeSeries) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeSeries.DiscardUnknown(m)
}

var xxx_messageInfo_TimeSeries proto.InternalMessageInfo

func (m *TimeSeries) GetLabelValues() []*LabelValue {
	if m != nil {
		return m.LabelValues
	}
	return nil
}

func (m *TimeSeries) GetPoints() []*Point {
	if m != nil {
		return m.Points
	}
	return nil
}

// LabelValue is a value of a label.
type LabelValue struct {
	// The value for the label.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// If true the value field is ignored and considered not set.
	// This is used to differentiate a missing label from an empty string.
	ValueUnspecified     bool     `protobuf:"varint,2,opt,name=value_unspecified,json=valueUnspecified,proto3" json:"value_unspecified,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LabelValue) Reset()         { *m = LabelValue{} }
func (m *LabelValue) String() string { return proto.CompactTextString(m) }
func (*LabelValue) ProtoMessage()    {}
func (*LabelValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a96a8671bd66caf, []int{4}
}

func (m *LabelValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LabelValue.Unmarshal(m, b)
}
func (m *LabelValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LabelValue.Marshal(b, m, deterministic)
}
func (m *LabelValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelValue.Merge(m, src)
}
func (m *LabelValue) XXX_Size() int {
	return xxx_messageInfo_LabelValue.Size(m)
}
func (m *LabelValue) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelValue.DiscardUnknown(m)
}

var xxx_messageInfo_LabelValue proto.InternalMessageInfo

func (m *LabelValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *LabelValue) GetValueUnspecified() bool {
	if m != nil {
		return m.ValueUnspecified
	}
	return false
}

// Point is a timestamped measurement.
type Point struct {
	// start_time_unixnano is the time when the cumulative value was reset to zero.
	// Must be present for counter/cumulative metrics. The cumulative value is over the time
	// interval (start_time_unixnano, timestamp_unixnano].
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	StartTimeUnixnano int64 `protobuf:"varint,1,opt,name=start_time_unixnano,json=startTimeUnixnano,proto3" json:"start_time_unixnano,omitempty"`
	// start_time_unspecified must be set to true if start_time_unixnano value is unspecified.
	// In that case the backend can use the previous recorded value for start_time_unixnano.
	StartTimeUnspecified bool `protobuf:"varint,2,opt,name=start_time_unspecified,json=startTimeUnspecified,proto3" json:"start_time_unspecified,omitempty"`
	// timestamp_unixnano is the moment when this point was recorded.
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	TimestampUnixnano int64 `protobuf:"varint,3,opt,name=timestamp_unixnano,json=timestampUnixnano,proto3" json:"timestamp_unixnano,omitempty"`
	// timestamp_unspecified must be set to true if timestamp_unixnano value is unspecified.
	// In that case timestamp_unixnano value will be decided by the backend.
	TimestampUnspecified bool `protobuf:"varint,4,opt,name=timestamp_unspecified,json=timestampUnspecified,proto3" json:"timestamp_unspecified,omitempty"`
	// type of the value.
	Type Point_ValueType `protobuf:"varint,5,opt,name=type,proto3,enum=otlp.Point_ValueType" json:"type,omitempty"`
	// A 64-bit integer.
	Int64Value int64 `protobuf:"varint,6,opt,name=int64_value,json=int64Value,proto3" json:"int64_value,omitempty"`
	// A 64-bit double-precision floating-point number.
	DoubleValue float64 `protobuf:"fixed64,7,opt,name=double_value,json=doubleValue,proto3" json:"double_value,omitempty"`
	// A histogram value.
	HistogramValue *HistogramValue `protobuf:"bytes,8,opt,name=histogram_value,json=histogramValue,proto3" json:"histogram_value,omitempty"`
	// A summary value. This is not recommended, since it cannot be aggregated.
	SummaryValue         *SummaryValue `protobuf:"bytes,9,opt,name=summary_value,json=summaryValue,proto3" json:"summary_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Point) Reset()         { *m = Point{} }
func (m *Point) String() string { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()    {}
func (*Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a96a8671bd66caf, []int{5}
}

func (m *Point) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Point.Unmarshal(m, b)
}
func (m *Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Point.Marshal(b, m, deterministic)
}
func (m *Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Point.Merge(m, src)
}
func (m *Point) XXX_Size() int {
	return xxx_messageInfo_Point.Size(m)
}
func (m *Point) XXX_DiscardUnknown() {
	xxx_messageInfo_Point.DiscardUnknown(m)
}

var xxx_messageInfo_Point proto.InternalMessageInfo

func (m *Point) GetStartTimeUnixnano() int64 {
	if m != nil {
		return m.StartTimeUnixnano
	}
	return 0
}

func (m *Point) GetStartTimeUnspecified() bool {
	if m != nil {
		return m.StartTimeUnspecified
	}
	return false
}

func (m *Point) GetTimestampUnixnano() int64 {
	if m != nil {
		return m.TimestampUnixnano
	}
	return 0
}

func (m *Point) GetTimestampUnspecified() bool {
	if m != nil {
		return m.TimestampUnspecified
	}
	return false
}

func (m *Point) GetType() Point_ValueType {
	if m != nil {
		return m.Type
	}
	return Point_INT64
}

func (m *Point) GetInt64Value() int64 {
	if m != nil {
		return m.Int64Value
	}
	return 0
}

func (m *Point) GetDoubleValue() float64 {
	if m != nil {
		return m.DoubleValue
	}
	return 0
}

func (m *Point) GetHistogramValue() *HistogramValue {
	if m != nil {
		return m.HistogramValue
	}
	return nil
}

func (m *Point) GetSummaryValue() *SummaryValue {
	if m != nil {
		return m.SummaryValue
	}
	return nil
}

// Histogram contains summary statistics for a population of values. It may
// optionally contain the distribution of those values across a set of buckets.
type HistogramValue struct {
	// count is the number of values in the population. Must be non-negative. This value
	// must be equal to the sum of the "count" fields in buckets if a histogram is
	// provided.
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// sum of the values in the population. If count is zero then this field
	// must be zero. This value must be equal to the sum of the "sum" fields in buckets if
	// a histogram is provided.
	Sum float64 `protobuf:"fixed64,2,opt,name=sum,proto3" json:"sum,omitempty"`
	// bucket_bounds is an optional field. If present specifies buckets with explicitly
	// defined bounds. The bucket boundaries are described by this field.
	//
	// This defines size(bucket_bounds) + 1 (= N) buckets. The boundaries for bucket
	// at index i are:
	//
	// [0, bucket_bounds[i]) for i == 0
	// [bucket_bounds[i-1], bucket_bounds[i]) for 0 < i < N-1
	// [bucket_bounds[i], +infinity) for i == N-1
	// The values in bucket_bounds array must be strictly increasing and > 0.
	// Don't change bucket boundaries within a TimeSeries if your backend doesn't
	// support this.
	// If bucket_bounds field is unspecified then bucket bounds are not explicitly defined.
	// TODO: If OpenMetrics decides to support (a, b] intervals we should add
	// support for these by defining a boolean value which decides what type of
	// intervals to use.
	BucketBounds []float64 `protobuf:"fixed64,3,rep,packed,name=bucket_bounds,json=bucketBounds,proto3" json:"bucket_bounds,omitempty"`
	// buckets is an optional field contains the values of histogram for each bucket.
	//
	// The sum of the values in the buckets "count" field must equal the value in the
	// count field of HistogramValue.
	//
	// The number of elements in buckets array must be by one greater than the
	// number of elements in bucket_bounds array.
	Buckets              []*HistogramValue_Bucket `protobuf:"bytes,4,rep,name=buckets,proto3" json:"buckets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *HistogramValue) Reset()         { *m = HistogramValue{} }
func (m *HistogramValue) String() string { return proto.CompactTextString(m) }
func (*HistogramValue) ProtoMessage()    {}
func (*HistogramValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a96a8671bd66caf, []int{6}
}

func (m *HistogramValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HistogramValue.Unmarshal(m, b)
}
func (m *HistogramValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HistogramValue.Marshal(b, m, deterministic)
}
func (m *HistogramValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistogramValue.Merge(m, src)
}
func (m *HistogramValue) XXX_Size() int {
	return xxx_messageInfo_HistogramValue.Size(m)
}
func (m *HistogramValue) XXX_DiscardUnknown() {
	xxx_messageInfo_HistogramValue.DiscardUnknown(m)
}

var xxx_messageInfo_HistogramValue proto.InternalMessageInfo

func (m *HistogramValue) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *HistogramValue) GetSum() float64 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func (m *HistogramValue) GetBucketBounds() []float64 {
	if m != nil {
		return m.BucketBounds
	}
	return nil
}

func (m *HistogramValue) GetBuckets() []*HistogramValue_Bucket {
	if m != nil {
		return m.Buckets
	}
	return nil
}

// Bucket contains values for a bucket.
type HistogramValue_Bucket struct {
	// The number of values in each bucket of the histogram, as described in
	// bucket_bounds.
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// Value of the exemplar point. It determines which bucket the exemplar belongs to.
	ExemplarValue float64 `protobuf:"fixed64,2,opt,name=exemplar_value,json=exemplarValue,proto3" json:"exemplar_value,omitempty"`
	// The observation (sampling) time of the above value.
	ExemplarTimestampUnixnano int64 `protobuf:"varint,3,opt,name=exemplar_timestamp_unixnano,json=exemplarTimestampUnixnano,proto3" json:"exemplar_timestamp_unixnano,omitempty"`
	// timestamp_unspecified must be set to true if timestamp_unixnano value is unspecified.
	// In that case timestamp_unixnano value will be decided by the backend.
	ExemplarTimestampUnspecified bool `protobuf:"varint,4,opt,name=exemplar_timestamp_unspecified,json=exemplarTimestampUnspecified,proto3" json:"exemplar_timestamp_unspecified,omitempty"`
	// exemplar_attachments are contextual information about the example value.
	ExemplarAttachments  []*StringKeyValuePair `protobuf:"bytes,5,rep,name=exemplar_attachments,json=exemplarAttachments,proto3" json:"exemplar_attachments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *HistogramValue_Bucket) Reset()         { *m = HistogramValue_Bucket{} }
func (m *HistogramValue_Bucket) String() string { return proto.CompactTextString(m) }
func (*HistogramValue_Bucket) ProtoMessage()    {}
func (*HistogramValue_Bucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a96a8671bd66caf, []int{6, 0}
}

func (m *HistogramValue_Bucket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HistogramValue_Bucket.Unmarshal(m, b)
}
func (m *HistogramValue_Bucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HistogramValue_Bucket.Marshal(b, m, deterministic)
}
func (m *HistogramValue_Bucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistogramValue_Bucket.Merge(m, src)
}
func (m *HistogramValue_Bucket) XXX_Size() int {
	return xxx_messageInfo_HistogramValue_Bucket.Size(m)
}
func (m *HistogramValue_Bucket) XXX_DiscardUnknown() {
	xxx_messageInfo_HistogramValue_Bucket.DiscardUnknown(m)
}

var xxx_messageInfo_HistogramValue_Bucket proto.InternalMessageInfo

func (m *HistogramValue_Bucket) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *HistogramValue_Bucket) GetExemplarValue() float64 {
	if m != nil {
		return m.ExemplarValue
	}
	return 0
}

func (m *HistogramValue_Bucket) GetExemplarTimestampUnixnano() int64 {
	if m != nil {
		return m.ExemplarTimestampUnixnano
	}
	return 0
}

func (m *HistogramValue_Bucket) GetExemplarTimestampUnspecified() bool {
	if m != nil {
		return m.ExemplarTimestampUnspecified
	}
	return false
}

func (m *HistogramValue_Bucket) GetExemplarAttachments() []*StringKeyValuePair {
	if m != nil {
		return m.ExemplarAttachments
	}
	return nil
}

// StringKeyValuePair is a pair of key/value strings.
type StringKeyValuePair struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringKeyValuePair) Reset()         { *m = StringKeyValuePair{} }
func (m *StringKeyValuePair) String() string { return proto.CompactTextString(m) }
func (*StringKeyValuePair) ProtoMessage()    {}
func (*StringKeyValuePair) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a96a8671bd66caf, []int{7}
}

func (m *StringKeyValuePair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringKeyValuePair.Unmarshal(m, b)
}
func (m *StringKeyValuePair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringKeyValuePair.Marshal(b, m, deterministic)
}
func (m *StringKeyValuePair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringKeyValuePair.Merge(m, src)
}
func (m *StringKeyValuePair) XXX_Size() int {
	return xxx_messageInfo_StringKeyValuePair.Size(m)
}
func (m *StringKeyValuePair) XXX_DiscardUnknown() {
	xxx_messageInfo_StringKeyValuePair.DiscardUnknown(m)
}

var xxx_messageInfo_StringKeyValuePair proto.InternalMessageInfo

func (m *StringKeyValuePair) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *StringKeyValuePair) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// The start_timestamp only applies to the count and sum in the SummaryValue.
type SummaryValue struct {
	// The total number of recorded values since start_time. Optional since
	// some systems don't expose this.
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// The total sum of recorded values since start_time. Optional since some
	// systems don't expose this. If count is zero then this field must be zero.
	Sum float64 `protobuf:"fixed64,2,opt,name=sum,proto3" json:"sum,omitempty"`
	// count_and_sum_unspecified must be set to true if count and sum values are unknown or
	// unspecified.
	CountAndSumUnspecified bool `protobuf:"varint,3,opt,name=count_and_sum_unspecified,json=countAndSumUnspecified,proto3" json:"count_and_sum_unspecified,omitempty"`
	// A list of values at different percentiles of the distribution calculated
	// from the current snapshot. The percentiles must be strictly increasing.
	PercentileValues     []*SummaryValue_ValueAtPercentile `protobuf:"bytes,4,rep,name=percentile_values,json=percentileValues,proto3" json:"percentile_values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *SummaryValue) Reset()         { *m = SummaryValue{} }
func (m *SummaryValue) String() string { return proto.CompactTextString(m) }
func (*SummaryValue) ProtoMessage()    {}
func (*SummaryValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a96a8671bd66caf, []int{8}
}

func (m *SummaryValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SummaryValue.Unmarshal(m, b)
}
func (m *SummaryValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SummaryValue.Marshal(b, m, deterministic)
}
func (m *SummaryValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SummaryValue.Merge(m, src)
}
func (m *SummaryValue) XXX_Size() int {
	return xxx_messageInfo_SummaryValue.Size(m)
}
func (m *SummaryValue) XXX_DiscardUnknown() {
	xxx_messageInfo_SummaryValue.DiscardUnknown(m)
}

var xxx_messageInfo_SummaryValue proto.InternalMessageInfo

func (m *SummaryValue) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SummaryValue) GetSum() float64 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func (m *SummaryValue) GetCountAndSumUnspecified() bool {
	if m != nil {
		return m.CountAndSumUnspecified
	}
	return false
}

func (m *SummaryValue) GetPercentileValues() []*SummaryValue_ValueAtPercentile {
	if m != nil {
		return m.PercentileValues
	}
	return nil
}

// Represents the value at a given percentile of a distribution.
type SummaryValue_ValueAtPercentile struct {
	// The percentile of a distribution. Must be in the interval
	// (0.0, 100.0].
	Percentile float64 `protobuf:"fixed64,1,opt,name=percentile,proto3" json:"percentile,omitempty"`
	// The value at the given percentile of a distribution.
	Value                float64  `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SummaryValue_ValueAtPercentile) Reset()         { *m = SummaryValue_ValueAtPercentile{} }
func (m *SummaryValue_ValueAtPercentile) String() string { return proto.CompactTextString(m) }
func (*SummaryValue_ValueAtPercentile) ProtoMessage()    {}
func (*SummaryValue_ValueAtPercentile) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a96a8671bd66caf, []int{8, 0}
}

func (m *SummaryValue_ValueAtPercentile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SummaryValue_ValueAtPercentile.Unmarshal(m, b)
}
func (m *SummaryValue_ValueAtPercentile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SummaryValue_ValueAtPercentile.Marshal(b, m, deterministic)
}
func (m *SummaryValue_ValueAtPercentile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SummaryValue_ValueAtPercentile.Merge(m, src)
}
func (m *SummaryValue_ValueAtPercentile) XXX_Size() int {
	return xxx_messageInfo_SummaryValue_ValueAtPercentile.Size(m)
}
func (m *SummaryValue_ValueAtPercentile) XXX_DiscardUnknown() {
	xxx_messageInfo_SummaryValue_ValueAtPercentile.DiscardUnknown(m)
}

var xxx_messageInfo_SummaryValue_ValueAtPercentile proto.InternalMessageInfo

func (m *SummaryValue_ValueAtPercentile) GetPercentile() float64 {
	if m != nil {
		return m.Percentile
	}
	return 0
}

func (m *SummaryValue_ValueAtPercentile) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterEnum("otlp.MetricDescriptor_Type", MetricDescriptor_Type_name, MetricDescriptor_Type_value)
	proto.RegisterEnum("otlp.Point_ValueType", Point_ValueType_name, Point_ValueType_value)
	proto.RegisterType((*ResourceMetrics)(nil), "otlp.ResourceMetrics")
	proto.RegisterType((*Metric)(nil), "otlp.Metric")
	proto.RegisterType((*MetricDescriptor)(nil), "otlp.MetricDescriptor")
	proto.RegisterType((*TimeSeries)(nil), "otlp.TimeSeries")
	proto.RegisterType((*LabelValue)(nil), "otlp.LabelValue")
	proto.RegisterType((*Point)(nil), "otlp.Point")
	proto.RegisterType((*HistogramValue)(nil), "otlp.HistogramValue")
	proto.RegisterType((*HistogramValue_Bucket)(nil), "otlp.HistogramValue.Bucket")
	proto.RegisterType((*StringKeyValuePair)(nil), "otlp.StringKeyValuePair")
	proto.RegisterType((*SummaryValue)(nil), "otlp.SummaryValue")
	proto.RegisterType((*SummaryValue_ValueAtPercentile)(nil), "otlp.SummaryValue.ValueAtPercentile")
}

func init() { proto.RegisterFile("metric_data.proto", fileDescriptor_9a96a8671bd66caf) }

var fileDescriptor_9a96a8671bd66caf = []byte{
	// 999 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0x5d, 0x6f, 0xe3, 0x44,
	0x17, 0x5e, 0xc7, 0xf9, 0x68, 0x4e, 0x3e, 0xea, 0x4c, 0xb3, 0x95, 0xdb, 0xee, 0xbb, 0x6f, 0xf0,
	0x02, 0x0a, 0x20, 0x0c, 0xdb, 0x96, 0x45, 0x48, 0xb0, 0x52, 0x92, 0x86, 0x36, 0x6a, 0xd3, 0x84,
	0x49, 0x52, 0x89, 0x2b, 0xcb, 0x71, 0x66, 0xb7, 0x56, 0xe3, 0x0f, 0x79, 0xc6, 0xab, 0xcd, 0xaf,
	0xe0, 0x96, 0x1b, 0x7e, 0x01, 0x17, 0xfc, 0x11, 0x7e, 0x09, 0xbf, 0x80, 0x4b, 0xe4, 0x19, 0x7f,
	0xa5, 0xed, 0x22, 0xee, 0x66, 0x9e, 0xf3, 0x3c, 0x73, 0xe6, 0x9c, 0xf3, 0x78, 0x64, 0x68, 0x39,
	0x84, 0x05, 0xb6, 0x65, 0xac, 0x4c, 0x66, 0xea, 0x7e, 0xe0, 0x31, 0x0f, 0x15, 0x3d, 0xb6, 0xf6,
	0x0f, 0xdb, 0x8c, 0xac, 0x49, 0x14, 0xdc, 0xe4, 0x62, 0x1a, 0x81, 0x5d, 0x4c, 0xa8, 0x17, 0x06,
	0x16, 0x19, 0x73, 0x21, 0x45, 0x9f, 0xc3, 0x4e, 0x10, 0x43, 0xaa, 0xd4, 0x91, 0xba, 0xb5, 0xe3,
	0xa6, 0x1e, 0x9d, 0xa0, 0x27, 0x44, 0x9c, 0xc6, 0xd1, 0xa7, 0x50, 0x11, 0xf9, 0xa8, 0x5a, 0xe8,
	0xc8, 0xdd, 0xda, 0x71, 0x5d, 0x50, 0xc5, 0x59, 0x38, 0x09, 0x6a, 0xbf, 0x4b, 0x50, 0x16, 0x18,
	0x1a, 0x64, 0x57, 0x24, 0xd4, 0x0a, 0x6c, 0x9f, 0x79, 0x41, 0x9c, 0x67, 0x3f, 0x2f, 0x3e, 0x4b,
	0xa3, 0x58, 0x71, 0xee, 0x21, 0xe8, 0x6b, 0x00, 0x66, 0x3b, 0x84, 0x92, 0xc0, 0x26, 0x49, 0x6a,
	0x45, 0xa8, 0xe7, 0xb6, 0x43, 0x66, 0x1c, 0xc7, 0x39, 0xce, 0x56, 0x55, 0xf2, 0xbf, 0x57, 0xa5,
	0xfd, 0x59, 0x00, 0xe5, 0xfe, 0x25, 0x10, 0x82, 0xa2, 0x6b, 0x3a, 0xa2, 0x25, 0x55, 0xcc, 0xd7,
	0xa8, 0x03, 0xb5, 0xa4, 0x08, 0xdb, 0x73, 0xd5, 0x02, 0x0f, 0xe5, 0xa1, 0x48, 0x15, 0xba, 0x36,
	0xe3, 0x29, 0xab, 0x98, 0xaf, 0xd1, 0x57, 0x50, 0x64, 0x1b, 0x9f, 0xa8, 0xc5, 0x8e, 0xd4, 0x6d,
	0x1e, 0x1f, 0x3d, 0x5e, 0xb4, 0x3e, 0xdf, 0xf8, 0x04, 0x73, 0x22, 0xfa, 0x1f, 0xc0, 0xda, 0x5c,
	0x92, 0xb5, 0x71, 0x47, 0x36, 0x54, 0x2d, 0x75, 0xe4, 0x6e, 0x15, 0x57, 0x39, 0x72, 0x49, 0x36,
	0x54, 0xfb, 0x4d, 0x82, 0x62, 0xc4, 0x46, 0xbb, 0x50, 0x5b, 0x5c, 0xcf, 0xa6, 0xc3, 0xc1, 0xe8,
	0xc7, 0xd1, 0xf0, 0x4c, 0x79, 0x12, 0x01, 0xe7, 0xbd, 0xc5, 0xf9, 0xd0, 0x18, 0x5d, 0xcf, 0x5f,
	0x9d, 0x2a, 0x12, 0x52, 0xa0, 0x2e, 0x80, 0xb3, 0xc9, 0xa2, 0x7f, 0x35, 0x54, 0x0a, 0x68, 0x0f,
	0x76, 0x05, 0x72, 0x31, 0x9a, 0xcd, 0x27, 0xe7, 0xb8, 0x37, 0x56, 0x64, 0xd4, 0x82, 0xc6, 0x60,
	0xb2, 0xb8, 0x9e, 0x0f, 0x71, 0xac, 0x2c, 0x22, 0x04, 0xcd, 0x04, 0x8a, 0xb5, 0x25, 0xa4, 0x42,
	0x7b, 0xb0, 0x18, 0x2f, 0xae, 0x7a, 0xf3, 0xd1, 0x4d, 0xfe, 0x80, 0x32, 0xaa, 0x41, 0x65, 0xb6,
	0x18, 0x8f, 0x7b, 0xf8, 0x67, 0xa5, 0xa2, 0xbd, 0x01, 0xc8, 0x86, 0x82, 0x4e, 0xa0, 0x2e, 0x8a,
	0x79, 0x67, 0xae, 0x43, 0x42, 0x55, 0x29, 0x3f, 0xbc, 0xab, 0x28, 0x72, 0x13, 0x05, 0x70, 0x6d,
	0x9d, 0xae, 0x29, 0x7a, 0x01, 0x65, 0xdf, 0xb3, 0x5d, 0x96, 0xcc, 0xba, 0x26, 0xe8, 0xd3, 0x08,
	0xc3, 0x71, 0x48, 0x9b, 0x00, 0x64, 0x7a, 0xd4, 0x86, 0x12, 0xcf, 0x10, 0x0f, 0x4c, 0x6c, 0xd0,
	0x17, 0xd0, 0xe2, 0x0b, 0x23, 0x74, 0xa9, 0x4f, 0x2c, 0xfb, 0x8d, 0x4d, 0x56, 0x7c, 0x6e, 0x3b,
	0x58, 0xe1, 0x81, 0x45, 0x86, 0x6b, 0x7f, 0xcb, 0x50, 0xe2, 0x29, 0x90, 0x0e, 0x7b, 0x94, 0x99,
	0x01, 0x33, 0x22, 0x47, 0x19, 0xa1, 0x6b, 0xbf, 0x77, 0x4d, 0xd7, 0xe3, 0x47, 0xcb, 0xb8, 0xc5,
	0x43, 0x51, 0x89, 0x8b, 0x38, 0x80, 0x4e, 0x61, 0x7f, 0x8b, 0x7f, 0x3f, 0x57, 0x3b, 0x27, 0x49,
	0x63, 0xe8, 0x4b, 0x40, 0xdc, 0xb1, 0xcc, 0x74, 0xfc, 0x2c, 0x89, 0x2c, 0x92, 0xa4, 0x91, 0x34,
	0xc9, 0x09, 0x3c, 0xcd, 0xd3, 0xb3, 0x1c, 0x45, 0x91, 0x23, 0xa7, 0xc8, 0x72, 0x7c, 0x16, 0x9b,
	0xaf, 0xc4, 0xcd, 0xf7, 0x34, 0xd7, 0x47, 0x9d, 0xf7, 0x2d, 0x67, 0xbb, 0xff, 0x43, 0xcd, 0x76,
	0xd9, 0xab, 0x53, 0x31, 0x29, 0xb5, 0xcc, 0xef, 0x01, 0x1c, 0x12, 0x2d, 0xfe, 0x08, 0xea, 0x2b,
	0x2f, 0x5c, 0xae, 0x49, 0xcc, 0xa8, 0x74, 0xa4, 0xae, 0x84, 0x6b, 0x02, 0x13, 0x94, 0x1f, 0x60,
	0xf7, 0xd6, 0xa6, 0xcc, 0x7b, 0x1b, 0x98, 0x4e, 0xcc, 0xda, 0xe1, 0x5f, 0x5f, 0x5b, 0x64, 0xbe,
	0x48, 0x82, 0x62, 0xe8, 0xcd, 0xdb, 0xad, 0x3d, 0xfa, 0x16, 0x1a, 0x34, 0x74, 0x1c, 0x33, 0xd8,
	0xc4, 0xe2, 0x2a, 0x17, 0x23, 0x21, 0x9e, 0x89, 0x90, 0x90, 0xd6, 0x69, 0x6e, 0xa7, 0xbd, 0x86,
	0x6a, 0x5a, 0x0e, 0xaa, 0x42, 0x49, 0xd8, 0xf8, 0x09, 0x02, 0x28, 0xc7, 0xf6, 0x95, 0x50, 0x03,
	0xaa, 0x99, 0x67, 0x0b, 0x79, 0xcf, 0xca, 0xda, 0x1f, 0x32, 0x34, 0xb7, 0xef, 0x16, 0x19, 0xca,
	0xf2, 0x42, 0x97, 0xc5, 0x53, 0x17, 0x1b, 0xa4, 0x80, 0x4c, 0x43, 0x87, 0x8f, 0x55, 0xc2, 0xd1,
	0x12, 0xbd, 0x80, 0xc6, 0x32, 0xb4, 0xee, 0x08, 0x33, 0x96, 0x5e, 0xe8, 0xae, 0xa8, 0x2a, 0x77,
	0xe4, 0xae, 0x84, 0xeb, 0x02, 0xec, 0x73, 0x0c, 0x7d, 0x03, 0x15, 0xb1, 0xa7, 0x6a, 0x91, 0x3b,
	0xfa, 0xe8, 0xb1, 0x7e, 0xe8, 0x7d, 0xce, 0xc1, 0x09, 0xf7, 0xf0, 0xd7, 0x02, 0x94, 0x05, 0xf6,
	0x81, 0xeb, 0x7c, 0x02, 0x4d, 0xf2, 0x9e, 0x38, 0xfe, 0xda, 0x0c, 0xe2, 0x8e, 0x89, 0x9b, 0x35,
	0x12, 0x54, 0xd4, 0xf2, 0x1a, 0x8e, 0x52, 0xda, 0x07, 0x2d, 0x77, 0x90, 0x50, 0xe6, 0x0f, 0xac,
	0x77, 0x06, 0xcf, 0x1f, 0xd5, 0xdf, 0xf7, 0xe0, 0xb3, 0x47, 0x8e, 0xc8, 0xbc, 0x78, 0x09, 0xed,
	0xf4, 0x14, 0x93, 0x31, 0xd3, 0xba, 0x75, 0x48, 0xf4, 0x8d, 0x97, 0x78, 0x47, 0xd4, 0x78, 0xc8,
	0x2c, 0xb0, 0xdd, 0xb7, 0x97, 0x44, 0x0c, 0x76, 0x6a, 0xda, 0x01, 0xde, 0x4b, 0x54, 0xbd, 0x4c,
	0xa4, 0x7d, 0x0f, 0xe8, 0x21, 0x35, 0x1a, 0xcf, 0x1d, 0xd9, 0xc4, 0x6f, 0x40, 0xb4, 0xcc, 0xde,
	0x85, 0x42, 0xee, 0x5d, 0xd0, 0x7e, 0x29, 0x40, 0x3d, 0x6f, 0xa7, 0xff, 0x3c, 0xed, 0xef, 0xe0,
	0x80, 0x87, 0x0c, 0xd3, 0x5d, 0x19, 0x34, 0x74, 0xb6, 0x9a, 0x20, 0xf3, 0x26, 0xec, 0x73, 0x42,
	0xcf, 0x5d, 0xcd, 0x42, 0x27, 0x5f, 0xfe, 0x4f, 0xd0, 0xf2, 0x49, 0x60, 0x11, 0x97, 0xd9, 0xc9,
	0x27, 0x94, 0xb8, 0xe1, 0xe3, 0x87, 0x06, 0x17, 0x9f, 0x67, 0x8f, 0x4d, 0x53, 0x09, 0x56, 0x32,
	0xb9, 0x78, 0x27, 0x0f, 0x47, 0xd0, 0x7a, 0x40, 0x43, 0xcf, 0x01, 0x32, 0x22, 0xaf, 0x47, 0xc2,
	0x39, 0x64, 0xbb, 0x23, 0x52, 0xdc, 0x91, 0xfe, 0x05, 0x3c, 0xb3, 0x3d, 0xdd, 0xf3, 0x89, 0x6b,
	0x11, 0x97, 0x86, 0x54, 0xfc, 0x30, 0xe8, 0x2c, 0x30, 0x2d, 0xa2, 0xbf, 0x7b, 0xd9, 0x87, 0x79,
	0xb4, 0x9a, 0x46, 0xe0, 0x54, 0xfa, 0xab, 0x70, 0x30, 0xf1, 0x89, 0x3b, 0x10, 0x4c, 0x0e, 0xea,
	0x3c, 0xae, 0xdf, 0xbc, 0x5c, 0x96, 0xb9, 0xf2, 0xe4, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5a,
	0x7b, 0xc7, 0x74, 0x9b, 0x08, 0x00, 0x00,
}
