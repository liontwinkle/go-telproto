syntax = "proto3";

package otlp;

import "telemetry_data.proto";

option java_multiple_files = true;
option java_package = "io.opencensus.proto.trace.v1";
option java_outer_classname = "TraceProto";

option ruby_package = "OpenCensus.Proto.Trace.V1";

// A list of metrics from a Resource.
message ResourceMetrics {
  Resource resource = 1;
  repeated Metric metrics = 2;
}

// Defines a Metric which has one or more timeseries.
//
// The data model and relation between entities is shown in the diagram below.
//
// - Metric is composed of a Resource, a MetricDescriptor and a TimeSeriesList data.
// - MetricDescriptor contains a list of label keys (shown horizontally).
// - TimeSeriesList is composed of a list of TimeSeries (shown vertically).
// - TimeSeries contains a list of label values and a list of metric values (shown
//   horizontally).
//
//     Metric
//  +----------+         +--------+
//  |  resource|-------->|Resource|
//  |          |         +--------+
//  |          |
//  |          |         +------------------------+
//  |descriptor|-------->| MetricDescriptor       |
//  |          |         |+-----+-----+   +-----+ |
//  |          |         ||label|label|...|label| |
//  |      data|--+      ||key1 |key2 |   |keyN | |
//  +----------+  |      |+-----+-----+   +-----+ |
//                |      +------------------------+
//                |
//                |      +------------------------------+
//                |      |TimeSeries 1                  |
//                v      |+-----+-----+   +-----+       |
//             +-----+   ||label|label|...|label|       |
//             |  1  |-->|+-----+-----+   +-----+       |
//             +-----+   |+-----+-----+-----+   +-----+ |
//             |  .  |   ||value|value|value|...|value| |
//             |  .  |   |+-----+-----+-----+   +-----+ |
//             |  .  |   +------------------------------+
//             |  .  |                   .
//             |  .  |                   .
//             |  .  |                   .
//             |  .  |   +-----------------------------------+
//             |  .  |   |TimeSeries N                       |
//             +-----+   |+-----+-----+   +-----+            |
//             |  N  |-->||label|label|...|label|            |
//             +-----+   |+-----+-----+   +-----+            |
//                       |+-----+-----+-----+-----+   +-----+|
//                       ||value|value|value|value|...|value||
//                       |+-----+-----+-----+-----+   +-----+|
//                       +-----------------------------------+
//
//-----------------------------------------------------------------------
// TimeSeries contain an array of values, each value corresponding to a given moment in
// time. Each element of TimeSeries array is timestamped. The timestamps value in the
// array are differential, encoded as the number of nanoseconds since the previous
// element's timestamp. The first element's timestamp is the number of nanoseconds since
// UNIX Epoch 00:00:00 UTC on 1 January 1970. Differential timestamp encoding reduces
// encoded (wire) size significantly due to Protobuf varint encoding favouring smaller
// integer numbers.
//
// TimeSeries are strongly typed: the element of a TimeSeries array has
// a specific Protobuf message depending on the type of the metric and thus
// there are currently 6 TimeSeriesList and 6 TimeSeries messages, which
// correspond to the types of metric values.
message Metric {
  // metric_descriptor describes the Metric.
  MetricDescriptor metric_descriptor = 1;

  // resource that is associated with this metric. Optional. If not set, this metric
  // should be part of a ResourceMetrics message that does include the resource
  // information, unless resource information is unknown.
  Resource resource = 2;

  // data is a list of one or more TimeSeries for a single metric, where each timeseries has
  // one or more points. Only one of the following fields is used for the data, depending on
  // the type of the metric defined by MetricDescriptor.type field.
  oneof data {
    GaugeInt64TimeSeriesList gauge_int64_data = 3;
    GaugeDoubleTimeSeriesList gauge_double_data = 4;
    CounterInt64TimeSeriesList counter_int64_data = 5;
    CounterDoubleTimeSeriesList counter_double_data = 6;
    HistogramTimeSeriesList histogram_data = 7;
    SummaryTimeSeriesList summary_data = 8;
  }
}

// Defines a metric type and its schema.
message MetricDescriptor {
  // name of the metric, including its DNS name prefix. It must be unique.
  string name = 1;

  // description of the metric, which can be used in documentation.
  string description = 2;

  // unit in which the metric value is reported. Follows the format
  // described by http://unitsofmeasure.org/ucum.html.
  string unit = 3;

  // Type of the metric. It describes how the data is reported.
  //
  // A gauge is an instantaneous measurement of a value.
  //
  // A counter/cumulative measurement is a value accumulated over a time
  // interval. In a time series, cumulative measurements should have the same
  // start time, increasing values, until an event resets the cumulative value
  // to zero and sets a new start time for the subsequent points.
  enum Type {
    // Do not use this default value.
    UNSPECIFIED = 0;

    // Integer gauge. The value can go both up and down over time.
    // Corresponding values are stored in GaugeInt64TimeSeriesList.
    GAUGE_INT64 = 1;

    // Floating point gauge. The value can go both up and down over time.
    // Corresponding values are stored in GaugeDoubleTimeSeriesList.
    GAUGE_DOUBLE = 2;

    // Histogram gauge measurement.
    // Used in scenarios like a snapshot of time that current items in a queue
    // have spent there.
    // Corresponding values are stored in HistogramTimeSeriesList. The count and sum of the
    // histogram can go both up and down over time. Recorded values are always >= 0.
    GAUGE_HISTOGRAM = 3;

    // Integer counter measurement. The value cannot decrease; if value is reset then
    // CounterInt64Value.start_time_unixnano should also be reset.
    // Corresponding values are stored in CounterInt64TimeSeriesList.
    COUNTER_INT64 = 4;

    // Floating point counter measurement. The value cannot decrease, if
    // resets then the CounterDoubleValue.start_time_unixnano should also be reset.
    // Recorded values are always >= 0.
    // Corresponding values are stored in CounterDoubleTimeSeriesList.
    COUNTER_DOUBLE = 5;

    // Histogram cumulative measurement.
    // Corresponding values are stored in HistogramTimeSeriesList. The count and sum of the
    // histogram cannot decrease; if values are reset then HistogramValue.start_time_unixnano
    // should also be reset to the new start timestamp.
    CUMULATIVE_HISTOGRAM = 6;

    // Summary value. Some frameworks implemented Histograms as a summary of observations
    // (usually things like request durations and response sizes). While it
    // also provides a total count of observations and a sum of all observed
    // values, it calculates configurable percentiles over a sliding time
    // window.
    // Corresponding values are stored in SummaryTimeSeriesList.
    SUMMARY = 7;
  }
  Type type = 4;

  // The label keys associated with the metric descriptor. Keys in this list must
  // be unique.
  repeated string label_keys = 5;
}

// GaugeInt64TimeSeriesList is a list of timeseries of int64 Gauge.
message GaugeInt64TimeSeriesList {
  repeated GaugeInt64TimeSeries list = 1;
}

// GaugeDoubleTimeSeriesList is a list of timeseries of double Gauge.
message GaugeDoubleTimeSeriesList {
  repeated GaugeDoubleTimeSeries list = 1;
}

// CounterInt64TimeSeriesList is a list of timeseries of int64 Counter.
message CounterInt64TimeSeriesList {
  repeated CounterInt64TimeSeries list = 1;
}

// CounterDoubleTimeSeriesList is a list of timeseries of double Counter.
message CounterDoubleTimeSeriesList {
  repeated CounterDoubleTimeSeries list = 1;
}

// HistogramTimeSeriesList is a list of timeseries of Histogram.
message HistogramTimeSeriesList {
  repeated HistogramTimeSeries list = 1;
}

// SummaryTimeSeriesList is a list of timeseries of Summary.
message SummaryTimeSeriesList {
  repeated SummaryTimeSeries list = 1;
}

// GaugeInt64TimeSeries is a list of data points that describes the time-varying values
// of a int64 Gauge metric.
message GaugeInt64TimeSeries {
  // The set of label values that uniquely identify this timeseries. Applies to
  // all points. The order of label values must match that of label keys in the
  // metric descriptor.
  repeated LabelValue label_values = 1;

  // The data points of this timeseries.
  repeated GaugeInt64Value points = 2;
}

// GaugeDoubleTimeSeries is a list of data points that describes the time-varying values
// of a double Gauge metric.
message GaugeDoubleTimeSeries {
  // The set of label values that uniquely identify this timeseries. Applies to
  // all points. The order of label values must match that of label keys in the
  // metric descriptor.
  repeated LabelValue label_values = 1;

  // The data points of this timeseries.
  repeated GaugeDoubleValue points = 2;
}

// CounterInt64TimeSeries is a list of data points that describes the time-varying values
// of a int64 Counter metric.
message CounterInt64TimeSeries {
  // The set of label values that uniquely identify this timeseries. Applies to
  // all points. The order of label values must match that of label keys in the
  // metric descriptor.
  repeated LabelValue label_values = 1;

  // The data points of this timeseries.
  repeated CounterInt64Value points = 2;
}

// CounterDoubleTimeSeries is a list of data points that describes the time-varying values
// of a double Counter metric.
message CounterDoubleTimeSeries {
  // The set of label values that uniquely identify this timeseries. Applies to
  // all points. The order of label values must match that of label keys in the
  // metric descriptor.
  repeated LabelValue label_values = 1;

  // The data points of this timeseries.
  repeated CounterDoubleValue points = 2;
}

// HistogramTimeSeries is a list of data points that describes the time-varying values
// of a Histogram.
message HistogramTimeSeries {
  // The set of label values that uniquely identify this timeseries. Applies to
  // all points. The order of label values must match that of label keys in the
  // metric descriptor.
  repeated LabelValue label_values = 1;

  // ExplicitBounds specifies buckets with explicitly defined bounds for values.
  message ExplicitBounds {
    // The bucket boundaries are described by "bounds" field.
    //
    // This defines size(bounds) + 1 (= N) buckets. The boundaries for bucket
    // at index i are:
    //
    // [0, bounds[i]) for i == 0
    // [bounds[i-1], bounds[i]) for 0 < i < N-1
    // [bounds[i], +infinity) for i == N-1
    // The values in bounds array must be strictly increasing and > 0.
    //
    // Note: only [a, b) intervals are currently supported for each bucket. If we decides
    // to also support (a, b] intervals we should add support for these by defining a boolean
    // value which decides what type of intervals to use.
    repeated double bounds = 1;
  }

  // A histogram may optionally contain the distribution of the values in the population.
  // If that is the case then "bucket_options" field below and "buckets" field in
  // HistogramValue both must be defined. Otherwise both fields must be omitted in
  // which case the distribution of values in the histogram is unknown and only the
  // total count and sum are known.
  // bucket_options apply to all points in this HistogramTimeSeries. To define
  // different bucket_options to different points create separate instances of
  // HistogramTimeSeries each with its own bucket_options.
  oneof bucket_options {
    // explicit_bounds is the only supported option currently. Other options such
    // linear buckets or exponential buckets may be added in the future.
    ExplicitBounds explicit_bounds = 2;
  }

  // The data points of this timeseries.
  repeated HistogramValue points = 3;
}

// SummaryTimeSeries is a list of data points that describes the time-varying values
// of a Summary metric.
message SummaryTimeSeries {
  // The set of label values that uniquely identify this timeseries. Applies to
  // all points. The order of label values must match that of label keys in the
  // metric descriptor.
  repeated LabelValue label_values = 1;

  // The data points of this timeseries.
  repeated SummaryValue points = 2;
}

// LabelValue is a value of a label.
message LabelValue {
  // The value for the label.
  string value = 1;

  // If true the value field is ignored and considered not set.
  // This is used to differentiate a missing label from an empty string.
  bool value_unspecified = 2;
}

// GaugeInt64Value is a timestamped measurement of int64 Gauge.
message GaugeInt64Value {
  // timestamp_deltanano is number of nanoseconds that must be added to the timestamp
  // of previous data point in this timeseries to get the timestamp of this data point.
  // If this is the first data point in the timeseries then timestamp_deltanano is
  // the number of nanoseconds since UNIX Epoch 00:00:00 UTC on 1 January 1970.
  int64 timestamp_deltanano = 1;

  // value of Gauge.
  int64 value = 2;
}

// GaugeDoubleValue is a timestamped measurement of double Gauge.
message GaugeDoubleValue {
  // timestamp_deltanano is number of nanoseconds that must be added to the timestamp
  // of previous data point in this timeseries to get the timestamp of this data point.
  // If this is the first data point in the timeseries then timestamp_deltanano is
  // the number of nanoseconds since UNIX Epoch 00:00:00 UTC on 1 January 1970.
  int64 timestamp_deltanano = 1;

  // value of Gauge.
  double value = 2;
}

// CounterInt64Value is a timestamped measurement of int64 counter or cumulative value.
message CounterInt64Value {
  // start_time_unixnano is the time when the cumulative value was reset to zero.
  // The cumulative value is over the time interval [start_time_unixnano, timestamp_unixnano].
  // Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
  //
  // Value of 0 indicates that the start_time is the same as that of the previous
  // data point in this timeseries. When create timeseries of this type it is recommended
  // to omit this value if the start_time does not change, since it results in more
  // compact encoding on the wire.
  // If the value of 0 occurs for the first data point in the timeseries it means that
  // the timestamp is unspecified. In that case the timestamp may be decided by the backend.
  int64 start_time_unixnano = 1;

  // timestamp_deltanano is number of nanoseconds that must be added to the timestamp
  // of previous data point in this timeseries to get the timestamp of this data point.
  // If this is the first data point in the timeseries then timestamp_deltanano is
  // the number of nanoseconds since UNIX Epoch 00:00:00 UTC on 1 January 1970.
  int64 timestamp_deltanano = 2;

  // value of Counter.
  int64 value = 3;
}

// CounterDoubleValue is a timestamped measurement of double counter or cumulative value.
message CounterDoubleValue {
  // start_time_unixnano is the time when the cumulative value was reset to zero.
  // The cumulative value is over the time interval [start_time_unixnano, timestamp_unixnano].
  // Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
  //
  // Value of 0 indicates that the start_time is the same as that of the previous
  // data point in this timeseries. When create timeseries of this type it is recommended
  // to omit this value if the start_time does not change, since it results in more
  // compact encoding on the wire.
  // If the value of 0 occurs for the first data point in the timeseries it means that
  // the timestamp is unspecified. In that case the timestamp may be decided by the backend.
  int64 start_time_unixnano = 1;

  // timestamp_deltanano is number of nanoseconds that must be added to the timestamp
  // of previous data point in this timeseries to get the timestamp of this data point.
  // If this is the first data point in the timeseries then timestamp_deltanano is
  // the number of nanoseconds since UNIX Epoch 00:00:00 UTC on 1 January 1970.
  int64 timestamp_deltanano = 2;

  // value of Counter.
  double value = 3;
}

// Histogram contains summary statistics for a population of values. It may
// optionally contain the distribution of those values across a set of buckets.
message HistogramValue {
  // start_time_unixnano is the time when the cumulative value was reset to zero.
  // The cumulative value is over the time interval [start_time_unixnano, timestamp_unixnano].
  // Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
  //
  // Value of 0 indicates that the start_time is the same as that of the previous
  // data point in this timeseries. When create timeseries of this type it is recommended
  // to omit this value if the start_time does not change, since it results in more
  // compact encoding on the wire.
  // If the value of 0 occurs for the first data point in the timeseries it means that
  // the timestamp is unspecified. In that case the timestamp may be decided by the backend.
  // Note: this field is always unspecified and ignored if MetricDescriptor.type==GAUGE_HISTOGRAM.
  int64 start_time_unixnano = 1;

  // timestamp_deltanano is number of nanoseconds that must be added to the timestamp
  // of previous data point in this timeseries to get the timestamp of this data point.
  // If this is the first data point in the timeseries then timestamp_deltanano is
  // the number of nanoseconds since UNIX Epoch 00:00:00 UTC on 1 January 1970.
  int64 timestamp_deltanano = 2;

  // count is the number of values in the population. Must be non-negative. This value
  // must be equal to the sum of the "count" fields in buckets if a histogram is
  // provided.
  int64 count = 3;

  // sum of the values in the population. If count is zero then this field
  // must be zero. This value must be equal to the sum of the "sum" fields in buckets if
  // a histogram is provided.
  double sum = 4;

  // Bucket contains values for a bucket.
  message Bucket {
    // The number of values in each bucket of the histogram, as described by
    // bucket_options.
    int64 count = 1;

    // Exemplars are example points that may be used to annotate aggregated
    // Histogram values. They are metadata that gives information about a
    // particular value added to a Histogram bucket.
    message Exemplar {
      // Value of the exemplar point. It determines which bucket the exemplar belongs to.
      // If bucket_options define bounds for this bucket then this value must be within
      // the defined bounds.
      double value = 2;

      // The observation (sampling) time of the above value.
      int64 timestamp_unixnano = 3;

      // exemplar_attachments are contextual information about the example value.
      // Keys in this list must be unique.
      repeated StringKeyValuePair attachments = 5;
    }

    // exemplar is an optional representative value of the bucket.
    Exemplar exemplar = 2;
  }

  // buckets is an optional field contains the values of histogram for each bucket.
  //
  // The sum of the values in the buckets "count" field must equal the value in the
  // count field of HistogramValue.
  //
  // The number of elements in buckets array must be by one greater than the
  // number of elements in bucket_bounds array.
  //
  // Note: if HistogramTimeSeries.bucket_options defines bucket bounds then this field
  // must also be present and number of elements in this field must be equal to the
  // number of buckets defined by bucket_options.
  repeated Bucket buckets = 5;
}

// StringKeyValuePair is a pair of key/value strings.
message StringKeyValuePair {
  string key = 1;
  string value = 2;
}

// The start_timestamp only applies to the count and sum in the SummaryValue.
message SummaryValue {
  // start_time_unixnano is the time when the cumulative value was reset to zero.
  // The cumulative value is over the time interval [start_time_unixnano, timestamp_unixnano].
  // Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
  //
  // Value of 0 indicates that the start_time is the same as that of the previous
  // data point in this timeseries. When create timeseries of this type it is recommended
  // to omit this value if the start_time does not change, since it results in more
  // compact encoding on the wire.
  // If the value of 0 occurs for the first data point in the timeseries it means that
  // the timestamp is unspecified. In that case the timestamp may be decided by the backend.
  int64 start_time_unixnano = 1;

  // timestamp_deltanano is number of nanoseconds that must be added to the timestamp
  // of previous data point in this timeseries to get the timestamp of this data point.
  // If this is the first data point in the timeseries then timestamp_deltanano is
  // the number of nanoseconds since UNIX Epoch 00:00:00 UTC on 1 January 1970.
  int64 timestamp_deltanano = 2;

  // The total number of recorded values since start_time. Optional since
  // some systems don't expose this.
  int64 count = 3;

  // The total sum of recorded values since start_time. Optional since some
  // systems don't expose this. If count is zero then this field must be zero.
  double sum = 4;

  // count_and_sum_unspecified must be set to true if count and sum values are unknown or
  // unspecified.
  bool count_and_sum_unspecified = 5;

  // Represents the value at a given percentile of a distribution.
  message ValueAtPercentile {
    // The percentile of a distribution. Must be in the interval
    // (0.0, 100.0].
    double percentile = 1;

    // The value at the given percentile of a distribution.
    double value = 2;
  }

  // A list of values at different percentiles of the distribution calculated
  // from the current snapshot. The percentiles must be strictly increasing.
  repeated ValueAtPercentile percentile_values = 6;
}
