syntax = "proto3";

package otlp;

import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_package = "io.opencensus.proto.trace.v1";
option java_outer_classname = "TraceProto";

option ruby_package = "OpenCensus.Proto.Trace.V1";

// A list of spans from a Resource.
message ResourceSpans {
  Resource resource = 1;
  repeated Span spans = 2;
}

// A list of metrics from a Resource.
message ResourceMetrics {
  Resource resource = 1;
  repeated Metric metrics = 2;
}

// Resource information. This describes the source of telemetry data.
message Resource {
  // Set of labels that describe the resource. See OpenTelemetry specification
  // semantic conventions for standardized label names:
  // https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md

  repeated AttributeKeyValue labels = 3;
  int32 dropped_labels_count = 11;
}

message AttributeKeyValue {
  enum ValueType {
    STRING  = 0;
    BOOL    = 1;
    INT64   = 2;
    DOUBLE  = 3;
  };

  string key = 1;
  // The type of the value.
  ValueType type = 2;

  // Only of the following fields is supposed to contain data (determined by `type` field value).
  // This is deliberately not using Protobuf `oneof` for performance reasons (verified by benchmarks).

  // A string up to 256 bytes long.
  string string_value = 3;
  // A 64-bit signed integer.
  int64 int_value = 4;
  // A Boolean value represented by `true` or `false`.
  bool bool_value = 5;
  // A double value.
  double double_value = 6;
}

// Span represents a single operation within a trace. Spans can be
// nested to form a trace tree. Spans may also be linked to other spans
// from the same or different trace and form graphs. Often, a trace
// contains a root span that describes the end-to-end latency, and one
// or more subspans for its sub-operations. A trace can also contain
// multiple root spans, or none at all. Spans do not need to be
// contiguous - there may be gaps or overlaps between spans in a trace.
//
// The next id is 16.
message Span {
  // trace_id is the unique identifier of a trace. All spans from the same trace share
  // the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes
  // is considered invalid.
  //
  // This field is semantically required. Receiver should generate new
  // random trace_id if empty or invalid trace_id was received.
  //
  // This field is required.
  bytes trace_id = 1;

  // span_id is a unique identifier for a span within a trace, assigned when the span
  // is created. The ID is an 8-byte array. An ID with all zeroes is considered
  // invalid.
  //
  // This field is semantically required. Receiver should generate new
  // random span_id if empty or invalid span_id was received.
  //
  // This field is required.
  bytes span_id = 2;

  // TraceEntry is the entry that is repeated in tracestate field (see below).
  message TraceEntry {
    // key must begin with a lowercase letter, and can only contain
    // lowercase letters 'a'-'z', digits '0'-'9', underscores '_', dashes
    // '-', asterisks '*', and forward slashes '/'.
    string key = 1;

    // value is opaque string up to 256 characters printable ASCII
    // RFC0020 characters (i.e., the range 0x20 to 0x7E) except ',' and '='.
    // Note that this also excludes tabs, newlines, carriage returns, etc.
    string value = 2;
  }

  // TraceState conveys information about request position in multiple distributed tracing graphs.
  // It is a list of Tracestate.Entry with a maximum of 32 members in the list.
  //
  // See the https://github.com/w3c/distributed-tracing for more details about this field.
  repeated TraceEntry tracestate = 3;

  // parent_span_id is the `span_id` of this span's parent span. If this is a root span, then this
  // field must be omitted. The ID is an 8-byte array.
  bytes parent_span_id = 4;

  // resource that is associated with this span. Optional. If not set, this span
  // should be part of a ResourceSpans message that does include the resource information,
  // unless resource information is unknown.
  Resource resource = 5;

  // name describes the span's operation.
  //
  // For example, the name can be a qualified method name or a file name
  // and a line number where the operation is called. A best practice is to use
  // the same display name at the same call point in an application.
  // This makes it easier to correlate spans in different traces.
  //
  // This field is semantically required to be set to non-empty string.
  //
  // This field is required.
  string name = 6;

  // SpanKind is the type of span. Can be used to specify additional relationships between spans
  // in addition to a parent/child relationship.
  enum SpanKind {
    // Unspecified. Do NOT use as default.
    // Implementations MAY assume SpanKind to be INTERNAL when receiving UNSPECIFIED.
    SPAN_KIND_UNSPECIFIED = 0;

    // Indicates that the span represents an internal operation within an application,
    // as opposed to an operations happening at the boundaries. Default value.
    INTERNAL = 1;

    // Indicates that the span covers server-side handling of an RPC or other
    // remote network request.
    SERVER = 2;

    // Indicates that the span describes a request to some remote service.
    CLIENT = 3;

    // Indicates that the span describes a producer sending a message to a broker.
    // Unlike CLIENT and SERVER, there is often no direct critical path latency relationship
    // between producer and consumer spans. A PRODUCER span ends when the message was accepted
    // by the broker while the logical processing of the message might span a much longer time.
    PRODUCER = 4;

    // Indicates that the span describes consumer receiving a message from a broker.
    // Like the PRODUCER kind, there is often no direct critical path latency relationship
    // between producer and consumer spans.
    CONSUMER = 5;
  }

  // kind field distinguishes between spans generated in a particular context. For example,
  // two spans with the same name may be distinguished using `CLIENT` (caller)
  // and `SERVER` (callee) to identify network latency associated with the span.
  SpanKind kind = 7;

  // start_time_unixnano is the start time of the span. On the client side, this is the time
  // kept by the local machine where the span execution starts. On the server side, this
  // is the time when the server's application handler starts running.
  //
  // This field is semantically required. When not set on receive -
  // receiver should set it to the value of end_time field if it was
  // set. Or to the current time if neither was set. It is important to
  // keep end_time > start_time for consistency.
  //
  // This field is required.
  int64 start_time_unixnano = 8;

  // end_time_unixnano is the end time of the span. On the client side, this is the time
  // kept by the local machine where the span execution ends. On the server side, this
  // is the time when the server application handler stops running.
  //
  // This field is semantically required. When not set on receive -
  // receiver should set it to start_time value. It is important to
  // keep end_time > start_time for consistency.
  //
  // This field is required.
  int64 end_time_unixnano = 9;

  // attributes is a set of attributes. The value can be a string, an integer, a double
  // or the Boolean values `true` or `false`. Note, global attributes like
  // server name can be set as tags using resource API. Examples of attributes:
  //
  //     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
  //     "/http/server_latency": 300
  //     "abc.com/myattribute": true
  //     "abc.com/score": 10.239
  repeated AttributeKeyValue attributes = 10;

  // The number of attributes that were discarded. Attributes can be discarded
  // because their keys are too long or because there are too many attributes.
  // If this value is 0, then no attributes were dropped.
  int32 dropped_attributes_count = 11;

  // TimedEvent is a time-stamped annotation of the span, consisting of either
  // user-supplied key-value pairs, or details of a message sent/received between Spans.
  message TimedEvent {
    // The time the event occurred.
    int64 time_unixnano = 1;

    // A user-supplied name describing the event.
    string name = 2;

    // A set of attributes on the event.
    repeated AttributeKeyValue attributes = 3;

    // The number of dropped attributes. If the value is 0, then no attributes were dropped.
    int32 dropped_attributes_count = 4;
  }

  // timed_events is a collection of `TimedEvent`s.
  repeated TimedEvent timed_events = 12;

  // The number of dropped timed events. If the value is 0, then no events were dropped.
  int32 dropped_timed_events_count = 13;

  // Link is a pointer from the current span to another span in the same trace or in a
  // different trace. For example, this can be used in batching operations,
  // where a single batch handler processes multiple requests from different
  // traces or when the handler receives a request from a different project.
  message Link {
    // A unique identifier of a trace that this linked span is part of. The ID is a
    // 16-byte array.
    bytes trace_id = 1;

    // A unique identifier for the linked span. The ID is an 8-byte array.
    bytes span_id = 2;

    // The Tracestate associated with the link.
    repeated TraceEntry tracestate = 3;

    // A set of attributes on the link.
    repeated AttributeKeyValue attributes = 4;

    int32 dropped_attributes_count = 5;
  }

  // links is a collection of Links, which are references from this span to a span
  // in the same or different trace.
  repeated Link links = 14;

  // The number of dropped links after the maximum size was enforced. If
  // this value is 0, then no links were dropped.
  int32 dropped_links_count = 15;

  // An optional final status for this span. Semantically when Status
  // wasn't set it is means span ended without errors and assume
  // Status.Ok (code = 0).
  Status status = 16;

  // An optional number of child spans that were generated while this span
  // was active. If set, allows an implementation to detect missing child spans.
  int32 child_span_count = 17;
}

// The `Status` type defines a logical error model that is suitable for different
// programming environments, including REST APIs and RPC APIs. This proto's fields
// are a subset of those of
// [google.rpc.Status](https://github.com/googleapis/googleapis/blob/master/google/rpc/status.proto),
// which is used by [gRPC](https://github.com/grpc).
message Status {
  // The status code. This is optional field. It is safe to assume 0 (OK)
  // when not set.
  int32 code = 1;

  // A developer-facing error message, which should be in English.
  string message = 2;
}

// Defines a Metric which has one or more timeseries.
message Metric {
  // The descriptor of the Metric.
  // TODO(issue #152): consider only sending the name of descriptor for
  // optimization.
  MetricDescriptor metric_descriptor = 1;

  // One or more timeseries for a single metric, where each timeseries has
  // one or more points.
  repeated TimeSeries timeseries = 2;

  // The resource for the metric. If unset, it may be set to a default value
  // provided for a sequence of messages in an RPC stream.
  Resource resource = 3;
}

// Defines a metric type and its schema.
message MetricDescriptor {
  // The metric type, including its DNS name prefix. It must be unique.
  string name = 1;

  // A detailed description of the metric, which can be used in documentation.
  string description = 2;

  // The unit in which the metric value is reported. Follows the format
  // described by http://unitsofmeasure.org/ucum.html.
  string unit = 3;

  // The kind of metric. It describes how the data is reported.
  //
  // A gauge is an instantaneous measurement of a value.
  //
  // A cumulative measurement is a value accumulated over a time interval. In
  // a time series, cumulative measurements should have the same start time,
  // increasing values and increasing end times, until an event resets the
  // cumulative value to zero and sets a new start time for the following
  // points.
  enum Type {
    // Do not use this default value.
    UNSPECIFIED = 0;

    // Integer gauge. The value can go both up and down.
    GAUGE_INT64 = 1;

    // Floating point gauge. The value can go both up and down.
    GAUGE_DOUBLE = 2;

    // Distribution gauge measurement. The count and sum can go both up and
    // down. Recorded values are always >= 0.
    // Used in scenarios like a snapshot of time the current items in a queue
    // have spent there.
    GAUGE_DISTRIBUTION = 3;

    // Integer cumulative measurement. The value cannot decrease, if resets
    // then the start_time should also be reset.
    CUMULATIVE_INT64 = 4;

    // Floating point cumulative measurement. The value cannot decrease, if
    // resets then the start_time should also be reset. Recorded values are
    // always >= 0.
    CUMULATIVE_DOUBLE = 5;

    // Distribution cumulative measurement. The count and sum cannot decrease,
    // if resets then the start_time should also be reset.
    CUMULATIVE_DISTRIBUTION = 6;

    // Some frameworks implemented Histograms as a summary of observations
    // (usually things like request durations and response sizes). While it
    // also provides a total count of observations and a sum of all observed
    // values, it calculates configurable percentiles over a sliding time
    // window. This is not recommended, since it cannot be aggregated.
    SUMMARY = 7;
  }
  Type type = 4;

  // The label keys associated with the metric descriptor.
  repeated LabelKey label_keys = 5;
}

// Defines a label key associated with a metric descriptor.
message LabelKey {
  // The key for the label.
  string key = 1;

  // A human-readable description of what this label key represents.
  string description = 2;
}

// A collection of data points that describes the time-varying values
// of a metric.
message TimeSeries {
  // Must be present for cumulative metrics. The time when the cumulative value
  // was reset to zero. Exclusive. The cumulative value is over the time interval
  // (start_timestamp, timestamp]. If not specified, the backend can use the
  // previous recorded value.
  int64 start_time_unixnano = 1;

  // The set of label values that uniquely identify this timeseries. Applies to
  // all points. The order of label values must match that of label keys in the
  // metric descriptor.
  repeated LabelValue label_values = 2;

  // The data points of this timeseries. Point.value type MUST match the
  // MetricDescriptor.type.
  repeated Point points = 3;
}

message LabelValue {
  // The value for the label.
  string value = 1;
  // If false the value field is ignored and considered not set.
  // This is used to differentiate a missing label from an empty string.
  bool has_value = 2;
}

// A timestamped measurement.
message Point {

  enum ValueType {
    INT64 = 0;
    DOUBLE = 1;
    DISTRIBUTION = 2;
    SUMMARY = 3;
  }

  // The moment when this point was recorded. Inclusive.
  // If not specified, the timestamp will be decided by the backend.
  int64 time_unixnano = 1;

  // Defines which of the value fields is set.
  ValueType value_type = 2;

  // A 64-bit integer.
  int64 int64_value = 3;

  // A 64-bit double-precision floating-point number.
  double double_value = 4;

  // A distribution value.
  DistributionValue distribution_value = 5;

  // A summary value. This is not recommended, since it cannot be aggregated.
  SummaryValue summary_value = 6;
}

// Distribution contains summary statistics for a population of values. It
// optionally contains a histogram representing the distribution of those
// values across a set of buckets.
message DistributionValue {
  // The number of values in the population. Must be non-negative. This value
  // must equal the sum of the values in bucket_counts if a histogram is
  // provided.
  int64 count = 1;

  // The sum of the values in the population. If count is zero then this field
  // must be zero.
  double sum = 2;

  // The sum of squared deviations from the mean of the values in the
  // population. For values x_i this is:
  //
  //     Sum[i=1..n]((x_i - mean)^2)
  //
  // Knuth, "The Art of Computer Programming", Vol. 2, page 323, 3rd edition
  // describes Welford's method for accumulating this sum in one pass.
  //
  // If count is zero then this field must be zero.
  double sum_of_squared_deviation = 3;

  // A Distribution may optionally contain a histogram of the values in the
  // population. The bucket boundaries for that histogram are described by
  // BucketOptions.
  //
  // If bucket_options has no type, then there is no histogram associated with
  // the Distribution.
  message BucketOptions {
    oneof type {
      // Bucket with explicit bounds.
      Explicit explicit = 1;
    }

    // Specifies a set of buckets with arbitrary upper-bounds.
    // This defines size(bounds) + 1 (= N) buckets. The boundaries for bucket
    // index i are:
    //
    // [0, bucket_bounds[i]) for i == 0
    // [bucket_bounds[i-1], bucket_bounds[i]) for 0 < i < N-1
    // [bucket_bounds[i], +infinity) for i == N-1
    message Explicit {
      // The values must be strictly increasing and > 0.
      repeated double bounds = 1;
    }

    // TODO: If OpenMetrics decides to support (a, b] intervals we should add
    // support for these by defining a boolean value here which decides what
    // type of intervals to use.
  }

  // Don't change bucket boundaries within a TimeSeries if your backend doesn't
  // support this.
  // TODO(issue #152): consider not required to send bucket options for
  // optimization.
  BucketOptions bucket_options = 4;

  message Bucket {
    // The number of values in each bucket of the histogram, as described in
    // bucket_bounds.
    int64 count = 1;

    // If the distribution does not have a histogram, then omit this field.
    Exemplar exemplar = 2;
  }

  // If the distribution does not have a histogram, then omit this field.
  // If there is a histogram, then the sum of the values in the Bucket counts
  // must equal the value in the count field of the distribution.
  repeated Bucket buckets = 5;

  // Exemplars are example points that may be used to annotate aggregated
  // Distribution values. They are metadata that gives information about a
  // particular value added to a Distribution bucket.
  message Exemplar {
    // Value of the exemplar point. It determines which bucket the exemplar
    // belongs to.
    double value = 1;

    // The observation (sampling) time of the above value.
    int64 time_unixnano = 2;

    // Contextual information about the example value.
    map<string, string> attachments = 3;
  }
}

// The start_timestamp only applies to the count and sum in the SummaryValue.
message SummaryValue {
  // The total number of recorded values since start_time. Optional since
  // some systems don't expose this.
  google.protobuf.Int64Value count = 1;

  // The total sum of recorded values since start_time. Optional since some
  // systems don't expose this. If count is zero then this field must be zero.
  // This field must be unset if the sum is not available.
  google.protobuf.DoubleValue sum = 2;

  // The values in this message can be reset at arbitrary unknown times, with
  // the requirement that all of them are reset at the same time.
  message Snapshot {
    // The number of values in the snapshot. Optional since some systems don't
    // expose this.
    google.protobuf.Int64Value count = 1;

    // The sum of values in the snapshot. Optional since some systems don't
    // expose this. If count is zero then this field must be zero or not set
    // (if not supported).
    google.protobuf.DoubleValue sum = 2;

    // Represents the value at a given percentile of a distribution.
    message ValueAtPercentile {
      // The percentile of a distribution. Must be in the interval
      // (0.0, 100.0].
      double percentile = 1;

      // The value at the given percentile of a distribution.
      double value = 2;
    }

    // A list of values at different percentiles of the distribution calculated
    // from the current snapshot. The percentiles must be strictly increasing.
    repeated ValueAtPercentile percentile_values = 3;
  }

  // Values calculated over an arbitrary time window.
  Snapshot snapshot = 3;
}

