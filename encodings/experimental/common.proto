syntax = "proto3";

package experimental;

option java_multiple_files = true;
option java_package = "io.opencensus.proto.trace.v1";
option java_outer_classname = "TraceProto";

option ruby_package = "OpenCensus.Proto.Trace.V1";

// InstrumentationLibrary is a message representing the instrumentation library information
// such as the fully qualified name and version.
message InstrumentationLibrary {
    string name = 1;
    string version = 2;
}

// Resource information. This describes the source of telemetry data.
message Resource {
    // labels is a collection of attributes that describe the resource. See OpenTelemetry
    // specification semantic conventions for standardized label names:
    // https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md
    repeated AttributeKeyValue labels = 1;

    // dropped_labels_count is the number of dropped labels. If the value is 0, then
    // no labels were dropped.
    int32 dropped_labels_count = 2;
}

// AttributeValueType is the enumeration of possible types that value can have.
enum AttributeValueType {
    STRING  = 0;
    INT     = 1;
    DOUBLE  = 2;
    BOOL    = 3;
    LIST    = 4;
    MAP     = 5;
};

// AttributeValue is a value that is used to store Log body.
message AttributeValue {
    // type of the value.
    AttributeValueType type = 1;

    // Only one of the following fields is supposed to contain data (determined by `type` field).
    // This is deliberately not using Protobuf `oneof` for performance reasons (verified by benchmarks).

    string string_value = 2;
    int64 int_value = 3;
    double double_value = 4;
    bool bool_value = 5;
    AttributeValueListOrMap listOrMap = 6;
}

message AttributeValueListOrMap {
    repeated AttributeValue list = 1;
    repeated AttributeKeyValue map = 2;
}

// AttributeKeyValue is a key-value pair that is used to store Span attributes, Resource
// labels, etc.
message AttributeKeyValue {
    // ValueType is the enumeration of possible types that value can have.
    enum ValueType {
        STRING  = 0;
        INT     = 1;
        DOUBLE  = 2;
        BOOL    = 3;
    };

    // key part of the key-value pair.
    string key = 1;

    // type of the value.
    ValueType type = 2;

    // Only one of the following fields is supposed to contain data (determined by `type` field).
    // This is deliberately not using Protobuf `oneof` for performance reasons (verified by benchmarks).

    string string_value = 3;
    int64 int_value = 4;
    double double_value = 5;
    bool bool_value = 6;
}

