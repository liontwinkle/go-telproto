// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package traceflatbuffers

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Int64Value struct {
	_tab flatbuffers.Table
}

func GetRootAsInt64Value(buf []byte, offset flatbuffers.UOffsetT) *Int64Value {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Int64Value{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Int64Value) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Int64Value) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Int64Value) Int64Value() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Int64Value) MutateInt64Value(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func Int64ValueStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func Int64ValueAddInt64Value(builder *flatbuffers.Builder, int64Value int64) {
	builder.PrependInt64Slot(0, int64Value, 0)
}
func Int64ValueEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
